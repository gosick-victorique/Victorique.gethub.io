<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[【bzoj 3434】[Wc2014]时空穿梭]]></title>
      <url>/bzoj3434/</url>
      <content type="html"><![CDATA[<blockquote>
<p>听说是冬令营少见的可做的题目？好像比较下我参加过的冬令营， 确实是一个良心的题目啊。</p>
<p>作为一个看上去就像是化式子题的题目， 这个题还是有一点新意的。</p>
<p>就是没有把难点放在怎么“筛”的问题上。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3434" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>一个<span class="math inline">\(n\)</span>维平面选取一条直线上的<span class="math inline">\(c\)</span>个整点， 第<span class="math inline">\(i\)</span>维坐标<span class="math inline">\(\leqslant m_i\)</span>, 的方案数。</p>
<h1 id="解题报告">解题报告</h1>
<p>因为两点确定一条直线， 加上整点的限定， 所以可以先枚举选取的点构成的<strong>线段</strong>的每一维坐标的长度<span class="math inline">\(l_i\)</span>.</p>
<p>在确定每一维坐标的长度的前提下， 可以得到每一维坐标的最小值的范围<span class="math inline">\(m_i-l_i\)</span>.</p>
<p>在多维空间中的一条线段上的整点个数为<span class="math inline">\(\text{gcd}(l_1,l_2,l_3,...,l_n) - 1\)</span>.</p>
<p>不妨设<span class="math inline">\(m_1 \leqslant \text{min} \lbrace m_2,m_3,...,m_n \rbrace\)</span></p>
<p>然后就可以列出式子： <span class="math display">\[
\begin{aligned}
\text{ans} &amp; = \sum_{l_1=1}^{m_1} \sum_{l_2=1}^{m_2} ... \sum_{l_n=1}^{m_n} \prod_{i=1}^{n} (m_i - l_i) {\text{gcd}(l_1,l_2,...,l_n)-1 \choose c-2}\\
&amp;= \sum_{d=1}^{m_1} {d-1 \choose c-2} \sum_{l_1 d \leqslant m_1} ... \sum_{l_nd \leqslant m_n} \prod_{i=1}^{n}(m_i-l_id) [\text{gcd}(l_1,l_2,...,l_n) = 1] \\
&amp;= \sum_{d=1}^{m_1} {d-1 \choose c-2}  \sum_{dk \leqslant m_1}  \mu(k) \sum_{l_1 kd \leqslant m_1} ... \sum_{l_nkd \leqslant m_n} \prod_{i=1}^{n}(m_i-l_ikd) \\
&amp;= \sum_{k=1}^{m_1} \sum_{l_1k \leqslant m_1} ... \sum_{l_n k \leqslant m_n} \prod_{i=1}^{n}(m_i-l_ik) \sum_{d|k} \mu(\frac{k}{d}){d-1 \choose c-2}
\end{aligned}
\]</span> 这个式子可以重写下： <span class="math display">\[
\text{ans} = \sum_{k=1}^{m_1}  g(k) f(k)
\]</span> 其中， <span class="math inline">\(f(k) = \sum_{d|k} \mu(\frac{k}{d}){d-1 \choose c-2}\)</span> 这个可以使用<span class="math inline">\(n \ln n\)</span>的筛法直接预处理得到。</p>
<p>但是<span class="math inline">\(g(k) = \sum_{l_1k \leqslant m_1} ... \sum_{l_n k \leqslant m_n} \prod_{i=1}^{n}(m_i-l_ik)\)</span> 如果暴力算， 复杂度爆炸。</p>
<p>继续化简 <span class="math display">\[
\begin{aligned}
g(k) &amp; = \prod_{i=1}^{n} \sum_{l_i \leqslant \lfloor \frac{m_i}{k} \rfloor} (m_i-l_ik) \\ 
&amp; = \prod_{i=1}^{n} (m_i * \lfloor \frac{m_i}{k} \rfloor - k*\frac{\lfloor \frac{m_i}{k} \rfloor * (\lfloor \frac{m_i}{k} \rfloor+1) }{2}) \\
&amp; = \sum_{i=0}^{n} g_i * k^i
\end{aligned}
\]</span> 然后， <span class="math display">\[
\begin{aligned}
\text{ans} &amp; = \sum_{k=1}^{m_1} \sum_{i=0}^{n} g_i * k^i f(k) \\
&amp;= \sum_{i=0}^{n} g_i \sum_{k=1}^{m_1} k^if(k)
\end{aligned}
\]</span></p>
<p>这样复杂度是<span class="math inline">\(O(Tn^3\sqrt{m}+ cm \ln m)\)</span>的</p>
<p>有的时候题目难在std过于<strong>暴力</strong>让人不敢相信。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">12</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> C=<span class="number">21</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">100010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> T=<span class="number">1010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">10007</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> f[N][C][M], g[C][M]; </div><div class="line"><span class="keyword">int</span> pm[M], pn, mu[M]; </div><div class="line"><span class="keyword">bool</span> no[M]; </div><div class="line"><span class="keyword">int</span> _n[T],cc[T],mm[T][N],test; </div><div class="line"><span class="keyword">int</span> n,c,m,mi[N],as; </div><div class="line"><span class="keyword">int</span> k[N],bio[M][C]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>?<span class="number">-1</span>:f); </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>; c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmx</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&gt;x?a:x); &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmn</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&lt;x?a:x); &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; x+=y; <span class="keyword">if</span> (x&gt;=p) x-=p; <span class="keyword">if</span>(x&lt;<span class="number">0</span>) x+=p; <span class="keyword">return</span> x; &#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inital</span><span class="params">()</span> </span>&#123; </div><div class="line">	no[<span class="number">1</span>]=<span class="number">1</span>, mu[<span class="number">1</span>]=<span class="number">1</span>; </div><div class="line">	rep(i,<span class="number">2</span>,m) &#123; </div><div class="line">		<span class="keyword">if</span> (!no[i]) pm[++pn]=i, mu[i]=<span class="number">-1</span>; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=pn&amp;&amp;pm[j]*i&lt;=m; ++j) &#123; </div><div class="line">			no[pm[j]*i]=<span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span> (i%pm[j]==<span class="number">0</span>) <span class="keyword">break</span>; </div><div class="line">			<span class="keyword">else</span> mu[pm[j]*i]=-mu[i]; </div><div class="line">		&#125; </div><div class="line">	&#125; </div><div class="line">	bio[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>; </div><div class="line">	rep(i,<span class="number">1</span>,m) &#123; bio[i][<span class="number">0</span>]=<span class="number">1</span>; rep(j,<span class="number">1</span>,<span class="number">19</span>) </div><div class="line">		bio[i][j]=mo(bio[i<span class="number">-1</span>][j],bio[i<span class="number">-1</span>][j<span class="number">-1</span>]);</div><div class="line">	&#125; </div><div class="line">	</div><div class="line">	rep(c,<span class="number">2</span>,<span class="number">20</span>) rep(i,<span class="number">1</span>,m) <span class="keyword">if</span> (mu[i]) </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=i,k=<span class="number">1</span>; j&lt;=m; j+=i,++k) </div><div class="line">			g[c][j]=mo(g[c][j],bio[k<span class="number">-1</span>][c<span class="number">-2</span>]*mu[i]); </div><div class="line">	rep(i,<span class="number">1</span>,m) rep(c,<span class="number">2</span>,<span class="number">20</span>) &#123; </div><div class="line">		<span class="keyword">int</span> t=<span class="number">1</span>; rep(n,<span class="number">0</span>,<span class="number">11</span>) &#123; </div><div class="line">			f[n][c][i]=mo(f[n][c][i<span class="number">-1</span>],t*g[c][i]%p); </div><div class="line">			t=t*i%p; </div><div class="line">		&#125; </div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">muls</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="built_in">memset</span>(k,<span class="number">0</span>,<span class="keyword">sizeof</span>(k)); k[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> a, b, B; </div><div class="line">	rep(i,<span class="number">1</span>,n) &#123; </div><div class="line">		B=mi[i]/x; </div><div class="line">		a=(ll)B*mi[i]%p, b=mo(p,-(ll)B*(B+<span class="number">1</span>)/<span class="number">2</span>%p); </div><div class="line">		vep(j,n,<span class="number">1</span>) k[j]=mo(k[j]*a%p,k[j<span class="number">-1</span>]*b%p); </div><div class="line">		k[<span class="number">0</span>]=k[<span class="number">0</span>]*a%p; </div><div class="line">	&#125; </div><div class="line">&#125; </div><div class="line">		</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(test); m=<span class="number">0</span>; </div><div class="line">	rep(i,<span class="number">1</span>,test) &#123; </div><div class="line">		in(_n[i]),in(cc[i]); </div><div class="line">		rep(j,<span class="number">1</span>,_n[i]) in(mm[i][j]),cmx(m,mm[i][j]); </div><div class="line"> 	&#125;</div><div class="line"> 	inital(); </div><div class="line"> 	rep(ts, <span class="number">1</span>, test) &#123; </div><div class="line"> 		n=_n[ts], c=cc[ts]; </div><div class="line"> 		m=M, as=<span class="number">0</span>; </div><div class="line"> 		rep(i,<span class="number">1</span>,n) mi[i]=mm[ts][i], cmn(m, mi[i]); </div><div class="line"> 		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>, j; i&lt;=m; i=j+<span class="number">1</span>) &#123; </div><div class="line"> 			j=M; rep(kk,<span class="number">1</span>,n) cmn(j,mi[kk]/(mi[kk]/i)); </div><div class="line"> 			muls(i); </div><div class="line"> 			rep(kk,<span class="number">0</span>,n) as=mo(as,k[kk]*(f[kk][c][j]-f[kk][c][i<span class="number">-1</span>])%p); </div><div class="line"> 		&#125;</div><div class="line"> 		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, as); </div><div class="line"> 	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 反演 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【PKUSC 2017】签下卖身契]]></title>
      <url>/pkusc2017/</url>
      <content type="html"><![CDATA[<blockquote>
<p>SDOI 2017 R2 滚出队的我， THU已经是不给机会了。</p>
<p>但是PKU还是挺有人情味的，没让我这个9年OI直接退役。</p>
<p>就跟着<span class="math inline">\(A队*2+B队*1\)</span> 大爷们去PKU签卖身契了。</p>
<p>可以有学上？</p>
</blockquote>
<a id="more"></a>
<h3 id="day-0">Day 0</h3>
<p>整个人还沉浸在R2爆炸的悲怆中， 感觉已经在心里用各种奇怪的姿势骂了出题人，也没啥新姿势了， 就先把这悲惨的一页翻过去了。。</p>
<p>没回家就从JN做高铁到帝都去了， 一路上真是平稳极了， 所以就全程2K的颓样。</p>
<p>然后下了高铁就转一个subway， 大体剧情就是我和yveh、lzr在前面走着， 上了车发现后面的人都不见了？</p>
<p>据说他们没挤上了？我们也没挤，　就被熙熙攘攘的人流带上了地铁。</p>
<p>反正就在中关村站等了他们一波，　话说高铁３分钟一波是真快。</p>
<p>然后就开始往宾馆走，　本来我和yveh在前面带路， 但是走了一些安全通道之类的奇怪路线， 回头发现lx丢掉了。。 老师把自己弄丢了怎么搞， 在线等， 挺急的。。</p>
<p>然后打电话， lx说去starbucks集合， 但是我们一行人在starbucks等了一波， 两边都说到了， 但没有互相看见。。 据说大城市方圆100米能有好几个starbucks?</p>
<p>然后就各自往宾馆方向走了。 路上买了杯西瓜汁。。第二杯半价感觉划算极了（我就交了第二杯的钱。。）。</p>
<p>在宾馆放下东西就赶着Lx去PKU报道， 先到西南门， 门卫：“我不知道你们这个活动”， 然后是西门？ “我不知道你们这个活动”， 然后是北门， 终于能进了。</p>
<p>已经热成狗了。</p>
<p>而且饥渴难耐。</p>
<p>难受。</p>
<p>报道还排了一个巨长的队， 他们一群人在旁边坐着， 就atp 和 我、yveh排着， 过了一会全过来插了队。。</p>
<blockquote>
<p>这里是PKU, 你们因为插队被捕了。</p>
</blockquote>
<p>然后去吉野家吃了个饭（中间lx带着我们迷路的故事省掉吧， 太惨了）。</p>
<p>lzr, charge， 你们怎么和我要一样的啊？ 什么？ 你就看到了牛肉饭？？？</p>
<p>晚上看前两年的数学题， 挺简单（？！）。。</p>
<h3 id="day-1">　Day 1</h3>
<p>9:00考数学。</p>
<p>第一题暴力展开多项式+系数对比一波？</p>
<p>第二题咦这个式子怎么因式分解啊？</p>
<p>第三题咦这个三次根式怎么有理化啊？</p>
<p>第四题咦这个<span class="math inline">\(300*\log _{10} ^{5}\)</span> 是多少啊？</p>
<p>第五题？ 又一个多项式不会因式分解？</p>
<p>第六题这个排列组合基础啊， md终于有我会的了！ 先把ABC同构除掉， 找一下回文再去掉正反同构， 巨简单送波分啊。</p>
<p>第七题证明<span class="math inline">\(\sin 10\)</span>是个无理数？ 这个不是课本例题么！ 但是怎么做来着， 我把它化成<span class="math inline">\(\sin 30\)</span>看一波？ 咦， 好像是<span class="math inline">\(8x^3+6x+1=0\)</span>的根？ 我偷个懒就说他没有有理数根就好了？（然后我强行写成了无实数根， excuse me ?)</p>
<p>实际上再反证一波<span class="math inline">\(\frac{p}{q}\)</span>这类的很容易的， 但我太智障了啊。</p>
<p>第八题我直接举了一个例子。。</p>
<p>第九题我直接看底面， 然后三角函数推了一波？</p>
<p>第十题花了个反例？ （结果忘抄到答题纸上了）。</p>
<p>怎么今年数学题这么狗啊？</p>
<hr>
<p>然后参观一波实验室， 得到一波结论： 没有理论基础谈个毛实践。</p>
<p>下午去机试， 去晚了(exm &gt;_&lt;) 。</p>
<p>进去的时候已经要开考了， 先配置gvim， 咦， 我的这个编译命令怎么无效了？ 不可能啊， 我一只这么写啊。</p>
<p>这岂不是完蛋？那么就只能用那个什么devc++4.9? 这是个什么玩意。。</p>
<p>散了做题吧， 汉语题太智障了。。直接A掉了（梦回巅峰！）</p>
<p>然后这个A题是个字符串模拟题， gets()读入一波， 然后拆了一下单词和多余字符， 然后循环一波，然后提交， 然后wa？</p>
<p>什么鬼， 我干瞪眼查错一波， 咦， 好像如果句子开头是标点我就挂了， 改， A.</p>
<p>然后看standing. BeiYu好像抢了F的2A? 这个很兹瓷啊，我也冲一波。</p>
<p>就是个树形DP？A了没啥好说了（梦回巅峰！）。</p>
<p>然后读了一波D题， 感觉可以最小割搞搞？ 但是题目意思是可以多个联通块还是一个联通块啊？ 我英死早，GG了半个小时就结束了。</p>
<hr>
<p>晚上继续考。。</p>
<p>汉语题这个整数划分这么僵硬直接交 ？ WA？　没关文件？　罚时＋＋。</p>
<p>看Ａ，这好像又是一个模拟啊， 咦我怎么WA了， 哦，无解条件好像是所有都不满足才无解， 我好想有一个不满足就退出了。</p>
<p>看B, 这不是一个数据结构裸题么， 我强行维护最大最小， 左最大最小， 右最大最小， 再特判一波不能全取， 就A了。</p>
<p>看E, 这个是个博弈啊， 我区间博弈一波， T了， 复杂度好像是<span class="math inline">\(O(n^4)\)</span>, 卡不过去弃了。</p>
<p>出来听说E题XYM直接卡过去了？</p>
<p>怪不得人家是A队， 就是常数优越啊。。</p>
<p>晚上2K一波+复习计算几何（为什么考试前一定要复习计算几何啊？）</p>
<h3 id="day-2">Day 2</h3>
<p>Day 1 好长， 终于到Day 2 了。</p>
<p>今天上午是个五个小时的场， 有点没数怎么办。</p>
<p>还是先看了汉语题， 煞笔背包， A.</p>
<p>咦， 怎么这么多人先做T1啊， 我也没记住是什么题， 反正就直接A了。</p>
<p>看HXY大爷A了E, 计算几何？ 半平面交？ 直接板子一波。</p>
<p>怎么过不了样例 ？我画一波样例？　这个怎么是逆时针啊，题目不是说什么<del>counter</del>clockwise, 什么counter是相反的意思？ 我英死早。</p>
<p>交， A.</p>
<p>然后看D， 这是一个超级稀疏图的哈密顿回路， 我直接跑一波试试， T了， 先弃掉吧。</p>
<p>这个B题是个煞笔模拟呀， A 了。</p>
<p>这个F题好玄学呀， 我写个暴力？ T了， 啊， 这么多人A， 应该暴力可以过啊， 我好难过啊， 我再减减枝， 咦， A了！ 这个ACM赛制感觉真是不一样啊。</p>
<p>还有半个消失了， 可以D缩一下链再暴力一波， 但是C过的人好多， 我看眼C吧。</p>
<p>这好像是个题目巨长的开车主题模拟题？ 好吧读完提还有10分钟， D锁链写惨了炸飞了。。</p>
<hr>
<p>然后只有11题？排名15-30, 那我必须好好面试， 客客气气的， 老老实实的才行啊。</p>
<p>面试官A ：</p>
<p>A: 咱们不谈智商相关的，来点情商题？</p>
<p>S: 好啊， 好啊。</p>
<p>A: 你是家长带着来的还是自己来的。</p>
<p>S: 老师带着来的（还把自己弄丢了）。</p>
<p>A: 特朗普当选对中国是利大于弊还是弊大于利。</p>
<p>S:（我天天看知乎， 你问我这个？妙！） …特朗普是个精明的商人…希拉里是个老辣的政客…既是机遇又是挑战… 双方加深合作…把中美关系…</p>
<p>A: 你怎么评价明朝是中国历史上最后一个汉人执政的朝代？</p>
<p>S:（我学理前天天历史第一我不怕！） … 生于忧患， 死于安乐… 压迫导致抗争… 环境造就性格… 努力通向成功…</p>
<p>（超级熟练）</p>
<p>A: 两个词评论一波自己？</p>
<p>S: 我啥都会， 我巨屌， 我是一个“全面”的人（exm?)</p>
<p>S: 我敢于挑战权威， 我充满批判精神。</p>
<p>A: 你有光明的未来! (???)</p>
<hr>
<p>面试官B（超凶）：</p>
<p>B: 东营？ 这是什么地方？</p>
<p>S: 胜利油田黄河入海口云云。</p>
<p>B: 大学毕业后有什么想法？</p>
<p>S: 我想出国深造， 因为…(被打断)</p>
<p>B: 你为什么会想“出国”深造？</p>
<p>S: 学习先进技术balabala… 国内也会先进balabala…（内心充满波动）</p>
<p>B: 你了解Google公司么？</p>
<p>S: (突然兴奋)我天天用他的搜索引擎！</p>
<p>B: (突然打断)你怎么能用他的搜索引擎！</p>
<p>S:(貌似干了一下违法违规的事情)我…</p>
<p>B: (超凶)你是不是翻墙了！</p>
<p>S:昂昂昂。。。(满脸对不起党对不起人民)</p>
<p>B: 对比评价一下百度和谷歌公司</p>
<p>S: 百度恶性竞争， 谋财害命…</p>
<p>B: （直接打断），你能不能从产品角度分析？</p>
<p>S: 百度全是广告。。。谷歌超好。</p>
<p>B: 你有什么优点么？</p>
<p>S: 我优点超多， （准备开吹）</p>
<p>B: （突然打断）看来没什么张口而出的优点， 那有什么缺点？</p>
<p>S:（exm?)…</p>
<p>被凶了一脸看来没学上了。。</p>
<hr>
<p>面试官C:</p>
<p>C: 简单介绍一下自己。</p>
<p>S: 我十年OI一场空。</p>
<p>C: 你学过这么多年OI! 你一定会好多编程语言吧！</p>
<p>S: 。 不会。</p>
<p>C: 平常读什么书。</p>
<p>S: 《哈利波特怒怼伏地魔》</p>
<p>C: … 时间到了，你走吧。</p>
<p>没学上了++。</p>
<hr>
<p>晚上随便吃点然后2K2K2K2K……</p>
<h3 id="day-3">Day 3</h3>
<p>终于day 3了， 前面过得好慢啊。</p>
<p>淋了一路的雨+ 鞋子完全湿透 + 穿着短裤犯彪 ——&gt; 浑身难受。</p>
<p>在礼堂没有座位了，就一屁股坐在地上。。 然后听讲提+看晚会回放。</p>
<p>什么井冈山打虎好好笑！</p>
<p>然后发协议， 无条件60， 前100一本？ 比想到的好得多？</p>
<p>好像是数学和面试加了不少分， 总成绩17、18？ 然后因为没有D类歧视，所以就有约了？</p>
<p>有学上了， 心情好了点， 但是还要花钱才能有学上， 心情又很难受。</p>
<p>为什么SD省队这么容不下我， SDOI 我RNMB .</p>
<p>然后就会家了， 一个月没在家里待几天，吃了顿pizza, 感觉挺不错。</p>
<p>要为决赛奋斗一波了！为D类选手正名！</p>
]]></content>
      
        <categories>
            
            <category> 奇怪向 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 奇怪向 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【SDOI 2017】Round2离队滚粗记]]></title>
      <url>/sdoi2017r2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>两天省选真是让我体会到了人生无常(呵呵呵~~)。</p>
<p>有的时候说什么“谋事在人，成事在天”， 也是很有道理的， 有些事情真的是把握不住的。</p>
<p>该死的二轮省选对我的小心脏造成了1ww点的打击哈。。</p>
</blockquote>
<a id="more"></a>
<h3 id="day--1">Day -1</h3>
<p>从帝都昏昏碌碌地滚回了DY。</p>
<p>作为一个CTSC、APIO炸成狗的选手，在SLYZ的某体育组(?)接受了一波帝国主义的面试培训。</p>
<del>
(为我进不了面试做了一波铺垫?)
</del>
<p>培训上就是各种婊XYM大爷？ 挺XYM大爷怒婊高考真是带劲！</p>
<blockquote>
<p>我感觉你们现在的这些初高中老师不行的， 看我来做个榜样让你们学习一下什么叫做素质教育！ ——XYM</p>
</blockquote>
<p>真是带劲， 估计只有这样霸气侧漏的选手才可以进入省队吧。</p>
<p>回家发现妈妈狼吞虎咽了给我买的晚饭（pizza！）， 据说是自己减肥没吃晚饭结果忍不住了？？？</p>
<h3 id="day-0">Day 0</h3>
<p>12:00在学校食堂门口出发的， 再次成为一群文化课大佬围观的动物园集装箱。</p>
<p>路上打了波WY， 反正就是各种掉分， 各种掉段， 各种掉线。。。</p>
<p>到了济南时间还很早，（好像是走高速的功劳）， 拉着马胖去吃了一波米线（？！） 没错就是在四大火炉-济南，吃了一碗巨烫巨烫的鸡汤米线， 流汗.jpg。</p>
<p>然后李老师又灌了一波鸡汤， 大体是“你们都有光明的未来”之类的。</p>
<p>强行洗波澡疯狂复习唐老师数学题和什么3D计算几何大模板？</p>
<p>听说你是出题人， 你放屁我都信！</p>
<h3 id="day-1">Day 1</h3>
<p>上午8:00准时开考， 题目读了一遍， 没什么会做的， 就先写了三个暴力(5+30+10?)。</p>
<p>发现第三题链的情况似乎比较easy。。 必然是什么分块|线段树云云的， 先放下一会写。</p>
<p>咦， 第一题这个部分分是不是留给我这个大常数垃圾精度FFT选手的啊？ 一会写一波！</p>
<p>咦这个第二题我怎么没什么想法啊， 应该也有可得的部分分吧， 我想想啊！（时间一分一秒地过去， 大概想了2:00？）, 艹， 我怎么走神了， 看来这个题应该弃疗啊！</p>
<p>还有一个小时了啊， 才45分怎么办。 看第三题好像链上部分常数超小？复杂度算出来<span class="math inline">\(10^9\)</span>但全是异或操作可以跑跑看？ 如果能跑过那线段树就只多10分啦， 那我才不想写呢。。（我也不知道哪里出现这么傲娇的想法啊！）</p>
<p>那我就码个T1部分分！ 一波倍增+FFT20分钟写完调完还有15分钟， 测速测精度T1 貌似有60了， 但是T3 貌似常数没那么优越？ 完蛋20分部分分没了。</p>
<p>最后60+30+10=100？ day1rk 9-12? 总排名<span class="math inline">\(10 \rightarrow 9\)</span>, 好吧还是卡着线。</p>
<p>ISA day1rk2 瞬间翻到rk4 ？不愧是双金选手就是吊啊！</p>
<p>下午睡睡 + 2K一波波 + 继续复习数学题+3D计算几何 ？</p>
<p>还看了一波BIG BANG。 难道这就是死亡FLAG ？？</p>
<h3 id="day-2">Day 2</h3>
<p>咦这个T1我会25啊， 我spfa强行一波！咦， 应该用入边记录状态呀， 如果<span class="math inline">\(k\)</span>很小那好多入边的状态不就一样了？ 那我用点和字符串的标号hash一波状态? 能快一点？（简直在扯淡！！）。</p>
<p>咦这个T2好坑啊， 这个方案明明是唯一的样子为什么要字典序最小啊， 我不会证啊， 写个对拍看看？ 好像没反例？ <span class="math inline">\(n^2\)</span>一波！（得到自己唯一的50分）。这怎么还有20分是五边形数啊， 前两天刚写的我怎么想不起来了呢。。完了蛋了。。</p>
<p>这个T3是不是奇怪的后缀家族题啊？ 我YY一波（1.5h passed), 不会啊， hash来个暴力吧， 自然溢出会不会被卡啊？ 好害怕啊， 我再加个mod来个双hash ? (有病！！)</p>
<p>好像25+50+30 ? 应该比较稳？</p>
<p>吃饭的时候莫名其妙的心情不好。。</p>
<p>看榜0+50+0 = 50 ? rk 25?</p>
<p>听说你本来就卡spfa 我又用hash加了一个常数？</p>
<p>听说你标算是自然溢出的单hash所以只要取模全部T ?</p>
<p>听说。。。 总rk 跌到15 没进面试？</p>
<p>大体上就是无比的生气， 真是气死气死了。</p>
<p>我的rk曲线是11 -&gt; 10 -&gt; 9 -&gt; 15 .　最后这场day2可以说毁了我的OI生涯。</p>
<p>算了一下自己是学了9年OI, 虽然7年都是文化课选手， 但是日久情深， 你用暴力还卡常的做法恶心我， 我真是很难过。真的是难过极了， 难过到自己已经接近退役都没察觉了。。</p>
<p>申请了一波cd, 老师说基本没问题， 但感觉d类歧视也挺难受的， c类又巨贵好气。</p>
<p>好好出题卡什么常数啊， 我就老老实实地打个暴力你卡什么啊。</p>
<p>生气， 难受！</p>
<p>9年OI一场空， D2卡常见祖宗！</p>
]]></content>
      
        <categories>
            
            <category> 奇怪向 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 奇怪向 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3307】雨天的尾巴]]></title>
      <url>/bzoj3307/</url>
      <content type="html"><![CDATA[<blockquote>
<p>ATP大爷在做题， 我偷偷地瞥了一眼。</p>
<p>发现自己只会<span class="math inline">\(O(n \log^2 n)\)</span>的愚蠢做法。</p>
<p>问ATP大爷行不行， ATP大爷表示已经有<span class="math inline">\(O(\log n)\)</span>做法， 我的做法太垃圾了。。。</p>
<p>但是我卡了一波常数。就rk3了。。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目大意">题目大意</h1>
<p><span class="math inline">\(n\)</span>个点，形成一个树状结构。有<span class="math inline">\(m\)</span>次发放，每次选择两个点<span class="math inline">\((x,y)\)</span>。</p>
<p>对于<span class="math inline">\(x\)</span>到<span class="math inline">\(y\)</span>的路径上每个点发一袋<span class="math inline">\(z\)</span>类型的物品。完成所有发放后，每个点存放最多的是哪种物品。</p>
<h1 id="解题报告">解题报告</h1>
<p>把每次发放， 用树链剖分转成<span class="math inline">\(\log n\)</span>次序列上的操作， 然后利用扫描线扫描一波。</p>
<p>用线段树维护每个物品在扫描线的当前位置出现次数最多的位置。</p>
<p>因为是单点修改， 全局查询， 所以用一个非递归的线段树就可以了。</p>
<p>而且查询是<span class="math inline">\(O(1)\)</span>的。</p>
<p>复杂度是<span class="math inline">\(O(n \log^2 n + n)\)</span></p>
<p>这个。 跑得不慢。内存比较优秀(<span class="math inline">\(O(n)\)</span>)， 代码长度比较可爱。</p>
<p>但是网上好像都是线段树合并啊。。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x.size())</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100100</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ii;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> v[N], a[N], mx[N&lt;&lt;<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> vc[N], vn;</div><div class="line"><span class="keyword">int</span> hd[N], nx[N&lt;&lt;<span class="number">1</span>], ri[N&lt;&lt;<span class="number">1</span>], al;</div><div class="line"><span class="keyword">int</span> fa[N], de[N], sn[N], sz[N];</div><div class="line"><span class="keyword">int</span> bl[N], dn[N], bd[N], ss;</div><div class="line"><span class="built_in">vector</span>&lt;ii&gt; ad[N];</div><div class="line"><span class="keyword">int</span> n, m, _;</div><div class="line"> </div><div class="line"><span class="keyword">char</span> *cp=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">32747</span>), *os=cp, *ot=cp;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> getc() (os==ot&amp;&amp;(ot=(os=cp)+fread(cp,1,32747,stdin),os==ot)?0:*os++)</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> c=getc(); <span class="keyword">int</span> f=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (;c &lt;<span class="string">'0'</span> ||c &gt;<span class="string">'9'</span>; c=getc()) f=(c==<span class="string">'-'</span>?<span class="number">-1</span>:f);</div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>; c &gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>; c=getc()) x=x*<span class="number">10</span>+c<span class="number">-48</span>;</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> add(x, y) nx[++al]=hd[x],ri[al]=y,hd[x]=al</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> up(o) mx[o]=(a[mx[o<span class="meta-string">&lt;&lt;1|1]]&gt;a[mx[o&lt;&lt;1]]?mx[o&lt;&lt;1|1]:mx[o&lt;&lt;1])</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;</div><div class="line">    de[x] = de[fa[x]] + <span class="number">1</span>;</div><div class="line">    sz[x] = <span class="number">1</span>, sn[x] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=hd[x];i;i=nx[i])</div><div class="line">        <span class="keyword">if</span> (y=ri[i], y!=fa[x]) &#123;</div><div class="line">            fa[y] = x, dfs(y);</div><div class="line">            sz[x] = sz[x] + sz[y];</div><div class="line">            <span class="keyword">if</span> (sz[y] &gt; sz[sn[x]])</div><div class="line">                sn[x] = y;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span> </span>&#123;</div><div class="line">    bl[x] = tp, dn[x] = ++ss, bd[ss] = x;</div><div class="line">    <span class="keyword">if</span> (sn[x]) &#123;</div><div class="line">        dfs(sn[x], tp);</div><div class="line">        <span class="keyword">int</span> y;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=hd[x];i;i=nx[i])</div><div class="line">            <span class="keyword">if</span> (y=ri[i], y!=fa[x] &amp;&amp; y!=sn[x])</div><div class="line">                dfs(y, y);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> fx = bl[x], fy = bl[y];</div><div class="line">    <span class="keyword">int</span> v = vn<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (fx != fy) &#123;</div><div class="line">        <span class="keyword">if</span> (de[fx] &lt; de[fy]) </div><div class="line">            swap(fx, fy), swap(x, y);</div><div class="line">        ad[dn[fx]].pb(mp(v,<span class="number">1</span>));</div><div class="line">        ad[dn[x]+<span class="number">1</span>].pb(mp(v,<span class="number">-1</span>));</div><div class="line">        x = fa[fx], fx = bl[x];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (de[x] &gt; de[y]) swap(x,y);</div><div class="line">    ad[dn[x]].pb(mp(v,<span class="number">1</span>));</div><div class="line">    ad[dn[y]+<span class="number">1</span>].pb(mp(v,<span class="number">-1</span>));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x) print(x/<span class="number">10</span>), <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!x) <span class="built_in">puts</span>(<span class="string">"0"</span>);</div><div class="line">    <span class="keyword">else</span> print(x), <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    in(n), in(m);</div><div class="line">    <span class="keyword">int</span> x, y, z;</div><div class="line">    xep(i, n<span class="number">-1</span>) &#123;</div><div class="line">        in(x), in(y);</div><div class="line">        add(x,y), add(y,x);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    dfs(<span class="number">1</span>), dfs(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    xep(i, m) &#123;</div><div class="line">        in(x), in(y), in(z);</div><div class="line">        v[vn++] = z;</div><div class="line">        vc[vn<span class="number">-1</span>] = z;</div><div class="line">        ins(x, y);</div><div class="line">    &#125;</div><div class="line">    sort(vc, vc+vn);</div><div class="line">    vn = unique(vc,vc+vn)-vc;</div><div class="line">    xep(i, m) v[i] = lower_bound(vc, vc+vn, v[i])-vc;   </div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (_ = <span class="number">1</span>; _&lt;vn; _=_&lt;&lt;<span class="number">1</span>);</div><div class="line">    rep(i, _, _*<span class="number">2</span><span class="number">-1</span>) mx[i] = i-_;</div><div class="line">    vep(i, _<span class="number">-1</span>, <span class="number">1</span>) up(i);</div><div class="line"> </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> as[N];</div><div class="line"> </div><div class="line">    rep(i, <span class="number">1</span>, n) &#123;</div><div class="line">        xep(j, sz(ad[i])) &#123;</div><div class="line">            x = ad[i][j].fi, z = ad[i][j].se;</div><div class="line">            x = v[x], a[x] = a[x] + z;</div><div class="line">            y = _+x;</div><div class="line">            <span class="keyword">for</span> (y&gt;&gt;=<span class="number">1</span>; y; y&gt;&gt;=<span class="number">1</span>) up(y);</div><div class="line">        &#125;</div><div class="line">        as[bd[i]] = (a[mx[<span class="number">1</span>]]?vc[mx[<span class="number">1</span>]]:<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    rep(i, <span class="number">1</span>, n) out(as[i]); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4451】[Cerc2015]Frightful Formula]]></title>
      <url>/bzoj4451/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我非常智障的化了一部式子然后直接FFT.</p>
<p>但是因为模数是1000003, 这个模数有点大， 用double的精度显然不是很靠谱。</p>
<p>所以有需要使用什么任意模数FFT.</p>
<p>然后我折腾半天好不容易A了， 发现这个题可以递推做。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4451" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p><span class="math inline">\(f[i,j]=a*f[i,j-1]+b*f[i-1,j]+c\)</span></p>
<p>给出<span class="math inline">\(f[1,i]\)</span> 和<span class="math inline">\(f[i,1]\)</span> , 求<span class="math inline">\(f[n,n] (\mod 1000003)\)</span></p>
<h1 id="解题报告">解题报告</h1>
<p>贡献分3部分：</p>
<ol style="list-style-type: decimal">
<li><p><span class="math inline">\((i, 1)\)</span> 的贡献为<span class="math inline">\(f[i,1]C(2n-i-2,n-i)a^{n-1}b^{n-i}\)</span> ;</p></li>
<li><p><span class="math inline">\((1,i)\)</span>的贡献为<span class="math inline">\(f[1,i]C(2n-i-2,n-i)*a^{n-i}b^{n-1}\)</span>;</p></li>
<li><p><span class="math inline">\((i, j)\)</span>的<span class="math inline">\(c\)</span>的贡献为</p></li>
</ol>
<p>​</p>
<p><span class="math display">\[
\begin{eqnarray*} &amp;&amp;c\sum_{i=2}^n\sum_{j=2}^nC(2n-i-j,n-i)a^{n-j}b^{n-i}\\ &amp;=&amp;c\sum_{i=2}^n\sum_{j=2}^n(2n-i-j)!\times\frac{a^{n-j}}{(n-j)!}\times\frac{b^{n-i}}{(n-i)!} \end{eqnarray*}
\]</span></p>
<p>然后直接FFT？ 把系数写成<span class="math inline">\(aM+b\)</span>的形式，然后做好几次<span class="math inline">\(FFT\)</span>合并起来就不会炸精度了。</p>
<p><a href="http://blog.csdn.net/geotcbrl/article/details/53022967" target="_blank" rel="external">递推做法在这里</a></p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i)</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200100</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">1000003</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1000</span>; </div><div class="line"><span class="keyword">const</span> ff pi=<span class="built_in">acos</span>(<span class="number">-1</span>); </div><div class="line"><span class="keyword">int</span> n,_n,a,b,c,fc[N+N],rv[N+N],h[N],l[N],as,ma[N],mb[N],rr[N*<span class="number">4</span>]; </div><div class="line"><span class="keyword">int</span> A[N*<span class="number">3</span>],B[N*<span class="number">3</span>],C[N*<span class="number">3</span>],a0[N*<span class="number">3</span>],b0[N*<span class="number">3</span>],a1[N*<span class="number">3</span>],b1[N*<span class="number">3</span>];  </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (;c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>?<span class="number">-1</span>:f); </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>;c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>;</div><div class="line">    x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fast</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k,<span class="keyword">int</span> md=p)</span> </span>&#123; </div><div class="line">    <span class="keyword">int</span> as=<span class="number">1</span>; <span class="keyword">for</span> (; k; k&gt;&gt;=<span class="number">1</span>, x=(ll)x*x%md)</div><div class="line">        <span class="keyword">if</span> (k&amp;<span class="number">1</span>) as=(ll) as*x%md; <span class="keyword">return</span> as; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; x+=y; <span class="keyword">if</span>(x&gt;=p) x-=p; <span class="keyword">if</span> (x&lt;<span class="number">0</span>) x+=p; <span class="keyword">return</span> x;&#125; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmx</span> &#123;</span> </div><div class="line">    ff r, i; cmx(ff r=<span class="number">0</span>, ff i=<span class="number">0</span>) </div><div class="line">        : r(r), i(i) &#123;&#125;</div><div class="line">    cmx <span class="keyword">operator</span> + (<span class="keyword">const</span> cmx &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> cmx(r+b.r, i+b.i); &#125; </div><div class="line">    cmx <span class="keyword">operator</span> - (<span class="keyword">const</span> cmx &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> cmx(r-b.r, i-b.i); &#125; </div><div class="line">    cmx <span class="keyword">operator</span> * (<span class="keyword">const</span> cmx &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> cmx(r*b.r-i*b.i,r*b.i+i*b.r); &#125; </div><div class="line">&#125; aa[N*<span class="number">3</span>],bb[N*<span class="number">3</span>]; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(cmx *a, <span class="keyword">int</span> f)</span> </span>&#123; </div><div class="line">    xep(i,_n) <span class="keyword">if</span> (rr[i]&gt;i) swap(a[i],a[rr[i]]); </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> m=<span class="number">1</span>; m&lt;_n; m&lt;&lt;=<span class="number">1</span>) &#123; </div><div class="line">        cmx wn=cmx(<span class="built_in">cos</span>(pi/m), f*<span class="built_in">sin</span>(pi/m)); </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;_n; i+=m&lt;&lt;<span class="number">1</span>) &#123; </div><div class="line">            cmx w=cmx(<span class="number">1</span>,<span class="number">0</span>); </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; ++j) &#123; </div><div class="line">                cmx x=a[i+j], y=w*a[i+j+m]; </div><div class="line">                a[i+j]=x+y, a[i+j+m]=x-y; </div><div class="line">                w=w*wn; </div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">if</span> (f==<span class="number">-1</span>) xep(i,_n) a[i].r/=_n; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b,<span class="keyword">int</span> *c)</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(aa,<span class="number">0</span>,<span class="keyword">sizeof</span>(aa)); <span class="built_in">memset</span>(bb, <span class="number">0</span>, <span class="keyword">sizeof</span>(bb)); </div><div class="line">    xep(i,_n) aa[i]=cmx(a[i],<span class="number">0</span>), bb[i]=cmx(b[i],<span class="number">0</span>); </div><div class="line">    fft(aa,<span class="number">1</span>), fft(bb,<span class="number">1</span>); xep(i,_n) aa[i]=aa[i]*bb[i]; </div><div class="line">    fft(aa,<span class="number">-1</span>); xep(i,_n) c[i]=(ll)(aa[i].r+<span class="number">0.5</span>)%p; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT_casual</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b,<span class="keyword">int</span> *c)</span> </span>&#123; </div><div class="line">    xep(i,_n) a0[i]=a[i]/M, b0[i]=b[i]/M; <span class="keyword">int</span> i; </div><div class="line">    <span class="keyword">for</span> (mul(a0,b0,a0), i=<span class="number">0</span>; i&lt;_n; ++i) &#123; </div><div class="line">        c[i]=<span class="number">1l</span>l*a0[i]*M%p*M%p; </div><div class="line">        a1[i]=a[i]%M, b1[i]=b[i]%M; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">for</span> (mul(a1,b1,a1), i=<span class="number">0</span>; i&lt;_n; ++i) &#123; </div><div class="line">        c[i]=(a1[i]+c[i])%p, a0[i]=(a0[i]+a1[i])%p; </div><div class="line">        a1[i]=a[i]/M+a[i]%M, b1[i]=b[i]/M+b[i]%M; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">for</span> (mul(a1,b1,a1), i=<span class="number">0</span>; i&lt;_n;++i) </div><div class="line">        c[i]=(<span class="number">1l</span>l*M*(a1[i]-a0[i]+p)%p+c[i])%p; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </div><div class="line">    in(n),in(a),in(b),in(c); </div><div class="line">    rep(i,<span class="number">1</span>,n) in(l[i]); rep(i,<span class="number">1</span>,n) in(h[i]); </div><div class="line">    fc[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,n+n) fc[i]=(ll)fc[i<span class="number">-1</span>]*i%p; </div><div class="line">    rv[n+n]=fast(fc[n+n],p<span class="number">-2</span>); vep(i,n+n<span class="number">-1</span>,<span class="number">0</span>) rv[i]=(ll)rv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%p; </div><div class="line">    ma[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,n) ma[i]=(ll)ma[i<span class="number">-1</span>]*a%p; </div><div class="line">    mb[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,n) mb[i]=(ll)mb[i<span class="number">-1</span>]*b%p; </div><div class="line">    rep(i,<span class="number">2</span>,n) as=mo(as,(ll)h[i]*ma[n-i]%p*mb[n<span class="number">-1</span>]%p*fc[n-i+n<span class="number">-2</span>]%p*rv[n<span class="number">-2</span>]%p*rv[n-i]%p); </div><div class="line">    rep(i,<span class="number">2</span>,n) as=mo(as,(ll)l[i]*ma[n<span class="number">-1</span>]%p*mb[n-i]%p*fc[n-i+n<span class="number">-2</span>]%p*rv[n<span class="number">-2</span>]%p*rv[n-i]%p); </div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="keyword">for</span> (_n=<span class="number">1</span>; _n&lt;=n; _n&lt;&lt;=<span class="number">1</span>) ; _n&lt;&lt;=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;_n; ++i) &#123; </div><div class="line">        rr[i]=j; <span class="keyword">for</span> (<span class="keyword">int</span> k=_n&gt;&gt;<span class="number">1</span>; (j^=k)&lt;k;k&gt;&gt;=<span class="number">1</span>); </div><div class="line">    &#125;</div><div class="line">    xep(i,n<span class="number">-1</span>) &#123;</div><div class="line">        A[i]=(ll)ma[i]*rv[i]%p;</div><div class="line">        B[i]=(ll)mb[i]*rv[i]%p; </div><div class="line">    &#125; </div><div class="line">    FFT_casual(A,B,C);</div><div class="line">    xep(i, n+n<span class="number">-3</span>) as=mo(as, (ll)C[i]%p*c%p*fc[i]%p);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, as), <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 递推 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4452】[Cerc2015]Export Estimate]]></title>
      <url>/bzoj4452/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个很不错的题？ 反正我是做得非常蛋疼。</p>
<p>似乎算法和解法都不是很难， 但是性质观察起来有一点困难。</p>
<p>其实最恶心的是， 看出一个性质， 以为是一种特殊情况不敢做。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4452" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>给你一个<span class="math inline">\(n\)</span>个点<span class="math inline">\(m\)</span>条边的无向图，每条边有权值，我们可以选择一个整数lim来生成一个新的图，过程如下：</p>
<ol style="list-style-type: decimal">
<li>先将原图中边权小于lim的边删掉</li>
<li>依次从1到n枚举每个点</li>
<li>如果这个点没有边于它相连，这个点将会被删去</li>
<li>如果这个点只与两条不相同的边x，y相连，设这两条边的另一个点分别为a，b，如果a，b和这个点都不相同（a，b可以相同），则依次做如下操作：
<ol style="list-style-type: decimal">
<li>删去边x，y</li>
<li>删去这个点</li>
<li>在a，b之间建立一条新的边</li>
</ol></li>
</ol>
<h1 id="解题报告">解题报告</h1>
<p>考虑离线， 依次把边权从大到小执行操作。</p>
<p>几个性质：</p>
<ol style="list-style-type: decimal">
<li>被删除的点只会是度数为0， 2的点。</li>
<li>度数为2的点， 如果是一个环内的最后一个点， 那么不会被删除。</li>
<li>删除一个点， 不会改变其他点的度数。</li>
</ol>
<p>然后就需要记录度数为<span class="math inline">\(0\)</span>的点的个数<span class="math inline">\(S_0\)</span>, 度数为<span class="math inline">\(2\)</span>的点的个数<span class="math inline">\(S_2\)</span>, 和环的个数<span class="math inline">\(S_{cycle}\)</span>.</p>
<p>然后就可以得到剩余的点和边的个数。</p>
<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt; </div><div class="line">#include &lt;algorithm&gt; </div><div class="line">#include &lt;cstdio&gt; </div><div class="line">#include &lt;cstring&gt; </div><div class="line">#include &lt;cstdlib&gt; </div><div class="line"> </div><div class="line">using namespace std; </div><div class="line"> </div><div class="line">#define rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </div><div class="line">#define vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </div><div class="line">#define xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </div><div class="line"> </div><div class="line">const int N=300100; </div><div class="line"> </div><div class="line">int s0, s2, sc; </div><div class="line">int f[N],du[N],tw[N],sz[N]; </div><div class="line">int n,m,q;</div><div class="line">int a[N],b[N],c[N],k[N]; </div><div class="line">int od[N],oq[N],as1[N],as2[N]; </div><div class="line"> </div><div class="line">inline void in(int &amp;x) &#123; </div><div class="line">    char c=getchar(); int f=1; </div><div class="line">    for (;c&lt;'0'||c&gt;'9';c=getchar()) f=(c=='-'?-1:f); </div><div class="line">    for (x=0; c&gt;='0'&amp;&amp;c&lt;='9';c=getchar()) x=x*10+c-48;</div><div class="line">    x*=f; </div><div class="line">&#125; </div><div class="line">inline bool cmpd(int x, int y) &#123; return c[x]&gt;c[y]; &#125; </div><div class="line">inline bool cmpq(int x, int y) &#123; return k[x]&gt;k[y]; &#125; </div><div class="line"> </div><div class="line">int find(int x) &#123; return (f[x]==x?x:(f[x]=find(f[x]))); &#125; </div><div class="line"> </div><div class="line">inline void come(int id) &#123; </div><div class="line">    int x(a[id]), y(b[id]), v(c[id]); </div><div class="line">    int fx=find(x), fy=find(y); </div><div class="line">    if (tw[fx]==sz[fx]) --sc; </div><div class="line">    if (fy!=fx&amp;&amp;tw[fy]==sz[fy]) --sc; </div><div class="line">    if (du[x]==0) --s0; if (du[y]==0) --s0; </div><div class="line">    if (du[x]==1) ++s2,++tw[fx]; if (du[y]==1) ++s2,++tw[fy]; </div><div class="line">    if (du[x]==2) --s2,--tw[fx]; if (du[y]==2) --s2,--tw[fy]; </div><div class="line">    ++du[x], ++du[y]; </div><div class="line">    if (fx!=fy) f[fx]=fy, sz[fy]+=sz[fx], tw[fy]+=tw[fx]; </div><div class="line">    if (tw[fy]==sz[fy]) ++sc; </div><div class="line">&#125; </div><div class="line">int main() &#123; </div><div class="line">    in(n),in(m);</div><div class="line">    rep(i,1,m) in(a[i]),in(b[i]),in(c[i]),od[i]=i; </div><div class="line">    in(q); rep(i,1,q) in(k[i]),oq[i]=i; </div><div class="line">    sort(od+1,od+1+m, cmpd); </div><div class="line">    sort(oq+1,oq+1+q, cmpq); </div><div class="line">    rep(i,1,n) f[i]=i,du[i]=0,tw[i]=0,sz[i]=1; </div><div class="line">    s0=n, s2=0, sc=0; </div><div class="line">     </div><div class="line">    int i=1, j=1; </div><div class="line">    for (; i&lt;=q; ++i) &#123; </div><div class="line">        while (j&lt;=m&amp;&amp;c[od[j]]&gt;=k[oq[i]]) </div><div class="line">            come(od[j]), ++j; </div><div class="line">        as1[oq[i]]=n-s0-s2+sc; </div><div class="line">        as2[oq[i]]=j-1-s2+sc; </div><div class="line">    &#125; </div><div class="line">    rep(i,1,q) printf("%d %d\n", as1[i],as2[i]);</div><div class="line">    return 0; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4774】修路]]></title>
      <url>/bzoj4774/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这个好像就是板子题的样子。</p>
<p>但又没有板子的那么过分， 还有一点子集dp的小trick ?</p>
<p>好吧， 它就是个板子题。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4774" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>联通<span class="math inline">\((i, n-i+1)\)</span>(<span class="math inline">\(1 \leqslant i \leqslant d\)</span>) , 的最小花费。</p>
<h1 id="解题报告">解题报告</h1>
<p>利用斯坦纳树的套路， 令<span class="math inline">\(F[S]\)</span>表示联通状态为<span class="math inline">\(S\)</span>的最小花费。</p>
<p><span class="math inline">\(S\)</span>需要记录的就是<span class="math inline">\(2*d\)</span>个点的联通情况。</p>
<p>然后做一个子集<span class="math inline">\(dp\)</span> ， 因为题目中只是要求<span class="math inline">\((i,n-i+1)\)</span>这样成对的两个点联通。</p>
<p>几对点之间可以不连通。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10100</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs=<span class="number">310</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> nx,to,v; edge(<span class="keyword">int</span> nx=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,<span class="keyword">int</span> v=<span class="number">0</span>)</div><div class="line">        :nx(nx),to(to),v(v)&#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> hd[N], tot; </div><div class="line"><span class="keyword">int</span> n, m, d, D;</div><div class="line"><span class="keyword">int</span> f[N][maxs], g[maxs]; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (;c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>?<span class="number">-1</span>:f); </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>; c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>; </div><div class="line">    x*=f;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>&#123; </div><div class="line">    e[++tot]=edge(hd[x],y,v); hd[x]=tot; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> S)</span> </span>&#123; </div><div class="line">    rep(i,<span class="number">1</span>,d) <span class="keyword">if</span> (((S&gt;&gt;(i<span class="number">-1</span>))&amp;<span class="number">1</span>)^((S&gt;&gt;(D-i))&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmn</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&lt;x?a:x); &#125;</div><div class="line"><span class="keyword">bool</span> vs[N]; <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> S)</span> </span>&#123; </div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123; </div><div class="line">        <span class="keyword">int</span> x=q.front(); q.pop(); vs[x]=<span class="number">0</span>; <span class="keyword">int</span> y; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=hd[x];i;i=e[i].nx) </div><div class="line">            <span class="keyword">if</span> (y=e[i].to, f[x][S]+e[i].v&lt;f[y][S]) &#123; </div><div class="line">                f[y][S]=f[x][S]+e[i].v; </div><div class="line">                <span class="keyword">if</span> (!vs[y]) q.push(y), vs[y]=<span class="number">1</span>; </div><div class="line">            &#125; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    in(n),in(m),in(d), D=d+d; <span class="keyword">int</span> u,v,w; </div><div class="line">    xep(i,m) in(u),in(v),in(w), add(u,v,w), add(v,u,w); </div><div class="line">    <span class="built_in">memset</span>(f,<span class="number">127</span>/<span class="number">3</span>, <span class="keyword">sizeof</span>(f)); </div><div class="line">    <span class="built_in">memset</span>(g,<span class="number">127</span>/<span class="number">3</span>, <span class="keyword">sizeof</span>(g)); </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=d; ++i) f[i][<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>]=f[n-i+<span class="number">1</span>][<span class="number">1</span>&lt;&lt;D-i]=<span class="number">0</span>; </div><div class="line">    xep(S, <span class="number">1</span>&lt;&lt;D) &#123; </div><div class="line">        rep(x, <span class="number">1</span>, n) &#123; </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> sub=S; sub; sub=(sub<span class="number">-1</span>)&amp;S) </div><div class="line">                cmn(f[x][S], f[x][sub]+f[x][S^sub]); </div><div class="line">            <span class="keyword">if</span> (f[x][S]&lt;f[<span class="number">0</span>][<span class="number">0</span>]) q.push(x); </div><div class="line">        &#125; </div><div class="line">        spfa(S); </div><div class="line">    &#125; </div><div class="line">    xep(S, <span class="number">1</span>&lt;&lt;D) <span class="keyword">if</span> (chk(S)) rep(i,<span class="number">1</span>,n) cmn(g[S], f[i][S]); </div><div class="line">    xep(S, <span class="number">1</span>&lt;&lt;D) <span class="keyword">for</span> (<span class="keyword">int</span> sub=S; sub; sub=(sub<span class="number">-1</span>)&amp;S) </div><div class="line">        cmn(g[S], g[sub]+g[S^sub]); </div><div class="line">    <span class="keyword">if</span> (g[(<span class="number">1</span>&lt;&lt;D)<span class="number">-1</span>]&gt;=f[<span class="number">0</span>][<span class="number">0</span>]) <span class="built_in">puts</span>(<span class="string">"-1"</span>); </div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, g[(<span class="number">1</span>&lt;&lt;D)<span class="number">-1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
            <tag> 斯坦纳树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 2508】简单题]]></title>
      <url>/bzoj2508/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这个题是拉格朗日数乘法的裸题。</p>
<p>我做PE的时候了解到的这种方法， 据说是高考几大艹标算大法之一？</p>
<p>看来我这个高考狗就是和这种奇技淫巧有缘分啊。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2508" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>实现以下3种操作：</p>
<ol style="list-style-type: decimal">
<li><p>平面上加入一条直线；</p></li>
<li><p>删除一条已加入的直线；</p></li>
<li><pre><code> 求一个点到平面上所有直线距离平方和最小，你需要输出这个最小值。</code></pre></li>
</ol>
<h1 id="解题报告">解题报告</h1>
<p>一个点<span class="math inline">\((x_0, y_0)\)</span>到直线<span class="math inline">\(Ax+By+C = 0\)</span>的距离平方公式是 <span class="math display">\[
\frac{(Ax_0+By_0+C)^2}{A^2+B^2}
\]</span> 然后就可以把距离平方和表示成<span class="math inline">\(ax^2+by^2+cxy+dx+ey+f\)</span>的鬼畜样子。</p>
<p>然后对<span class="math inline">\(x, y\)</span>分别求一发偏导， 令两个式子都等于零。</p>
<p>就把<span class="math inline">\(x, y\)</span>算出来了。</p>
<p>各种操作复杂度都是<span class="math inline">\(O(1)\)</span>的。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">      </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff;</div><div class="line">      </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span>  N=<span class="number">120010</span>;</div><div class="line">ff a[N],b[N],c[N],A,B,C,D,E,F;</div><div class="line">     </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(ff x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;<span class="number">1e-6</span>)<span class="built_in">puts</span>(<span class="string">"0.00"</span>);<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,<span class="built_in">fabs</span>(x));</div><div class="line">&#125;</div><div class="line"> </div><div class="line">ff f[<span class="number">3</span>][<span class="number">4</span>],ansx,ansy;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i,j,k;ff t;<span class="keyword">int</span> n=<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(f[<span class="number">1</span>][<span class="number">1</span>])&lt;<span class="number">1e-6</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(f[<span class="number">1</span>][<span class="number">2</span>])&lt;<span class="number">1e-6</span>)ansx=<span class="number">0</span>,ansy=f[<span class="number">2</span>][<span class="number">3</span>]/f[<span class="number">2</span>][<span class="number">2</span>];</div><div class="line">        <span class="keyword">else</span> ansy=f[<span class="number">1</span>][<span class="number">3</span>]/f[<span class="number">1</span>][<span class="number">2</span>],ansx=(f[<span class="number">2</span>][<span class="number">3</span>]-f[<span class="number">2</span>][<span class="number">2</span>]*ansy)/f[<span class="number">2</span>][<span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(f[<span class="number">2</span>][<span class="number">2</span>])&lt;<span class="number">1e-6</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(f[<span class="number">2</span>][<span class="number">1</span>])&lt;<span class="number">1e-6</span>)ansx=f[<span class="number">1</span>][<span class="number">3</span>]/f[<span class="number">1</span>][<span class="number">1</span>],ansy=<span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> ansx=f[<span class="number">2</span>][<span class="number">3</span>]/f[<span class="number">2</span>][<span class="number">1</span>],ansy=(f[<span class="number">1</span>][<span class="number">3</span>]-f[<span class="number">1</span>][<span class="number">1</span>]*ansx)/f[<span class="number">1</span>][<span class="number">2</span>];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    t=-f[<span class="number">2</span>][<span class="number">1</span>]/f[<span class="number">1</span>][<span class="number">1</span>];f[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">0</span>,f[<span class="number">2</span>][<span class="number">2</span>]+=t*f[<span class="number">1</span>][<span class="number">2</span>],f[<span class="number">2</span>][<span class="number">3</span>]+=t*f[<span class="number">1</span>][<span class="number">3</span>];</div><div class="line">    f[<span class="number">2</span>][<span class="number">3</span>]=(<span class="built_in">fabs</span>(f[<span class="number">2</span>][<span class="number">2</span>])&lt;<span class="number">1e-6</span>)?<span class="number">0</span>:f[<span class="number">2</span>][<span class="number">3</span>]/f[<span class="number">2</span>][<span class="number">2</span>],f[<span class="number">1</span>][<span class="number">3</span>]-=f[<span class="number">1</span>][<span class="number">2</span>]*f[<span class="number">2</span>][<span class="number">3</span>],f[<span class="number">1</span>][<span class="number">3</span>]/=f[<span class="number">1</span>][<span class="number">1</span>];</div><div class="line">    ansx=f[<span class="number">1</span>][<span class="number">3</span>],ansy=f[<span class="number">2</span>][<span class="number">3</span>];</div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ff x0,y0,x1,y1,t; <span class="keyword">int</span> num=<span class="number">0</span>,cnt,now=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> q,tp,del; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</div><div class="line">    <span class="keyword">while</span>(q--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tp);</div><div class="line">        <span class="keyword">if</span>(tp==<span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;x0,&amp;y0,&amp;x1,&amp;y1); </div><div class="line">            cnt=++num; ++now;</div><div class="line">            a[cnt]=y0-y1,b[cnt]=x1-x0,c[cnt]=y0*(x0-x1)-x0*(y0-y1);</div><div class="line">            t=a[cnt]*a[cnt]+b[cnt]*b[cnt];</div><div class="line">            A+=a[cnt]*a[cnt]/t,B+=b[cnt]*b[cnt]/t;C+=<span class="number">2</span>*a[cnt]*b[cnt]/t;</div><div class="line">            D+=<span class="number">2</span>*a[cnt]*c[cnt]/t,E+=<span class="number">2</span>*b[cnt]*c[cnt]/t,F+=c[cnt]*c[cnt]/t;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tp==<span class="number">1</span>) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;del);</div><div class="line">            cnt=del,t=a[cnt]*a[cnt]+b[cnt]*b[cnt],--now;</div><div class="line">            A-=a[cnt]*a[cnt]/t,B-=b[cnt]*b[cnt]/t,C-=<span class="number">2</span>*a[cnt]*b[cnt]/t;</div><div class="line">            D-=<span class="number">2</span>*a[cnt]*c[cnt]/t,E-=<span class="number">2</span>*b[cnt]*c[cnt]/t,F-=c[cnt]*c[cnt]/t;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(now==<span class="number">0</span>) &#123;<span class="built_in">puts</span>(<span class="string">"0.00"</span>);<span class="keyword">continue</span>;&#125;</div><div class="line">            f[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">2</span>*A,f[<span class="number">1</span>][<span class="number">2</span>]=C,f[<span class="number">1</span>][<span class="number">3</span>]=-D,f[<span class="number">2</span>][<span class="number">1</span>]=C,f[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">2</span>*B,f[<span class="number">2</span>][<span class="number">3</span>]=-E;</div><div class="line">            solve();</div><div class="line">            print(A*ansx*ansx+B*ansy*ansy+C*ansx*ansy+D*ansx+E*ansy+F);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 拉格朗日数乘法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4433】[Cerc2015]Hovering Hornet]]></title>
      <url>/bzoj4433/</url>
      <content type="html"><![CDATA[<blockquote>
<p>做了一波ACM比赛中的题， 感觉计算几何真是奇(luan)妙(tao)无(mu)穷(ban).</p>
<p>这个题是？ 挂着期望外衣的计算几何(模板题？)</p>
<p>反正计算几何就是模板在手， 天下我有。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4433" target="_blank" rel="external">传送门</a></p>
<blockquote>
<p>题目大意各位自己去看吧。</p>
</blockquote>
<h1 id="解题报告">解题报告</h1>
<p>乱套一波切割多边形(半平面交？) + 多边形面积的模板， 就过了！</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> ff eps=<span class="number">1e-7</span>; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span> </div><div class="line">    ff x, y; point (ff x=<span class="number">0</span>, ff y=<span class="number">0</span>) :x(x),y(y) &#123;&#125; </div><div class="line">    point <span class="keyword">operator</span> + (<span class="keyword">const</span> point &amp;a) &#123; <span class="keyword">return</span> point(x+a.x, y+a.y);&#125; </div><div class="line">    point <span class="keyword">operator</span> - (<span class="keyword">const</span> point &amp;a) &#123; <span class="keyword">return</span> point(x-a.x, y-a.y);&#125;</div><div class="line">    ff <span class="keyword">operator</span> *(<span class="keyword">const</span> point &amp;a) &#123; <span class="keyword">return</span> x*a.y-y*a.x; &#125; </div><div class="line">    ff <span class="keyword">operator</span> ^(<span class="keyword">const</span> point &amp;a) &#123; <span class="keyword">return</span> x*a.x+y*a.y; &#125; </div><div class="line">    point <span class="keyword">operator</span> *(<span class="keyword">const</span> ff &amp;a) &#123; <span class="keyword">return</span> point(x*a, y*a);&#125; </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123; <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x,&amp;y);&#125; </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">' '</span>&lt;&lt;y; &#125; </div><div class="line">    <span class="function">ff <span class="title">len</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y); &#125; </div><div class="line">&#125; ; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span> &#123;</span> </div><div class="line">    point s, w; line()&#123;&#125;</div><div class="line">    line (point s, point t) :s(s), w(t-s) &#123;&#125;</div><div class="line">&#125; ; </div><div class="line"><span class="function"><span class="keyword">inline</span> ff <span class="title">dists</span><span class="params">(point p, point a, point b)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(b.x-a.x)&lt;eps&amp;&amp;<span class="built_in">abs</span>(b.y-a.y)&lt;eps) <span class="keyword">return</span> (p-a).len(); </div><div class="line">    point v1=b-a, v2=p-a, v3=p-b; </div><div class="line">    <span class="keyword">if</span> ((v1^v2)&lt;eps) <span class="keyword">return</span> v2.len(); </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((v1^v3)&gt;-eps) <span class="keyword">return</span> v3.len(); </div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">abs</span>(v1*v2)/v1.len(); </div><div class="line">&#125; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span> &#123;</span> </div><div class="line">    point p[<span class="number">10</span>]; <span class="keyword">int</span> n; </div><div class="line">    poly() &#123; n=<span class="number">0</span>; <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p)); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(point &amp;v)</span> </span>&#123; p[++n]=v; &#125; </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(point P)</span> </span>&#123; </div><div class="line">        ff x=P.x, y=P.y; <span class="keyword">bool</span> wn=<span class="number">0</span>; ff k, d1, d2; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n; ++i) &#123; </div><div class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(dists(P,p[i],p[i+<span class="number">1</span>]))&lt;=eps) <span class="keyword">return</span> <span class="number">1</span> ;</div><div class="line">            k=(p[i+<span class="number">1</span>]-p[i])*(P-p[i]); </div><div class="line">            d1=p[i].y-P.y, d2=p[i+<span class="number">1</span>].y-P.y; </div><div class="line">            <span class="keyword">if</span> (k&gt;eps&amp;&amp;d1&lt;=eps&amp;&amp;d2&gt;eps) wn^=<span class="number">1</span>; </div><div class="line">            <span class="keyword">if</span> (k&lt;-eps&amp;&amp;d1&gt;eps&amp;&amp;d2&lt;=eps) wn^=<span class="number">1</span>; </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">return</span> wn; </div><div class="line">    &#125;</div><div class="line">&#125; po; </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Ins</span><span class="params">(point a, point b, point c, point d)</span> </span>&#123; </div><div class="line">    point u=b-a, v=d-c, t1, t2; </div><div class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(u*v)&lt;eps) <span class="keyword">return</span> <span class="literal">false</span>; </div><div class="line">    t1=c-a, t2=d-a; <span class="keyword">return</span> (u*t1)*(u*t2)&lt;-eps; </div><div class="line">&#125; </div><div class="line"><span class="function">point <span class="title">GLI</span><span class="params">(point p, point u, point q, point v)</span> </span>&#123; </div><div class="line">    point w=p-q; ff t = (v*w)/(u*v);</div><div class="line">    <span class="keyword">return</span> p+u*t; </div><div class="line">&#125; </div><div class="line"><span class="function">poly <span class="title">cutpolygon</span><span class="params">(poly p, point a, point b)</span> </span>&#123; </div><div class="line">    point c, d, ip; poly np=poly(); </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=p.n; ++i) &#123; </div><div class="line">        c=p.p[i], d=p.p[i+<span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> ((b-a)*(c-a)&gt;-eps) np.add(c); </div><div class="line">        <span class="keyword">if</span> (Ins(a,b,c,d)) ip=GLI(a,b-a,c,d-c),np.add(ip);</div><div class="line">    &#125; </div><div class="line">    np.p[np.n+<span class="number">1</span>]=np.p[<span class="number">1</span>]; </div><div class="line">    <span class="keyword">return</span> np; </div><div class="line">&#125;   </div><div class="line"><span class="function">ff <span class="title">area</span><span class="params">(poly p)</span> </span>&#123; </div><div class="line">    ff as=<span class="number">0</span>; rep(i,<span class="number">1</span>,p.n) as+=p.p[i]*p.p[i+<span class="number">1</span>]/(ff)<span class="number">2</span>; </div><div class="line">    <span class="keyword">return</span> as; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    point a; xep(i,<span class="number">4</span>) a.read(), po.add(a); po.p[<span class="number">5</span>]=po.p[<span class="number">1</span>];</div><div class="line">    ff as=((ff)<span class="number">4</span>*<span class="number">5</span>*<span class="number">5</span>)/((ff)<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span><span class="number">-1</span>)*(ff)<span class="number">5</span>; </div><div class="line">    as+=area(cutpolygon(po,point(<span class="number">-0.5</span>,<span class="number">-0.5</span>),point(<span class="number">-0.5</span>,<span class="number">0.5</span>)))*(ff)<span class="number">5</span>/((ff)<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>-(ff)<span class="number">1</span>*<span class="number">1</span>*<span class="number">1</span>)*(ff)<span class="number">4</span>; </div><div class="line">    as+=area(cutpolygon(po,point(<span class="number">-0.5</span>,<span class="number">0.5</span>),point(<span class="number">0.5</span>,<span class="number">0.5</span>)))*(ff)<span class="number">5</span>/((ff)<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>-(ff)<span class="number">1</span>*<span class="number">1</span>*<span class="number">1</span>)*(ff)<span class="number">6</span>; </div><div class="line">    as+=area(cutpolygon(po,point(<span class="number">0.5</span>,<span class="number">0.5</span>),point(<span class="number">0.5</span>,<span class="number">-0.5</span>)))*(ff)<span class="number">5</span>/((ff)<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>-(ff)<span class="number">1</span>*<span class="number">1</span>*<span class="number">1</span>)*(ff)<span class="number">3</span>; </div><div class="line">    as+=area(cutpolygon(po,point(<span class="number">0.5</span>,<span class="number">-0.5</span>),point(<span class="number">-0.5</span>, <span class="number">-0.5</span>)))*(ff)<span class="number">5</span>/((ff)<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>-(ff)<span class="number">1</span>*<span class="number">1</span>*<span class="number">1</span>); </div><div class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, as),<span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 计算几何 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 半平面交 </tag>
            
            <tag> 多边形面积 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4537】[Hnoi2016]最小公倍数]]></title>
      <url>/bzoj4537/</url>
      <content type="html"><![CDATA[<blockquote>
<p>感觉这个题目还是非常好的。</p>
<p>题目中限制最小公倍数是<span class="math inline">\(2^{a}3^{b}\)</span>。</p>
<p>如果限制是<span class="math inline">\(2^a\)</span>， 那么是非常容易做的。</p>
<p>然后就可以联想一波， 得到分块的做法(≧▽≦)啦。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4537" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>多次询问是否存在<span class="math inline">\(u,v\)</span>间的简单路径使得最小公倍数是<span class="math inline">\(2^a3^b\)</span>.</p>
<h1 id="解题报告">解题报告</h1>
<p>如果最小公倍数的形式是<span class="math inline">\(2^a\)</span>, 那就可以排序+并查集直接解决。</p>
<p>现在是<span class="math inline">\((a,b)\)</span>的形式， 相当于从一维拓展到两维。</p>
<p>如果固定住其中一维， 那么第二维的情况可以使用一维的做法解决， 但是这样做的复杂度是<span class="math inline">\(O(m^2\log m)\)</span>的。</p>
<p>发现复杂度糟糕的原因是， 第一维每一次改变， 所有边都要按照第二维的顺序重新加入。</p>
<p>如果第一维不是每次改变都重构， 而是每跳动一个块的大小一重构， 那么复杂度是<span class="math inline">\(O(\sqrt{m}*m \log{m})\)</span>,</p>
<p>然后每次询问的时候， 需要把整块之外零散的边加入， 边的数量是<span class="math inline">\(\sqrt{m}\)</span>的。</p>
<p>因为需要加入再撤消， 所以不能使用路径压缩的并查集， 需要启发式合并一波。</p>
<p>总复杂度是<span class="math inline">\(O(\sqrt{m}*m \log m * \log n + Q \sqrt{m} \log n)\)</span></p>
<p>这种复杂度都能过题？</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> y second </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50100</span>; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>?<span class="number">-1</span>:f); </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> u,v,a,b; info()&#123;&#125; </div><div class="line">	info(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> a,<span class="keyword">int</span> b) :u(u),v(v),a(a),b(b)&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123; in(u),in(v),in(a),in(b); &#125; </div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>], qs[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">old</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> x,f,sz,a,b; old()&#123;&#125;</div><div class="line">	old(<span class="keyword">int</span> x,<span class="keyword">int</span> f,<span class="keyword">int</span> sz,<span class="keyword">int</span> a,<span class="keyword">int</span> b) </div><div class="line">		:x(x), f(f), sz(sz), a(a),b(b) &#123;&#125;</div><div class="line">&#125;; </div><div class="line"><span class="keyword">int</span> n,m,Q,bb; </div><div class="line"><span class="keyword">int</span> f[N],sz[N],ma[N],mb[N]; <span class="keyword">bool</span> as[N]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpa</span><span class="params">(info a, info b)</span> </span>&#123; <span class="keyword">return</span> a.a&lt;b.a;&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpe</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> e[a].b&lt;e[b].b;&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpqs</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> qs[a].b&lt;qs[b].b;&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmx</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&gt;x?a:x); &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmn</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&lt;x?a:x); &#125; </div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;old&gt; v; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (f[x]==x?x:find(f[x]));&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(info e, <span class="keyword">bool</span> tp)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> a=find(e.u), b=find(e.v); </div><div class="line">	<span class="keyword">if</span> (sz[a]&gt;sz[b]) swap(a,b); </div><div class="line">	<span class="keyword">if</span> (tp) &#123;</div><div class="line">		v.pb(old(a,a,sz[a],ma[a],mb[a])); </div><div class="line">		v.pb(old(b,b,sz[b],ma[b],mb[b])); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (a!=b) &#123; </div><div class="line">		<span class="keyword">if</span> (sz[a]==sz[b]) ++sz[b];</div><div class="line">		f[a]=b, cmx(ma[b],ma[a]), cmx(mb[b],mb[a]); </div><div class="line">	&#125;</div><div class="line">	cmx(ma[b],e.a), cmx(mb[b],e.b); </div><div class="line">&#125;</div><div class="line">		</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">recons</span><span class="params">()</span> </span>&#123; </div><div class="line">	old no; <span class="keyword">int</span> x;</div><div class="line">	vep(i,(<span class="keyword">int</span>)v.size()<span class="number">-1</span>, <span class="number">0</span>)</div><div class="line">		no=v[i], x=v[i].x, f[x]=v[i].f, sz[x]=v[i].sz, ma[x]=v[i].a, mb[x]=v[i].b; </div><div class="line">	v.clear(); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> a[N&lt;&lt;<span class="number">1</span>],b[N&lt;&lt;<span class="number">1</span>],fa,fb; </div><div class="line">	in(n),in(m); rep(i,<span class="number">1</span>,m) e[i].read(),a[i]=i; </div><div class="line">	sort(e+<span class="number">1</span>,e+<span class="number">1</span>+m,cmpa);  bb=<span class="built_in">sqrt</span>(m); </div><div class="line">	in(Q); rep(i,<span class="number">1</span>,Q) qs[i].read(); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=m; i+=bb) &#123; </div><div class="line">		<span class="keyword">int</span> hs=<span class="number">0</span>; </div><div class="line">		rep(j,<span class="number">1</span>,Q) <span class="keyword">if</span> (qs[j].a&gt;=e[i].a&amp;&amp;(i+bb&gt;m||qs[j].a&lt;e[i+bb].a))</div><div class="line">          b[++hs]=j; </div><div class="line">		<span class="keyword">if</span> (hs==<span class="number">0</span>) <span class="keyword">continue</span>; </div><div class="line">		sort(a+<span class="number">1</span>,a+i+<span class="number">1</span>,cmpe); </div><div class="line">		sort(b+<span class="number">1</span>,b+<span class="number">1</span>+hs,cmpqs); </div><div class="line">		rep(j,<span class="number">1</span>,n) f[j]=j,sz[j]=<span class="number">1</span>,ma[j]=<span class="number">-1</span>,mb[j]=<span class="number">-1</span>;  </div><div class="line">		<span class="keyword">int</span> j=<span class="number">1</span>; rep(k,<span class="number">1</span>,hs) &#123; </div><div class="line">			<span class="keyword">while</span> (j&lt;=i&amp;&amp;e[a[j]].b&lt;=qs[b[k]].b)</div><div class="line">             	merge(e[a[j]],<span class="number">0</span>),++j; </div><div class="line">			rep(l,i+<span class="number">1</span>,min(i+bb,m)) </div><div class="line">             	<span class="keyword">if</span> (e[a[l]].a&lt;=qs[b[k]].a) &#123;</div><div class="line">				<span class="keyword">if</span> (e[a[l]].b&lt;=qs[b[k]].b) merge(e[a[l]],<span class="number">1</span>); </div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">break</span>; </div><div class="line">			fa=find(qs[b[k]].u), fb=find(qs[b[k]].v); </div><div class="line">			as[b[k]]=(fa==fb&amp;&amp;ma[fa]==qs[b[k]].a&amp;&amp;mb[fa]==qs[b[k]].b); </div><div class="line">			recons(); </div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">	rep(i,<span class="number">1</span>,Q) <span class="built_in">puts</span>((as[i]?<span class="string">"Yes"</span>:<span class="string">"No"</span>)); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 分块 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3489】A simple rmq problem]]></title>
      <url>/bzoj3489/</url>
      <content type="html"><![CDATA[<blockquote>
<p>标准无脑数据结构题？</p>
<p>一眼看过去有一种数据结构嵌套的冲动。 然后发现就是可以数据结构嵌套， 还需要可持久化。。</p>
<p>然后， 发现可以用“暴力”（KD-tree)艹掉？</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3489" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>给出一个长度为<span class="math inline">\(n\)</span>的序列，给出<span class="math inline">\(M\)</span>个询问：在<span class="math inline">\([l,r]\)</span>之间找到一个在这个区间里只出现过一次的数，并且要求找的这个数尽可能大。如果找不到这样的数，则直接输出0。强制在线。</p>
<h1 id="解题报告">解题报告</h1>
<p>题目中的在<span class="math inline">\([l,r]\)</span>中只出现一次的意思， 是前一个在<span class="math inline">\([0,l-1]\)</span>, 后一个在<span class="math inline">\([r+1,n+1]\)</span>, 自己在<span class="math inline">\([l,r]\)</span>的意思。</p>
<p>显然可以线性预处理前一个和后一个的位置， 记为<span class="math inline">\(l_x, n_x\)</span>.</p>
<p>那就是要查询<span class="math inline">\(l_x \in [0, l-1], n_x \in [r+1,n+1], x \in [l,r]\)</span>的最大值</p>
<ul>
<li>解法一</li>
</ul>
<p>可以将<span class="math inline">\(l_x\)</span>可持久化， 然后<span class="math inline">\(n_x\)</span>嵌套<span class="math inline">\(x\)</span>, 做一个可持久化线段树套线段树。</p>
<p>时间复杂度<span class="math inline">\(O(n \log^2 n)\)</span></p>
<p>空间复杂度不知道， 反正巨卡但是能过。</p>
<ul>
<li>解法二</li>
</ul>
<p>相当于一个三维空间的空间最大点问题。</p>
<p>这个可以用KD-tree暴力的做。</p>
<p>复杂度是<span class="math inline">\(O(n^{\frac{5}{3}})\)</span></p>
<p>但是跑得更快。</p>
<h1 id="代码">代码</h1>
<ul>
<li>树套树（可持久化）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> sn[<span class="number">40000000</span>][<span class="number">2</span>],rt[N],v[<span class="number">40000000</span>],ts; </div><div class="line"><span class="keyword">int</span> a[N], ls[N], nx[N], co[N], las,n,m; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> l,r,x,v; info(<span class="keyword">int</span> l=<span class="number">0</span>,<span class="keyword">int</span> r=<span class="number">0</span>,<span class="keyword">int</span> x=<span class="number">0</span>,<span class="keyword">int</span> v=<span class="number">0</span>) </div><div class="line">		:l(l),r(r),x(x),v(v) &#123;&#125;</div><div class="line">&#125; p[N]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (; c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:f; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>; c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&gt;x?a:x); &#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inmo</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> fm,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> w,<span class="keyword">int</span> va)</span> </span>&#123; </div><div class="line">	x=++ts; <span class="built_in">memcpy</span>(sn[x],sn[fm],<span class="keyword">sizeof</span>(sn[fm])),v[x]=v[fm];</div><div class="line">	cmax(v[x], va); <span class="keyword">if</span> (l==r) <span class="keyword">return</span>; <span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">	<span class="keyword">if</span> (w&lt;=md) inmo(sn[x][<span class="number">0</span>],sn[fm][<span class="number">0</span>],l,md,w,va); </div><div class="line">	<span class="keyword">else</span> inmo(sn[x][<span class="number">1</span>],sn[fm][<span class="number">1</span>],md+<span class="number">1</span>,r,w,va); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">outmo</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> fm,<span class="keyword">int</span> l,<span class="keyword">int</span> r,info p)</span> </span>&#123; </div><div class="line">	x=++ts; <span class="built_in">memcpy</span>(sn[x],sn[fm],<span class="keyword">sizeof</span>(sn[fm])),v[x]=v[fm];</div><div class="line">	inmo(v[x],v[fm],<span class="number">1</span>,n,p.x,p.v); </div><div class="line">	<span class="keyword">if</span> (l==r) <span class="keyword">return</span>; <span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">	<span class="keyword">if</span> (p.r&lt;=md) outmo(sn[x][<span class="number">0</span>],sn[fm][<span class="number">0</span>],l,md,p); </div><div class="line">	<span class="keyword">else</span> outmo(sn[x][<span class="number">1</span>],sn[fm][<span class="number">1</span>],md+<span class="number">1</span>,r,p); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inqy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,pii p)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> mx=<span class="number">0</span>; <span class="keyword">if</span> (!x) <span class="keyword">return</span> mx; </div><div class="line">	<span class="keyword">if</span> (p.x&lt;=l&amp;&amp;r&lt;=p.y) <span class="keyword">return</span> v[x]; </div><div class="line">	<span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">	<span class="keyword">if</span> (p.x&lt;=md) cmax(mx,inqy(sn[x][<span class="number">0</span>],l,md,p)); </div><div class="line">	<span class="keyword">if</span> (p.y&gt;md) cmax(mx,inqy(sn[x][<span class="number">1</span>],md+<span class="number">1</span>,r,p)); </div><div class="line">	<span class="keyword">return</span> mx; </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">outqy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,pii p)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> mx=<span class="number">0</span>; <span class="keyword">if</span> (!x) <span class="keyword">return</span> mx; </div><div class="line">	<span class="keyword">if</span> (p.y+<span class="number">1</span>&lt;=l&amp;&amp;r&lt;=n+<span class="number">1</span>) &#123; cmax(mx,inqy(v[x],<span class="number">1</span>,n,p)); <span class="keyword">return</span> mx;&#125; </div><div class="line">	<span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">	<span class="keyword">if</span> (p.y+<span class="number">1</span>&lt;=md) cmax(mx,outqy(sn[x][<span class="number">0</span>],l,md,p)); </div><div class="line">	<span class="keyword">if</span> (n+<span class="number">1</span>&gt;md) cmax(mx,outqy(sn[x][<span class="number">1</span>],md+<span class="number">1</span>,r,p));</div><div class="line">	<span class="keyword">return</span> mx; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(info a, info b)</span> </span>&#123; <span class="keyword">return</span> a.l&lt;b.l; &#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> l,r; in(n),in(m); </div><div class="line">	rep(i,<span class="number">1</span>,n) in(a[i]), ls[i]=co[a[i]], nx[co[a[i]]]=i, co[a[i]]=i; </div><div class="line">	rep(i,<span class="number">1</span>,n) nx[i]=(nx[i]?nx[i]:n+<span class="number">1</span>), p[i]=info(ls[i],nx[i],i,a[i]); </div><div class="line">	sort(p+<span class="number">1</span>, p+<span class="number">1</span>+n, cmp);</div><div class="line">	<span class="keyword">int</span> j=<span class="number">1</span>; xep(i, n) &#123; </div><div class="line">		rt[i]=(i?rt[i<span class="number">-1</span>]:<span class="number">0</span>); </div><div class="line">		<span class="keyword">while</span> (j&lt;=n&amp;&amp;p[j].l==i) </div><div class="line"> 			outmo(rt[i],rt[i],<span class="number">2</span>,n+<span class="number">1</span>,p[j]), ++j; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">while</span> (m--) &#123; </div><div class="line">		in(l), in(r), l=(l+las)%n+<span class="number">1</span>, r=(r+las)%n+<span class="number">1</span>; <span class="keyword">if</span>(l&gt;r) swap(l,r); </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, las=outqy(rt[l<span class="number">-1</span>],<span class="number">2</span>,n+<span class="number">1</span>,mp(l,r))); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>KD-tree</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100100</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> di, n,m,a[N],ls[N],nx[N],co[N],las; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> mn[<span class="number">3</span>],mx[<span class="number">3</span>],d[<span class="number">3</span>],l,r,v,as; </div><div class="line">&#125; v[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ques</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> mn[<span class="number">3</span>],mx[<span class="number">3</span>]; ques() &#123;&#125; ques(<span class="keyword">int</span> l,<span class="keyword">int</span> r) &#123; </div><div class="line">		mn[<span class="number">0</span>]=<span class="number">0</span>,mx[<span class="number">0</span>]=l<span class="number">-1</span>,mn[<span class="number">1</span>]=r+<span class="number">1</span>,mx[<span class="number">1</span>]=n+<span class="number">1</span>,mn[<span class="number">2</span>]=l,mx[<span class="number">2</span>]=r; </div><div class="line">	&#125; </div><div class="line">&#125; qs; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>?<span class="number">-1</span>:f); </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>; </div><div class="line">	x*=f;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmx</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&gt;x?a:x); &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmn</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&lt;x?a:x); &#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123; <span class="keyword">return</span> a.d[di]&lt;b.d[di]; &#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">int</span> y; </div><div class="line">	<span class="keyword">if</span> (y=v[x].l) &#123; xep(i,<span class="number">3</span>) cmn(v[x].mn[i],v[y].mn[i]), cmx(v[x].mx[i],v[y].mx[i]); cmx(v[x].as,v[y].as);&#125; </div><div class="line">	<span class="keyword">if</span> (y=v[x].r) &#123; xep(i,<span class="number">3</span>) cmn(v[x].mn[i],v[y].mn[i]), cmx(v[x].mx[i],v[y].mx[i]); cmx(v[x].as,v[y].as);&#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> d)</span> </span>&#123; </div><div class="line">	di=d; <span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; nth_element(v+l,v+md,v+r+<span class="number">1</span>,cmp); </div><div class="line">	xep(i,<span class="number">3</span>) v[md].mn[i]=v[md].mx[i]=v[md].d[i]; </div><div class="line">	v[md].as=v[md].v; </div><div class="line">	<span class="keyword">if</span> (md!=l) v[md].l=build(l,md<span class="number">-1</span>,(d+<span class="number">1</span>)%<span class="number">3</span>); </div><div class="line">	<span class="keyword">if</span> (md!=r) v[md].r=build(md+<span class="number">1</span>,r,(d+<span class="number">1</span>)%<span class="number">3</span>); </div><div class="line">	push(md); <span class="keyword">return</span> md; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">enough</span><span class="params">(node &amp;v)</span> </span>&#123; </div><div class="line">	<span class="keyword">bool</span> may=<span class="number">1</span>; xep(i,<span class="number">3</span>) <span class="keyword">if</span> (qs.mn[i]&gt;v.mn[i]||v.mx[i]&gt;qs.mx[i]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">illegal</span><span class="params">(node &amp;v)</span> </span>&#123; </div><div class="line">	xep(i,<span class="number">3</span>) <span class="keyword">if</span> (v.mn[i]&gt;qs.mx[i]||v.mx[i]&lt;qs.mn[i]) <span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">legal</span><span class="params">(node &amp;v)</span> </span>&#123; </div><div class="line">	xep(i,<span class="number">3</span>) <span class="keyword">if</span> (v.d[i]&lt;qs.mn[i]||v.d[i]&gt;qs.mx[i]) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(node &amp;v)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (illegal(v)) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">else</span> <span class="keyword">return</span> v.as; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">	di=d; <span class="keyword">int</span> l=<span class="number">0</span>, la=<span class="number">0</span>, r=<span class="number">0</span>, ra=<span class="number">0</span>; </div><div class="line">	<span class="keyword">if</span> (enough(v[x])) cmx(las,v[x].as);</div><div class="line">	<span class="keyword">if</span> (legal(v[x])) cmx(las, v[x].v); </div><div class="line">	<span class="keyword">if</span> (l=v[x].l) la=count(v[l]); </div><div class="line">	<span class="keyword">if</span> (r=v[x].r) ra=count(v[r]); </div><div class="line">	<span class="keyword">if</span> (la&lt;ra) swap(la,ra), swap(l,r); </div><div class="line">	<span class="keyword">if</span> (la&gt;las) query(l,(d+<span class="number">1</span>)%<span class="number">3</span>); </div><div class="line">	<span class="keyword">if</span> (ra&gt;las) query(r,(d+<span class="number">1</span>)%<span class="number">3</span>); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(n),in(m); rep(i,<span class="number">1</span>,n) in(a[i]); <span class="keyword">int</span> l, r;</div><div class="line">	rep(i,<span class="number">1</span>,n) ls[i]=co[a[i]], nx[co[a[i]]]=i, co[a[i]]=i; </div><div class="line">	rep(i,<span class="number">1</span>,n) &#123; </div><div class="line">		nx[i]=(nx[i]?nx[i]:n+<span class="number">1</span>);</div><div class="line">		v[i].d[<span class="number">0</span>]=ls[i],v[i].d[<span class="number">1</span>]=nx[i],v[i].d[<span class="number">2</span>]=i,v[i].v=a[i]; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">int</span> rt=build(<span class="number">1</span>,n,<span class="number">0</span>); </div><div class="line">	<span class="keyword">while</span> (m--) &#123; </div><div class="line">		in(l),in(r),l=(l+las)%n+<span class="number">1</span>, r=(r+las)%n+<span class="number">1</span>; <span class="keyword">if</span> (l&gt;r) swap(l,r); </div><div class="line">		qs=ques(l,r),las=<span class="number">0</span>,query(rt,<span class="number">0</span>), <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, las); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> KD树 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
            <tag> 树套树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4035】[HAOI2015]数组游戏]]></title>
      <url>/bzoj4035/</url>
      <content type="html"><![CDATA[<blockquote>
<p>是SDOI2016R2D1T1的加强版？ 感觉比sdoi那个题有意思许多。</p>
<p>适当打表有利身心健康？</p>
<p>适当猜结论有利身心健康？</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4035" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>每次选择一个白子<span class="math inline">\(x\)</span>， 选择一个整数<span class="math inline">\(k \leqslant \lfloor n/x \rfloor\)</span>, 翻转<span class="math inline">\(x, 2x, ... , kx\)</span>.</p>
<p>不能操作者输。</p>
<h1 id="解题报告">解题报告</h1>
<p>首先初始棋盘上的每个白子是独立的， <span class="math inline">\(f[x]\)</span> 表示<span class="math inline">\(x\)</span>位置的白子的<span class="math inline">\(sg\)</span>值。</p>
<p>很容易发现</p>
<p><span class="math display">\[f[x] = \text{mex} \left \lbrace f[x] \text{^} f[2x] \text{^} ... \text{^} f[kx]  \right \rbrace , k \in [1,\lfloor \frac{n}{x} \rfloor]\]</span>.</p>
<p>如果直接用这个式子转移， 复杂度是<span class="math inline">\(O(\sum_{i=1}^{n} \lfloor \frac{n}{i} \rfloor)\)</span> .</p>
<p>可以发现， 一个位置的<span class="math inline">\(sg\)</span>值可以由<span class="math inline">\(\lfloor \frac{n}{x} \rfloor\)</span> 确定， 因为转移是完全一样的。</p>
<p>所示有用的状态就是<span class="math inline">\(O(\sqrt{n})\)</span>的。</p>
<p>时间复杂度是<span class="math inline">\(O(n)\)</span> ?</p>
<p>可以过了。。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">int</span> c[<span class="number">2</span>][<span class="number">100000</span>],k,w,n,B; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> &amp;i, <span class="keyword">int</span> n)</span> </span>&#123; i=(i==n?i+<span class="number">1</span>:n/(n/(i+<span class="number">1</span>)));&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inital</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> vs[<span class="number">100000</span>]; <span class="keyword">static</span> <span class="keyword">int</span> tot,a[<span class="number">100000</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;nxt(i,n)) &#123; </div><div class="line">        <span class="keyword">int</span> no=<span class="number">0</span>; tot=<span class="number">0</span>; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=i;nxt(j,i)) &#123; </div><div class="line">            <span class="keyword">int</span> x=i/j,t=x&gt;=B?c[<span class="number">1</span>][n/x]:c[<span class="number">0</span>][x]; </div><div class="line">            a[++tot]=no^t, vs[a[tot]]=<span class="number">1</span>;  </div><div class="line">            <span class="keyword">if</span> ((i/x-i/(x+<span class="number">1</span>))&amp;<span class="number">1</span>) no^=t; </div><div class="line">        &#125;   </div><div class="line">        no=<span class="number">1</span>; <span class="keyword">while</span> (vs[no]) ++no; </div><div class="line">        <span class="keyword">if</span> (i&gt;=B) c[<span class="number">1</span>][n/i]=no; <span class="keyword">else</span> c[<span class="number">0</span>][i]=no; </div><div class="line">        <span class="keyword">while</span> (tot) vs[a[tot--]]=<span class="number">0</span>; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line">             </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n); B=<span class="built_in">sqrt</span>(n); </div><div class="line">    inital(); <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k); <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">while</span> (k--) &#123; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;w); <span class="keyword">int</span> as=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (w--) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x), x=n/x,as^=(x&gt;=B)? c[<span class="number">1</span>][n/x]:c[<span class="number">0</span>][x]; </div><div class="line">        <span class="built_in">puts</span>((as?<span class="string">"Yes"</span>:<span class="string">"No"</span>)); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 游戏题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sg函数 </tag>
            
            <tag> 博弈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3616】War]]></title>
      <url>/bzoj3616/</url>
      <content type="html"><![CDATA[<blockquote>
<p>跟着A队大爷XYM做的一个题，想到算法都不敢写系列？</p>
<p>用KD-tree维护些bitset相关的信息， 然后竟然卡得如此巧妙不炸内存？</p>
<p>感觉KD-tree越来越像暴力+剪枝了。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3616" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>炮台分为<span class="math inline">\(k\)</span>个阵营， 每个阵营的炮台会攻击一定范围内所有其他阵营的炮台， 随机<span class="math inline">\(m\)</span>轮， 每轮选择一个炮台攻击， 问期望剩下的完整的阵营数。</p>
<h1 id="解题报告">解题报告</h1>
<p><span class="math display">\[
\text{ans} = \sum_{i=1}^{k} P(i)
\]</span></p>
<p><span class="math inline">\(P(i)\)</span> 表示<span class="math inline">\(i\)</span>阵营不被攻击的概率； <span class="math display">\[
P(i) = (1-\frac{x}{n})^m
\]</span> 其中， <span class="math inline">\(x\)</span>表示能够攻击到任意一个炮塔的炮塔个数。</p>
<p>那只要求出<span class="math inline">\(x\)</span>就好了， 实际上就是能够攻击到阵营中的某个炮塔的集合的并集。</p>
<p>利用KD-tree+bitset得到每个炮塔能被哪些炮塔攻击到， 然后对于一个阵营， 直接<span class="math inline">\(\text{or}\)</span>起来， 再除去阵营内部的炮塔就可以了。</p>
<p>时间复杂度是<span class="math inline">\(O(n^2 \sqrt{n} /W )\)</span>的。</p>
<p>空间复杂度是<span class="math inline">\(O(n^2/8)\)</span>的。</p>
<p>反正就是各种虚， 但是好像数据非常弱？</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">35010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=a&gt;x?a:x; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=a&lt;x?a:x; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;	<span class="keyword">return</span> x&gt;=<span class="number">0</span>?x:-x; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sqr</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x*x;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">return</span> a&gt;b?a:b;&#125;</div><div class="line"></div><div class="line">ff res;</div><div class="line"><span class="keyword">int</span> n,m,K,i,j,k,root,_d,_x,_y,_r,_a,cnt[N],od[N];</div><div class="line"><span class="keyword">int</span> g[N],v[N],nxt[N],ed;</div><div class="line"><span class="built_in">bitset</span>&lt;N&gt;ok,b[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span><span class="keyword">int</span> x,y,r,a,p;&#125; a[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span><span class="keyword">int</span> d[<span class="number">2</span>],l,r,mx[<span class="number">2</span>],mn[<span class="number">2</span>],p;&#125; t[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> node &amp;a,<span class="keyword">const</span> node &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.d[_d]&lt;b.d[_d];&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; v[++ed]=y;nxt[ed]=g[x];g[x]=ed;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	add(t[x].p,x);</div><div class="line">	<span class="keyword">if</span>(t[x].l)&#123;</div><div class="line">	    cmax(t[x].mx[<span class="number">0</span>],t[t[x].l].mx[<span class="number">0</span>]);</div><div class="line">	    cmin(t[x].mn[<span class="number">0</span>],t[t[x].l].mn[<span class="number">0</span>]);</div><div class="line">	    cmax(t[x].mx[<span class="number">1</span>],t[t[x].l].mx[<span class="number">1</span>]);</div><div class="line">	    cmin(t[x].mn[<span class="number">1</span>],t[t[x].l].mn[<span class="number">1</span>]);</div><div class="line">	 &#125;</div><div class="line">	<span class="keyword">if</span>(t[x].r)&#123;</div><div class="line">	    cmax(t[x].mx[<span class="number">0</span>],t[t[x].r].mx[<span class="number">0</span>]);</div><div class="line">	    cmin(t[x].mn[<span class="number">0</span>],t[t[x].r].mn[<span class="number">0</span>]);</div><div class="line">	    cmax(t[x].mx[<span class="number">1</span>],t[t[x].r].mx[<span class="number">1</span>]);</div><div class="line">	    cmin(t[x].mn[<span class="number">1</span>],t[t[x].r].mn[<span class="number">1</span>]);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> D)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">	_d=D,nth_element(t+l+<span class="number">1</span>,t+md+<span class="number">1</span>,t+r+<span class="number">1</span>,cmp);</div><div class="line">	t[md].mx[<span class="number">0</span>]=t[md].mn[<span class="number">0</span>]=t[md].d[<span class="number">0</span>];</div><div class="line">	t[md].mx[<span class="number">1</span>]=t[md].mn[<span class="number">1</span>]=t[md].d[<span class="number">1</span>];</div><div class="line">	<span class="keyword">if</span>(l!=md) t[md].l=build(l,md<span class="number">-1</span>,!D);</div><div class="line">	<span class="keyword">if</span>(r!=md) t[md].r=build(md+<span class="number">1</span>,r,!D);</div><div class="line">	<span class="keyword">return</span> up(md),md;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(node &amp;x, <span class="keyword">int</span> xx)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(sqr(max(max(_x-x.mx[<span class="number">0</span>],x.mn[<span class="number">0</span>]-_x),<span class="number">0</span>))+sqr(max(max(_y-x.mx[<span class="number">1</span>],x.mn[<span class="number">1</span>]-_y),<span class="number">0</span>))&gt;_r</div><div class="line">    &amp;&amp; max(x.mn[<span class="number">0</span>]-_x,<span class="number">0</span>)+max(_x-x.mx[<span class="number">0</span>],<span class="number">0</span>)+max(x.mn[<span class="number">1</span>]-_y,<span class="number">0</span>)+max(_y-x.mx[<span class="number">1</span>],<span class="number">0</span>)&gt;_a) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span>(max(sqr(_x-x.mn[<span class="number">0</span>]),sqr(_x-x.mx[<span class="number">0</span>]))+max(sqr(_y-x.mn[<span class="number">1</span>]),sqr(_y-x.mx[<span class="number">1</span>]))&lt;=_r</div><div class="line">    || max(<span class="built_in">abs</span>(_x-x.mx[<span class="number">0</span>]),<span class="built_in">abs</span>(x.mn[<span class="number">0</span>]-_x))+max(<span class="built_in">abs</span>(_y-x.mx[<span class="number">1</span>]),<span class="built_in">abs</span>(x.mn[<span class="number">1</span>]-_y))&lt;=_a) &#123;	b[xx][i]=<span class="number">1</span>; <span class="keyword">return</span>;&#125;</div><div class="line">	<span class="comment">//if(sqr(x.d[0]-_x)+sqr(x.d[1]-_y)&lt;=_r||abs(x.d[0]-_x)+abs(x.d[1]-_y)&lt;=_a) ADD(x.p,i);</span></div><div class="line">  	<span class="keyword">if</span>(x.l) modify(t[x.l],x.l);</div><div class="line">  	<span class="keyword">if</span>(x.r) modify(t[x.r],x.r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(node &amp;x,<span class="keyword">int</span> _x,<span class="keyword">int</span> y)</span></span>&#123; b[_x]|=b[y];</div><div class="line">	<span class="keyword">if</span>(x.l) dfs(t[x.l],x.l,_x); <span class="keyword">if</span>(x.r) dfs(t[x.r],x.r,_x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;K);</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">    	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;a[i].x,&amp;a[i].y,&amp;a[i].r,&amp;a[i].a,&amp;a[i].p);</div><div class="line">    	t[i].d[<span class="number">0</span>]=a[i].x,t[i].d[<span class="number">1</span>]=a[i].y,t[i].p=a[i].p;</div><div class="line">    	cnt[a[i].p]++;</div><div class="line">  	&#125;</div><div class="line">  	root=build(<span class="number">1</span>,n,<span class="number">1</span>);</div><div class="line">  	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) _x=a[i].x,_y=a[i].y,_r=sqr(a[i].r),_a=a[i].a,modify(t[root],root);</div><div class="line">  	dfs(t[root],root,<span class="number">0</span>);</div><div class="line">  	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=K;i++)&#123;</div><div class="line">    	ok.reset(); <span class="keyword">for</span>(j=g[i];j;j=nxt[j]) ok|=b[v[j]]; </div><div class="line">    	res+=<span class="built_in">pow</span>(<span class="number">1.0</span>*(n-ok.count()+cnt[i])/n,m);</div><div class="line">  	&#125;</div><div class="line">  	<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>,res),<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> KD树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 2716】[Violet 3]天使玩偶]]></title>
      <url>/bzoj2716/</url>
      <content type="html"><![CDATA[<blockquote>
<p>模板题？ 没有想出如果不会kd-tree该怎么做， 但是有了kd-tree确实是模板题哎。</p>
<p>有时候科技的力量真是耐人寻味。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2716" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>支持两个操作：</p>
<ol style="list-style-type: decimal">
<li>插入一个点</li>
<li>询问最近点</li>
</ol>
<h1 id="解题报告">解题报告</h1>
<p>KD-tree 模板题。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>; </div><div class="line"></div><div class="line"><span class="keyword">bool</span> D; <span class="keyword">int</span> n,m,rt,as; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KDT</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> d[<span class="number">2</span>],sn[<span class="number">2</span>],mn[<span class="number">2</span>],mx[<span class="number">2</span>]; </div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> KDT &amp;a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> d[D]&lt;a.d[D];&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; xep(i,<span class="number">2</span>) mn[i]=mx[i]=d[i];&#125; </div><div class="line">&#125; v[N&lt;&lt;<span class="number">1</span>],qy; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; <span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:f; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>; c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=a&gt;x?a:x; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=a&lt;x?a:x; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x&gt;y?x:y; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x&lt;y?x:y; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (x&gt;=<span class="number">0</span>)?x:-x; &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; xep(i,<span class="number">2</span>) <span class="keyword">if</span> (v[x].sn[i]) &#123; <span class="keyword">int</span> y=v[x].sn[i]; </div><div class="line">	xep(j,<span class="number">2</span>) cmin(v[x].mn[j],v[y].mn[j]),cmax(v[x].mx[j],v[y].mx[j]); </div><div class="line">&#125; &#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l=<span class="number">1</span>, <span class="keyword">int</span> r=n, <span class="keyword">bool</span> d=<span class="number">0</span>)</span> </span>&#123; D=d; <span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">	nth_element(v+l,v+md,v+r+<span class="number">1</span>); v[md].init(); </div><div class="line">	<span class="keyword">if</span> (l!=md) v[md].sn[<span class="number">0</span>]=build(l,md<span class="number">-1</span>,!d); </div><div class="line">	<span class="keyword">if</span> (r!=md) v[md].sn[<span class="number">1</span>]=build(md+<span class="number">1</span>,r,!d);</div><div class="line">	up(md); <span class="keyword">return</span> md; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, KDT p)</span> </span>&#123; <span class="keyword">int</span> rc=<span class="number">0</span>; xep(i,<span class="number">2</span>) </div><div class="line">	rc+=max(<span class="number">0</span>,v[x].mn[i]-p.d[i])+max(<span class="number">0</span>,p.d[i]-v[x].mx[i]);</div><div class="line">	<span class="keyword">return</span> rc; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x=rt, <span class="keyword">bool</span> d=<span class="number">0</span>)</span> </span>&#123; <span class="keyword">bool</span> fg=v[n].d[d]&gt;v[x].d[d]; </div><div class="line">	<span class="keyword">if</span> (v[x].sn[fg]) insert(v[x].sn[fg], !d); </div><div class="line">	<span class="keyword">else</span> v[x].sn[fg]=n; up(x); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(KDT a, KDT b)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">abs</span>(a.d[<span class="number">0</span>]-b.d[<span class="number">0</span>])+<span class="built_in">abs</span>(a.d[<span class="number">1</span>]-b.d[<span class="number">1</span>]);&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x=rt,<span class="keyword">bool</span> d=<span class="number">0</span>)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> ds=dis(v[x],qy), dl=inf, dr=inf; cmin(as,ds); </div><div class="line">	<span class="keyword">if</span> (v[x].sn[<span class="number">0</span>]) dl = ask(v[x].sn[<span class="number">0</span>],qy); </div><div class="line">	<span class="keyword">if</span> (v[x].sn[<span class="number">1</span>]) dr = ask(v[x].sn[<span class="number">1</span>],qy); </div><div class="line">	<span class="keyword">if</span> (dl&lt;dr) &#123;  <span class="keyword">if</span> (dl&lt;as) query(v[x].sn[<span class="number">0</span>],!d); <span class="keyword">if</span> (dr&lt;as) query(v[x].sn[<span class="number">1</span>],!d);&#125; </div><div class="line">	<span class="keyword">else</span> &#123; <span class="keyword">if</span> (dr&lt;as) query(v[x].sn[<span class="number">1</span>],!d); <span class="keyword">if</span> (dl&lt;as) query(v[x].sn[<span class="number">0</span>],!d);&#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; 	</div><div class="line">	in(n), in(m); rep(i,<span class="number">1</span>,n) in(v[i].d[<span class="number">0</span>]), in(v[i].d[<span class="number">1</span>]); <span class="keyword">int</span> t;</div><div class="line">	<span class="keyword">for</span> (rt=build(); m; --m) &#123; in(t), as=inf; </div><div class="line">		<span class="keyword">if</span> (t==<span class="number">1</span>) in(v[++n].d[<span class="number">0</span>]),in(v[n].d[<span class="number">1</span>]),v[n].init(),insert(); </div><div class="line">		<span class="keyword">else</span> in(qy.d[<span class="number">0</span>]),in(qy.d[<span class="number">1</span>]),query(),<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,as);</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> KD树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4773】负环]]></title>
      <url>/bzoj4773/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这个是一个板子题哎， 就是倍增然后floyed跑一下。</p>
<p>但是时间限制是30s, 相对比较宽松的， 所以可以直接<span class="math inline">\(O(n^4)\)</span>的跑。</p>
<p>不过还是没有偷这个小懒。。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4773" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>求一个点数最少的负环， 输出点数。</p>
<h1 id="解题报告">解题报告</h1>
<p>记<span class="math inline">\(f[i][j][k]\)</span>表示<span class="math inline">\(i\)</span>到<span class="math inline">\(j\)</span>经过<span class="math inline">\(k\)</span>个点的最短路。</p>
<p>枚举<span class="math inline">\(k\)</span>和<span class="math inline">\(i\)</span>, 如果存在<span class="math inline">\(f[i][j][k]\)</span>是负数， 那么就是一个负环。</p>
<p>可以发现这个<span class="math inline">\(k\)</span>不需要枚举，满足二分的性质，实际上进行倍增是非常科学的。</p>
<p>复杂度是<span class="math inline">\((n^3\log n)\)</span>的。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">310</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> lg=<span class="number">10</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> n,m,f[lg][N][N],g[N][N],h[N][N],as;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=a&lt;x?a:x; &#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m); <span class="keyword">int</span> u,v,w,l; </div><div class="line">	<span class="built_in">memset</span>(h,<span class="number">127</span>/<span class="number">3</span>,<span class="keyword">sizeof</span>(h)); </div><div class="line">	<span class="built_in">memset</span>(f,<span class="number">127</span>/<span class="number">3</span>,<span class="keyword">sizeof</span>(f)); </div><div class="line">	rep(i,<span class="number">1</span>,n) f[<span class="number">0</span>][i][i]=h[i][i]=<span class="number">0</span>; </div><div class="line">	rep(i,<span class="number">1</span>,m) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w),f[<span class="number">0</span>][u][v]=w; </div><div class="line">	<span class="keyword">for</span> (l=<span class="number">1</span>;l&lt;=<span class="number">9</span>;++l) &#123; <span class="keyword">bool</span> flag=<span class="number">0</span>; </div><div class="line">		rep(k,<span class="number">1</span>,n) rep(i,<span class="number">1</span>,n) rep(j,<span class="number">1</span>,n) </div><div class="line">			cmin(f[l][i][j],f[l<span class="number">-1</span>][i][k]+f[l<span class="number">-1</span>][k][j]); </div><div class="line">		rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (f[l][i][i]&lt;<span class="number">0</span>) flag=<span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (flag) <span class="keyword">break</span>; <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;l)&gt;=n) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"0"</span>), <span class="number">0</span>; </div><div class="line">	&#125;</div><div class="line">	as=<span class="number">0</span>; </div><div class="line">	<span class="keyword">while</span> (~l) &#123; <span class="built_in">memcpy</span>(g,h,<span class="keyword">sizeof</span>(h)); <span class="keyword">bool</span> flag=<span class="number">0</span>; </div><div class="line">		rep(k,<span class="number">1</span>,n) rep(i,<span class="number">1</span>,n) rep(j,<span class="number">1</span>,n) </div><div class="line">			cmin(h[i][j],g[i][k]+f[l][k][j]); </div><div class="line">		rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (h[i][i]&lt;<span class="number">0</span>) flag=<span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (flag) <span class="built_in">memcpy</span>(h,g,<span class="keyword">sizeof</span>(g)); </div><div class="line">		<span class="keyword">else</span> as+=(<span class="number">1</span>&lt;&lt;l); -- l; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,as+<span class="number">1</span>),<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 图论题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 倍增 </tag>
            
            <tag> floyed </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3028】食物]]></title>
      <url>/bzoj3028/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个非常基础（甚至不需要）的生成函数题？</p>
<p>感觉生成函数这种神通广大， 名字吓人的东西， 能够有这么平易近人的入门题， 对我这种弱鸡真是太友善了。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3028" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>一些物品， 分别可以购买奇数个， 偶数个， 三的倍数个， 四的倍数个，0个（两种）， 0个， 0个。</p>
<p>问凑出<span class="math inline">\(n\)</span>个物品的方案数。</p>
<h1 id="解题报告">解题报告</h1>
<h4 id="算法一">算法一</h4>
<p>把{奇数个，0个}, {偶数个，0个}，{三的倍数个，0}, {四的倍数个， 0} 这四类拆开看， 可以发现除了第一类必须占<span class="math inline">\(&gt;=1\)</span>个物品外， 其他类组成任意个物品的方案数都是唯一的。</p>
<p>所以答案是将<span class="math inline">\(n-1\)</span>个物品分成<span class="math inline">\(4\)</span>分， 每一份可以为0的方案数， 也就是<span class="math inline">\({n+2} \choose{3}\)</span>.</p>
<h4 id="算法二">算法二</h4>
<p>化一发生成函数： <span class="math display">\[
\begin{aligned}
&amp;F(odd)=x+x^3+x^5+...=\frac{x}{1-x^2}\\
&amp;F(even)=1+x^2+x^4+...=\frac{1}{1-x^2}\\
&amp;F^2(0|1)=(1+x)^2\\
&amp;F(0|1|2)=1+x+x^2=\frac{1-x^3}{1-x}\\
&amp;F(0|1|2|3)=1+x+x^2+x^3=\frac{1-x^4}{1-x}
\end{aligned}
\]</span> 乘起来得到</p>
<p><span class="math display">\[F(\text{all}) = \frac{x}{(1-x)^4}\]</span></p>
<p>再展开得到：</p>
<p><span class="math display">\[F(\text{all})=x*\left(1+{1+4-1\choose 4-1}x+{2+4-1 \choose 4-1}x^2+...\right)\]</span></p>
<p>答案是<span class="math inline">\(x^n\)</span>项的系数， 也就是<span class="math inline">\({n-1+4-1 \choose 4-1}\)</span>.</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(a);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">10007</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  	<span class="keyword">long</span> <span class="keyword">long</span> as=<span class="number">0</span>; <span class="keyword">char</span> c=getchar();</div><div class="line">	<span class="keyword">for</span> (;c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>; c=getchar())as=(as*<span class="number">10</span>+c<span class="number">-48</span>)%p;</div><div class="line">	as=as*(as+<span class="number">1</span>)*(as+<span class="number">2</span>)/<span class="number">1</span>/<span class="number">2</span>/<span class="number">3</span>%p; </div><div class="line">  	<span class="keyword">return</span> <span class="built_in">cout</span>&lt;&lt;as&lt;&lt;<span class="built_in">endl</span>,<span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 组合数学 </tag>
            
            <tag> 生成函数 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4144】[AMPPZ2014]Petrol]]></title>
      <url>/bzoj4144/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个图论题， 需要一些性质， 需要足够的又不能超时的最短路信息来确保关键点的最小生成树不改变。</p>
<p>这个性质还是不是特别容易发现的啊。。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4144" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p><span class="math inline">\(n\)</span>个点， <span class="math inline">\(m\)</span>条边， 无向图， <span class="math inline">\(S\)</span>个关键点， 多次询问， 问是否存在路径<span class="math inline">\(x \rightarrow y\)</span>, 使得相邻两个关键点的距离不超过<span class="math inline">\(b\)</span> 。</p>
<p>（题目保证<span class="math inline">\(x\)</span>, <span class="math inline">\(y\)</span>为关键点）。</p>
<h1 id="解题报告">解题报告</h1>
<p>首先如果求出关键点之间两两的最短路， 那么题目就与非关键点没有什么关系了。</p>
<p>但是关键点的数量级是<span class="math inline">\(O(n)\)</span>的， 所以非常的不支持。</p>
<p>考虑存在在最终的最小生成树上的关键点之间的路径具有什么性质。</p>
<p>如果<span class="math inline">\(a,b\)</span>两点的最短路径中，存在点<span class="math inline">\(x\)</span>到关键点<span class="math inline">\(c\)</span>的距离小于到关键点<span class="math inline">\(a\)</span>和<span class="math inline">\(b\)</span>的距离的任何一个， 那么<span class="math inline">\(a \rightarrow b\)</span>的路径一定不在最终的最小生成树中。</p>
<p>因为<span class="math inline">\(a \rightarrow c \rightarrow b\)</span>一定是比<span class="math inline">\(a \rightarrow b\)</span>更好的策略。</p>
<p>所以需要的路径一定是“双色的”， 也就是一部分到<span class="math inline">\(x\)</span>最近， 一部分到<span class="math inline">\(y\)</span>最近。</p>
<p>那么枚举<span class="math inline">\(m\)</span>条边， 如果两个点颜色不一样， 分别是<span class="math inline">\(a,b\)</span>, 那么就添加<span class="math inline">\(a \rightarrow b\)</span>的最短路。</p>
<p>这些边足够组成最终的生成树。</p>
<p>所以就边权排序一波， 然后并查集维护一波。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(a);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200100</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> nx,to,v; edge()&#123;&#125;</div><div class="line">    edge(<span class="keyword">int</span> nx,<span class="keyword">int</span> to,<span class="keyword">int</span> v) </div><div class="line">        :nx(nx),to(to),v(v)&#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ques</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> x,y,lm,t,id;</div><div class="line">    ques(<span class="keyword">int</span> x=<span class="number">0</span>,<span class="keyword">int</span> y=<span class="number">0</span>,<span class="keyword">int</span> lm=<span class="number">0</span>,<span class="keyword">int</span> t=<span class="number">0</span>,<span class="keyword">int</span> id=<span class="number">0</span>) </div><div class="line">        :x(x),y(y),lm(lm),t(t),id(id)&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> ques &amp;b) <span class="keyword">const</span>&#123; <span class="keyword">return</span> lm==b.lm?t&lt;b.t:lm&lt;b.lm;&#125;  </div><div class="line">&#125; qy[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">side</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> x,y,d; side()&#123;&#125;</div><div class="line">    side(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d) </div><div class="line">        :x(x),y(y),d(d) &#123;&#125;</div><div class="line">&#125; sd[N]; </div><div class="line"><span class="keyword">int</span> hd[N],tot,n,s,m,c[N],Q,ds[N],co[N],un,f[N]; </div><div class="line"><span class="keyword">bool</span> vs[N],as[N]; <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">    x*=f; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span> </span>&#123; </div><div class="line">    e[++tot]=edge(hd[x],y,d), hd[x]=tot; </div><div class="line">    e[++tot]=edge(hd[y],x,d), hd[y]=tot; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">if</span> (f[x]!=x) f[x]=find(f[x]);<span class="keyword">return</span> f[x]; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">  	<span class="keyword">int</span> a=find(x),b=find(y); <span class="keyword">if</span> (a!=b) f[a]=b;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    in(n),in(s),in(m); rep(i,<span class="number">1</span>,s) in(c[i]); </div><div class="line">    <span class="keyword">int</span> u,v,d; rep(i,<span class="number">1</span>,m)  &#123;</div><div class="line">        in(u),in(v),in(d),sd[i]=side(u,v,d); </div><div class="line">        add(u,v,d), add(v,u,d); </div><div class="line">    &#125;</div><div class="line">    rep(i,<span class="number">1</span>,n) ds[i]=<span class="number">2000000001</span>; </div><div class="line">    rep(i,<span class="number">1</span>,s) ds[c[i]]=<span class="number">0</span>,co[c[i]]=c[i],q.push(c[i]),vs[c[i]]=<span class="number">1</span>; </div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123; </div><div class="line">        u=q.front(); q.pop(); vs[u]=<span class="number">0</span>; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=hd[u];i;i=e[i].nx) </div><div class="line">            <span class="keyword">if</span> (v=e[i].to, ds[u]+e[i].v&lt;ds[v]) &#123; </div><div class="line">                ds[v]=ds[u]+e[i].v, co[v]=co[u]; </div><div class="line">                <span class="keyword">if</span> (!vs[v]) vs[v]=<span class="number">1</span>, q.push(v); </div><div class="line">            &#125; </div><div class="line">    &#125;</div><div class="line">    in(Q),un=Q; rep(i,<span class="number">1</span>,n) f[i]=i; </div><div class="line">    rep(i,<span class="number">1</span>,Q) in(u),in(v),in(d),qy[i]=ques(u,v,d,<span class="number">1</span>,i);</div><div class="line">    rep(i,<span class="number">1</span>,m) &#123; </div><div class="line">      	u=sd[i].x,v=sd[i].y; </div><div class="line">      	<span class="keyword">if</span> (co[u]!=co[v])</div><div class="line">        	qy[++un]=ques(co[u],co[v],ds[u]+ds[v]+sd[i].d,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    sort(qy+<span class="number">1</span>,qy+<span class="number">1</span>+un); </div><div class="line">    rep(i,<span class="number">1</span>,un) &#123;</div><div class="line">        <span class="keyword">if</span> (qy[i].t) as[qy[i].id]=find(qy[i].x)==find(qy[i].y); </div><div class="line">        <span class="keyword">else</span> merge(qy[i].x,qy[i].y); </div><div class="line">    &#125;</div><div class="line">    rep(i,<span class="number">1</span>,Q) <span class="built_in">puts</span>((as[i])?<span class="string">"TAK"</span>:<span class="string">"NIE"</span>); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 图论题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 2244】[SDOI2011]拦截导弹]]></title>
      <url>/bzoj2244/</url>
      <content type="html"><![CDATA[<blockquote>
<p>cdq分治优化dp的题目， 不是很了解当时省选这个题目的得分情况。</p>
<p>不过感觉对于日益简单SD一轮， 这个题目放在现在算是难度适中。</p>
<p>比较好写的一个题目。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2244" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>求最长三维偏序， 并求对于一个位置， 所在最长偏序的方案数。</p>
<h1 id="解题报告">解题报告</h1>
<p>三维偏序， 可以cdq分治 + 树状数组做。</p>
<p>最长三维偏序比较容易解决， 统计一个位置所在的最长三维偏序的方案数， 需要记录正反两个方向的最大值和方案数， 如果最大值的和等于答案， 则方案数为两侧方案数的乘积， 否则为0。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1000000000</span>; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> a,b,id; point(<span class="keyword">int</span> a=<span class="number">0</span>,<span class="keyword">int</span> b=<span class="number">0</span>,<span class="keyword">int</span> id=<span class="number">0</span>) </div><div class="line">		:a(a),b(b),id(id) &#123;&#125;</div><div class="line">&#125; p[N]; </div><div class="line"><span class="keyword">int</span> vc[N],vas; </div><div class="line"><span class="keyword">int</span> n,m,f[<span class="number">2</span>][N]; ff g[<span class="number">2</span>][N]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(point x,point y)</span> </span>&#123;<span class="keyword">return</span> x.a==y.a?x.id&lt;y.id:x.a&lt;y.a;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> v[N],vv[N],mx[N]; ff hs[N]; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> a,ff b,<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> (;x&lt;=n;x+=x&amp;-x) <span class="keyword">if</span> (mx[x]==a) hs[x]+=b; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (mx[x]&lt;a) mx[x]=a,hs[x]=b; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> (;x&lt;=n;x+=x&amp;-x) hs[x]=mx[x]=<span class="number">0</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> &amp;a,ff &amp;b,<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	a=b=<span class="number">0</span>; <span class="keyword">for</span> (;x;x-=x&amp;-x) <span class="keyword">if</span> (mx[x]==a) b+=hs[x]; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (mx[x]&gt;a) a=mx[x], b=hs[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (l==<span class="number">1</span>&amp;&amp;r==n) rep(i,l,r) v[i]=i; </div><div class="line">	<span class="keyword">if</span> (l==r) &#123; <span class="keyword">int</span> x=p[v[l]].id; </div><div class="line">		<span class="keyword">if</span> (f[t][x]==<span class="number">1</span>) g[t][x]+=<span class="number">1</span>; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!f[t][x]) f[t][x]=<span class="number">1</span>, g[t][x]=<span class="number">1</span>; </div><div class="line">		<span class="keyword">return</span>; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> _l,_r,md; md=(l+r)&gt;&gt;<span class="number">1</span>,_l=l<span class="number">-1</span>, _r=md; </div><div class="line">	rep(i,l,r) &#123; <span class="keyword">int</span> x=v[i];</div><div class="line">		<span class="keyword">if</span> (p[x].id&lt;=md) vv[++_l]=x; <span class="keyword">else</span> vv[++_r]=x; </div><div class="line">	&#125;</div><div class="line">	rep(i,l,r) v[i]=vv[i]; </div><div class="line">	cdq(l,md,t), _l=l; </div><div class="line">	rep(i,md+<span class="number">1</span>,r) &#123; <span class="keyword">int</span> x=v[i],_mx; ff _hs; </div><div class="line">		<span class="keyword">while</span> (_l&lt;=md&amp;&amp;p[v[_l]].a&lt;=p[x].a) </div><div class="line">			insert(f[t][p[v[_l]].id],g[t][p[v[_l]].id],p[v[_l]].b),++_l; </div><div class="line">		query(_mx,_hs,p[x].b) ;</div><div class="line">		<span class="keyword">int</span> d=p[x].id; </div><div class="line">		<span class="keyword">if</span> (_mx+<span class="number">1</span>==f[t][d]) g[t][d]+=_hs; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(_mx+<span class="number">1</span>&gt;f[t][d]) f[t][d]=_mx+<span class="number">1</span>,g[t][d]=_hs; </div><div class="line">	&#125;</div><div class="line">	rep(i,l,md) erase(p[v[i]].b); </div><div class="line">	cdq(md+<span class="number">1</span>,r,t); </div><div class="line">	_l=l,_r=md+<span class="number">1</span>; <span class="keyword">int</span> x=l<span class="number">-1</span>; </div><div class="line">	<span class="keyword">while</span> (_l&lt;=md||_r&lt;=r) &#123; </div><div class="line">		<span class="keyword">if</span> ((_l&lt;=md)&amp;&amp;(_r&gt;r||p[v[_l]].a&lt;p[v[_r]].a))</div><div class="line">			vv[++x]=v[_l++]; </div><div class="line">		<span class="keyword">else</span> vv[++x]=v[_r++];</div><div class="line">	&#125;</div><div class="line">	rep(i,l,r) v[i]=vv[i]; </div><div class="line">&#125;	</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(n); rep(i,<span class="number">1</span>,n) &#123;</div><div class="line">		in(p[i].a),in(p[i].b),p[i].id=i; </div><div class="line">		vc[vas++]=p[i].b; </div><div class="line">	&#125;</div><div class="line">	sort(vc,vc+vas), vas=unique(vc,vc+vas)-vc; </div><div class="line">	rep(i,<span class="number">1</span>,n) p[i].b=lower_bound(vc,vc+vas,p[i].b)-vc+<span class="number">1</span>; </div><div class="line">	rep(i,<span class="number">1</span>,n/<span class="number">2</span>) swap(p[i].a,p[n-i+<span class="number">1</span>].a),swap(p[i].b,p[n-i+<span class="number">1</span>].b); </div><div class="line">	sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n,cmp),cdq(<span class="number">1</span>,n,<span class="number">0</span>); </div><div class="line">	rep(i,<span class="number">1</span>,n) p[i].b=vas-p[i].b+<span class="number">1</span>,p[i].a=inf-p[i].a+<span class="number">1</span>,p[i].id=n-p[i].id+<span class="number">1</span>; 	</div><div class="line">	sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n,cmp),cdq(<span class="number">1</span>,n,<span class="number">1</span>); </div><div class="line">	<span class="keyword">int</span> as=<span class="number">0</span>; ff total=<span class="number">0</span>; </div><div class="line">	rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (f[<span class="number">0</span>][i]+f[<span class="number">1</span>][n-i+<span class="number">1</span>]<span class="number">-1</span>==as) total+=g[<span class="number">0</span>][i]*g[<span class="number">1</span>][n-i+<span class="number">1</span>]; </div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (f[<span class="number">0</span>][i]+f[<span class="number">1</span>][n-i+<span class="number">1</span>]<span class="number">-1</span>&gt;as) as=f[<span class="number">0</span>][i]+f[<span class="number">1</span>][n-i+<span class="number">1</span>]<span class="number">-1</span>,total=g[<span class="number">0</span>][i]*g[<span class="number">1</span>][n-i+<span class="number">1</span>]; </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,as); total/=as;</div><div class="line">	vep(i,n,<span class="number">1</span>) <span class="keyword">if</span> (f[<span class="number">0</span>][i]+f[<span class="number">1</span>][n-i+<span class="number">1</span>]<span class="number">-1</span>==as) </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lf "</span>, g[<span class="number">0</span>][i]*g[<span class="number">1</span>][n-i+<span class="number">1</span>]/total); </div><div class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0 "</span>); </div><div class="line">	<span class="built_in">puts</span>(<span class="string">""</span>); <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
            <tag> cdq分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3453】tyvj1858 XLkxc]]></title>
      <url>/bzoj3453/</url>
      <content type="html"><![CDATA[<blockquote>
<p>从FJWC看到的一个题， 比较容易想到的做法是分析多项式的次数， 并使用LAG插值法进行求解。</p>
<p>但是有比较优美但是颇为繁琐的STD做法？ 用的是伯努利数那套理论。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3453" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>求：</p>
<p><span class="math display">\[\sum_{i=0}^{n} \sum_{j=1}^{a+i \times d} \sum_{l=1}^{j}l^k\]</span></p>
<h1 id="解题报告">解题报告</h1>
<ul>
<li>算法一
<ul>
<li>令<span class="math inline">\(f[n]=S(n,k)=\sum_{i=1}^{n} i^k\)</span>, 则<span class="math inline">\(f\)</span>为对一个<span class="math inline">\(k\)</span>次多项式求前缀和，所以<span class="math inline">\(f\)</span>为<span class="math inline">\(k+1\)</span>次多项式；</li>
<li>同理<span class="math inline">\(g[n]=\sum_{i=1}^{n} f[i]\)</span>，则<span class="math inline">\(g\)</span>为对<span class="math inline">\(f\)</span>求前缀和，<span class="math inline">\(g\)</span>为<span class="math inline">\(k+2\)</span>次多项式。</li>
<li>继续<span class="math inline">\(h[x]=g[a+x \times d]\)</span>, 则<span class="math inline">\(h[x]\)</span>次数界与<span class="math inline">\(g\)</span>相同， 为<span class="math inline">\(k+2\)</span>次多项式。</li>
<li>最后，<span class="math inline">\(ans[n]=\sum_{i=0}^{n}h[x]\)</span>，<span class="math inline">\(ans\)</span>为对<span class="math inline">\(h\)</span>求前缀和，所以<span class="math inline">\(ans\)</span>为<span class="math inline">\(k+4\)</span>次多项式。</li>
<li>因为<span class="math inline">\(g\)</span>为<span class="math inline">\(k+2\)</span>次多项式，<span class="math inline">\(O(k \log{k})\)</span> 预处理处<span class="math inline">\(g\)</span>的前<span class="math inline">\(k+3\)</span>项后，可以使用拉格朗日插值<span class="math inline">\(O(k)\)</span>插出一个<span class="math inline">\(h[x]\)</span>, <span class="math inline">\(O(k^2)\)</span>插出<span class="math inline">\(k+4\)</span>个<span class="math inline">\(h\)</span>并求前缀和得到<span class="math inline">\(k+4\)</span>个<span class="math inline">\(ans[x]\)</span>,再使用<span class="math inline">\(k+4\)</span>个<span class="math inline">\(ans[x]\)</span>进行插值得到<span class="math inline">\(ans[n]\)</span></li>
</ul></li>
<li>算法二
<ul>
<li><p>题目中给出伯努利数，主要目的是提示多项式的次数界。</p></li>
<li><p>但实际上可以使用伯努利数求解。</p></li>
<li><p>承接算法一中的定义，<span class="math inline">\(g(x)=\sum_{i=0}^{n+2} g_i x^i\)</span></p></li>
<li><p><span class="math display">\[
  \begin{aligned}
  ans[n] &amp;=\sum_{i=0}^{n} g(a+i*d) \\
  &amp;= \sum_{i=0}^{n} \sum_{t=0}^{n+2} g_t (a+i*d)^t \\
  &amp;= \sum_{i=0}^{n} \sum_{t=0}^{n+2} g_t \sum_{k=0}^{t} \binom{t}{k}a^{t-k}(i \times d)^{k} \\
  &amp;= \sum_{t=0}^{n+2} g_t \sum_{k=0}^{t} \binom{t}{k}a^{t-k}d^k \sum_{i=0}^n i^k
  \end{aligned}
  \]</span></p></li>
</ul></li>
<li><ul>
<li><p>然后发现， 如果能求出<span class="math inline">\(g_t\)</span>， 并能预处理<span class="math inline">\(\sum_{i=0}^{n}i^k\)</span>， 就可以<span class="math inline">\(k^2\)</span>的搞了。</p></li>
<li><p>翻一下<a href="http://blog.csdn.net/acdreamers/article/details/38929067" target="_blank" rel="external">伯努利数和自然数幂和</a></p></li>
<li><p>摘选重要的公式：</p></li>
<li><p><span class="math display">\[\sum_{k=0}^{n} \binom{n+1}{k} B_k=0\]</span></p></li>
<li><p>利用这个公式可以<span class="math inline">\(O(k^2)\)</span>预处理伯努利数<span class="math inline">\(B\)</span></p></li>
<li><p><span class="math display">\[\sum_{i=1}^{x}i^k=\frac{1}{k+1}\sum_{i=1}^{k+1}\binom{k+1}{i}B_{k+1-i}(x+1)^i\]</span></p></li>
<li><p>上式中，<span class="math inline">\((x+1)^i\)</span>不够优美，因为多项式中需要<span class="math inline">\(x^i\)</span>的形式， 所以把上式重写：</p></li>
<li><p><span class="math display">\[\sum_{i=0}^{x-1}i^k=\frac{1}{k+1}\sum_{i=1}^{k+1}\binom{k+1}{i}B_{k+1-i}x^i \quad (1)\]</span></p></li>
<li><p>对g化式子： <span class="math display">\[
\begin{aligned}
g(x)&amp;=\sum_{i=1}^{x} \sum_{j=1}^{i} j^k \\
&amp;=\sum_{i=1}^{x} (x-i+1)*i^k\\
&amp;=x*\sum_{i=0}^{x-1}i^k-\sum_{i=0}^{x-1}i^{k+1}+\sum_{i=0}^{x-1}i^k+x^k
\end{aligned} \ (2)
\]</span></p></li>
</ul></li>
<li><ul>
<li><p>利用这个式子<span class="math inline">\((1)(2)\)</span>,<span class="math inline">\(O(k)\)</span>预处理<span class="math inline">\(g_t\)</span></p></li>
<li>利用式子<span class="math inline">\((1)\)</span>, <span class="math inline">\(\sum_{i=0}^{n}i^k\)</span>单次<span class="math inline">\(O(k)\)</span>, 所以可以<span class="math inline">\(O(k^2)\)</span>预处理<span class="math inline">\(S(n,k)\)</span>.</li>
<li><p>这样就完结撒花喽~~</p></li>
</ul></li>
</ul>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">1234567891</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3015</span>; </div><div class="line"> </div><div class="line">ll f[N],g[N],fc[N],iv[N],pe[N],su[N],k,a,n,d; </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">fast</span><span class="params">(ll x,<span class="keyword">int</span> k)</span> </span>&#123;ll as=<span class="number">1</span>; <span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%p) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) as=as*x%p;<span class="keyword">return</span> as;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mo</span><span class="params">(ll x, ll y)</span> </span>&#123; x+=y; <span class="keyword">if</span> (x&gt;=p) x-=p; <span class="keyword">if</span> (x&lt;<span class="number">0</span>) x+=p; <span class="keyword">return</span> x;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">P</span><span class="params">(ll x,ll y)</span> </span>&#123; <span class="keyword">if</span> ((x-y)&amp;<span class="number">1</span>) <span class="keyword">return</span> p<span class="number">-1</span>; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lag</span><span class="params">(ll f[],ll n, <span class="keyword">int</span> k)</span> </span>&#123; </div><div class="line">    pe[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,k) pe[i]=pe[i<span class="number">-1</span>]*(n-i+p)%p; </div><div class="line">    su[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,k) su[i]=su[i<span class="number">-1</span>]*(n-k+i<span class="number">-1</span>+p)%p; </div><div class="line">    ll as=<span class="number">0</span>; </div><div class="line">    rep(i,<span class="number">1</span>,k) &#123; </div><div class="line">        ll up=pe[i<span class="number">-1</span>]*su[k-i]%p*f[i]%p; </div><div class="line">        ll dn=iv[i<span class="number">-1</span>]*iv[k-i]%p; </div><div class="line">        as=mo(as, up*dn%p*P(k,i)%p); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> as; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    fc[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,<span class="number">3010</span>) fc[i]=fc[i<span class="number">-1</span>]*i%p; </div><div class="line">    iv[<span class="number">3010</span>]=fast(fc[<span class="number">3010</span>],p<span class="number">-2</span>); vep(i,<span class="number">3009</span>,<span class="number">0</span>) iv[i]=iv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%p;</div><div class="line">    <span class="keyword">int</span> test; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;test);</div><div class="line">    <span class="keyword">while</span> (test--) &#123; </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;k,&amp;a,&amp;n,&amp;d); </div><div class="line">        rep(i,<span class="number">0</span>,k+<span class="number">3</span>) g[i]=fast(i,k); </div><div class="line">        rep(i,<span class="number">1</span>,k+<span class="number">3</span>) g[i]=mo(g[i<span class="number">-1</span>],g[i]); </div><div class="line">        rep(i,<span class="number">1</span>,k+<span class="number">3</span>) g[i]=mo(g[i<span class="number">-1</span>],g[i]); </div><div class="line">        f[<span class="number">0</span>]=lag(g,a,k+<span class="number">3</span>);</div><div class="line">        rep(i,<span class="number">1</span>,k+<span class="number">5</span>) f[i]=mo(f[i<span class="number">-1</span>],lag(g,(a+d*i)%p,k+<span class="number">3</span>)); </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lag(f,n,k+<span class="number">5</span>)); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 拉格朗日插值 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 2063】我爸是李刚]]></title>
      <url>/bzoj2063/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这个题目Yveh送给xyx做胡策题的， 但是我这种只做过二进制数位dp裸题的丝薄选手， 直接懵逼了好不好。。</p>
<p>实际上是数位dp的例题， 好几年前的论文里就有了。</p>
<p>话说这个题目真是非常的魔性。</p>
</blockquote>
<a id="more"></a>
<div class="figure">
<img src="http://oj12ftk88.bkt.clouddn.com/blog/20170505/212205950.png?imageslim">

</div>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2063" target="_blank" rel="external">题目链接</a></p>
<h1 id="题目大意">题目大意</h1>
<p>区间<span class="math inline">\([l,r]\)</span>， 每个数的价值是各个数位的数字之和， 如果相邻的<span class="math inline">\(x\)</span>个数价值和大于等于<span class="math inline">\(m\)</span>， 则这<span class="math inline">\(x\)</span>个数可以分为一组， 求<span class="math inline">\([l,r]\)</span>最多分为几组。</p>
<h1 id="解题报告">解题报告</h1>
<p>因为数的价值是各个数位的数字之和， 所以考虑进行数位dp.</p>
<p>具体的，考虑“数位树”， 在十进制下也就是一个十叉树， 那么对于一个<span class="math inline">\([l,r]\)</span>的询问，可以转换成<span class="math inline">\((l&#39;,r&#39;)\)</span>, 在十叉树上， 这个开区间中的数可以看作若干满二叉子树。</p>
<p>因为树高是<span class="math inline">\(\text{log }n\)</span>级别的，所以这些满十叉树的个数是<span class="math inline">\(\text{log }n\)</span> 级别的。</p>
<p>考虑预处理每棵满十叉树对答案可能产生的贡献， 因为一颗满十叉树可能分成若干组后， 贡献一个<span class="math inline">\(\leqslant m\)</span>的一个余数， 不妨设计这样的状态:</p>
<p><span class="math inline">\(f[i][j][k]\)</span> 表示满十叉树根节点的深度是<span class="math inline">\(i\)</span>, 子树根节点到根的路径和为<span class="math inline">\(j\)</span>, 在前方提供<span class="math inline">\(k\)</span>的余数， 可以贡献的分组数。</p>
<p><span class="math inline">\(g[i][j][k]\)</span> 表示满十叉树根节点的深度是<span class="math inline">\(i\)</span>, 子树根节点到根的路径和为<span class="math inline">\(j\)</span>, 在前方提供<span class="math inline">\(k\)</span>的余数， 贡献若干组后剩余的余数。</p>
<p>现在就得到了每棵满十叉树在不同情况下对答案的贡献、对后方子树的影响， 消耗的时间复杂度是<span class="math inline">\(O(\log^2n * 10^2 * m)\)</span> 。</p>
<p>查询的时候，在十叉树上查询<span class="math inline">\((l&#39;,r&#39;)\)</span>两个区间端点的<span class="math inline">\(\text{lca}\)</span>, 分别从左侧向上爬，在从<span class="math inline">\(\text{lca}\)</span>向右端点爬 。</p>
<p>统计答案， 复杂度是<span class="math inline">\(O(\log n * 10)\)</span>的。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"> </div><div class="line">ll f[<span class="number">20</span>][<span class="number">180</span>][<span class="number">1010</span>],l,r;</div><div class="line"><span class="keyword">int</span> g[<span class="number">20</span>][<span class="number">180</span>][<span class="number">1010</span>],m,a[<span class="number">25</span>],b[<span class="number">25</span>],sa[<span class="number">25</span>],sb[<span class="number">25</span>],la,lb,ln,tst;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    la=lb=ln=<span class="number">0</span>;</div><div class="line">    rep(i,<span class="number">0</span>,<span class="number">9</span>*<span class="number">18</span>) rep(j,<span class="number">0</span>,m<span class="number">-1</span>) f[<span class="number">1</span>][i][j]=(i+j&gt;=m),g[<span class="number">1</span>][i][j]=(i+j&gt;=m?<span class="number">0</span>:i+j); </div><div class="line">    rep(i,<span class="number">2</span>,<span class="number">18</span>) rep(j,<span class="number">0</span>,<span class="number">9</span>*(<span class="number">18</span>-i+<span class="number">1</span>)) rep(k,<span class="number">0</span>,m<span class="number">-1</span>) &#123; </div><div class="line">        <span class="keyword">int</span> tmp=k; f[i][j][k]=<span class="number">0</span>; </div><div class="line">        rep(x,<span class="number">0</span>,<span class="number">9</span>) f[i][j][k]+=f[i<span class="number">-1</span>][j+x][tmp],tmp=g[i<span class="number">-1</span>][j+x][tmp]; </div><div class="line">        g[i][j][k]=tmp; </div><div class="line">    &#125; </div><div class="line">    --l, ++r; </div><div class="line">    <span class="keyword">while</span> (l) a[++la]=l%<span class="number">10</span>, l/=<span class="number">10</span>; </div><div class="line">    <span class="keyword">while</span> (r) b[++lb]=r%<span class="number">10</span>, r/=<span class="number">10</span>; </div><div class="line">    sa[lb+<span class="number">1</span>]=<span class="number">0</span>,sb[lb+<span class="number">1</span>]=<span class="number">0</span>; vep(i,lb,<span class="number">1</span>) </div><div class="line">        sa[i]=sa[i+<span class="number">1</span>]+a[i],sb[i]=sb[i+<span class="number">1</span>]+b[i]; </div><div class="line">    ln=lb; <span class="keyword">while</span> (a[ln]==b[ln]) --ln; <span class="keyword">int</span> tmp=<span class="number">0</span>; ll as=<span class="number">0</span>; </div><div class="line">    rep(i,<span class="number">1</span>,ln<span class="number">-1</span>) rep(j,a[i]+<span class="number">1</span>,<span class="number">9</span>) </div><div class="line">        as+=f[i][sa[i+<span class="number">1</span>]+j][tmp],tmp=g[i][sa[i+<span class="number">1</span>]+j][tmp]; </div><div class="line">    rep(i,a[ln]+<span class="number">1</span>,b[ln]<span class="number">-1</span>) as+=f[ln][sa[ln+<span class="number">1</span>]+i][tmp],tmp=g[ln][sa[ln+<span class="number">1</span>]+i][tmp]; </div><div class="line">    vep(i,ln<span class="number">-1</span>,<span class="number">1</span>) rep(j,<span class="number">0</span>,b[i]<span class="number">-1</span>) </div><div class="line">        as+=f[i][sb[i+<span class="number">1</span>]+j][tmp],tmp=g[i][sb[i+<span class="number">1</span>]+j][tmp]; </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,as); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%d"</span>,&amp;l,&amp;r,&amp;m); </div><div class="line">    solve(); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数位dp </tag>
            
            <tag> dp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4008】[HNOI2015]亚瑟王]]></title>
      <url>/bzoj4008/</url>
      <content type="html"><![CDATA[<blockquote>
<p>是一个概率期望相关的题目， 但并没有使用期望的线性性质或者<span class="math inline">\(f[S]=\sum (f[T]+v_{S \to T}) \times p_{S \to T}\)</span> 这类常见的dp思路。</p>
<p>这个题目是从期望的定义出发， 也就是求出概率再乘权值得到期望。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4008" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>游戏进行<span class="math inline">\(r\)</span>轮， 有<span class="math inline">\(n\)</span>张牌， 每轮按照从小到大的顺序判断每张牌，如果这张牌已经出过就跳过，否则有<span class="math inline">\(p_i\)</span>的概率打出， 并造成<span class="math inline">\(d_i\)</span>点伤害。</p>
<p>求造成的期望伤害。</p>
<h1 id="解题报告">解题报告</h1>
<p><span class="math inline">\(r\)</span>轮游戏？ 实际是<span class="math inline">\(r\)</span>次出牌的机会，打出一张牌会消耗一次机会。</p>
<p>每轮游戏都是从小到大的顺序判断每张牌， 所以如果确定前<span class="math inline">\((i-1)\)</span>张牌，是否在<span class="math inline">\(r\)</span>轮中的某一轮打出或者没有打出过， 那么第<span class="math inline">\(i\)</span>张牌可以看做第<span class="math inline">\(1\)</span>张牌，不受任何其他牌的影响。</p>
<p>再一点， 就是<span class="math inline">\(r\)</span>轮游戏实际是没有区别的， 也就是说状态不需要记录具体每一轮游戏是否被<span class="math inline">\((i-1)\)</span>张牌占用， 只需要记录剩余多少轮游戏就可以。</p>
<p>如果确定前<span class="math inline">\((i-1)\)</span>个牌占用了若干轮游戏， 记录<span class="math inline">\(f[i][j]\)</span>表示到第<span class="math inline">\(i\)</span>张牌， 还剩<span class="math inline">\(j\)</span>轮游戏没有被占用的概率。 <span class="math display">\[
\left \lbrace \begin{aligned}
&amp;f[i][j]*(1-p_i)^j \to f[i+1][j]\\
&amp;f[i][j]*(1-(1-p_i)^j)  \to f[i+1][j-1]
\end{aligned} \right.
\]</span> 然后<span class="math inline">\(\text{Prob(i)}=\sum f[i][j]*(1-(1-p_i)^j)\)</span> . <span class="math display">\[
\text{ans} = \sum d_i * \text{Prob}(i)
\]</span> 搞定喽。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">233</span>;</div><div class="line">ff f[N][N],p[N],g[N]; </div><div class="line"><span class="keyword">int</span> n,r,d[N],test; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">slv</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f)); <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span>(g));</div><div class="line">    f[<span class="number">0</span>][r]=<span class="number">1.0</span>; rep(i,<span class="number">1</span>,n) &#123; </div><div class="line">        ff _p=<span class="number">1</span>; rep(j,<span class="number">0</span>,r) &#123; </div><div class="line">            <span class="keyword">if</span> (f[i<span class="number">-1</span>][j]) &#123; </div><div class="line">                f[i][j]+=f[i<span class="number">-1</span>][j]*_p; </div><div class="line">                <span class="keyword">if</span> (j) f[i][j<span class="number">-1</span>]+=f[i<span class="number">-1</span>][j]*(-_p+<span class="number">1</span>),g[i]+=f[i<span class="number">-1</span>][j]*(-_p+<span class="number">1</span>); </div><div class="line">            &#125; </div><div class="line">            _p*=(-p[i]+<span class="number">1</span>); </div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">    ff as=<span class="number">0</span>; </div><div class="line">    rep(i,<span class="number">1</span>,n) as+=g[i]*d[i]; </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>,as); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;test); <span class="keyword">while</span> (test--) &#123; </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;r); </div><div class="line">        rep(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%lf%d"</span>,&amp;p[i],&amp;d[i]); </div><div class="line">        slv(); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
            <tag> 概率期望 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4012】[HNOI2015]开店]]></title>
      <url>/bzoj4012/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个数据结构题， 有不优美的动态点分治做法和写起来比动态点分治还长的树链剖分+可持久化线段树做法。</p>
<p>思维难度： <del>没有？</del></p>
<p>就是代码题喽。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4012" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>强制在线， 每个节点的妖怪(?)有一个年龄， 树上的边带权， 多次单点询问年龄在<span class="math inline">\([l,r]\)</span>的妖怪到节点<span class="math inline">\(u\)</span>的距离和。</p>
<h1 id="解题报告">解题报告</h1>
<h3 id="先说一个很不优美的动态树分治的做法">先说一个很不优美的动态树分治的做法。</h3>
<p>记录每个点到经过的分治重心的距离， 在每个分治重心处把分治块中的点按照年龄进行排序， 查询的时候二分得到这个分支块中年龄<span class="math inline">\([l,r]\)</span>之间的点的个数和到分治重心的距离和。</p>
<p>因为点分治 在每个分治重心处得到答案时， 需要减去分治树下一层在同一块的答案， 所以还需要按照下一层所在的分支块为第一关键字， 年龄为第二关键字排序， 在查询的时候减去不合法的这部分数据。</p>
<h3 id="好-现在说一个代码更长的比较优美的做法">好， 现在说一个代码更长的比较优美的做法</h3>
<p>对于询问<span class="math inline">\((u, l, r)\)</span>, 需要求的答案为<span class="math inline">\(\text{ans}\)</span>： <span class="math display">\[
\begin{aligned}
\text{ans}&amp;=\sum_{x,\text{age}_x \in [l,r]} \text{dis}(u, x) \\
&amp;=\sum_{x, \text{age}_x \in [l,r]} \text{dep}(u)+\text{dep}(x)-2 \times \text{dep}(\text{lca}(u,x))
\end{aligned}
\]</span> 其中<span class="math inline">\(\sum_{x, \text{age}_x \in [l,r]} \text{dep}(u)+\text{dep}(x)\)</span>可以通过前缀相减<span class="math inline">\(O(1)\)</span>得到。</p>
<p>考虑求<span class="math inline">\(\sum_{x, \text{age}_x \in [l,r]} \text{dep}(\text{lca}(u,x))\)</span>, 考虑每条边的贡献， 也就是如果有一个点<span class="math inline">\(x( \text{age}_x \in [l,r])\)</span>, 那么<span class="math inline">\(\text{lca}(u,x)\)</span>到根的边贡献加<span class="math inline">\(1\)</span>。</p>
<p>做法是将<span class="math inline">\(x( \text{age}_x \in [l,r])\)</span>到根路径上的边的贡献加<span class="math inline">\(1\)</span>, 查询<span class="math inline">\(u\)</span>的时候，查询<span class="math inline">\(u\)</span>到根的路径上的贡献， 就成功收集<span class="math inline">\(\text{lca}(u,x)\)</span>到根的边贡献了。</p>
<p>在考虑<span class="math inline">\(\text{age}_x \in [l,r]\)</span> 的限制， 只需要按照<span class="math inline">\(\text{age}\)</span>把妖怪排序并依次加入，对统计贡献的线段树进行可持久化就好了。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for (int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for (int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for (int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">150010</span>; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">nde</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> l,r,tg,tm; ll sm;</div><div class="line">	nde(<span class="keyword">int</span> l=<span class="number">0</span>,<span class="keyword">int</span> r=<span class="number">0</span>,<span class="keyword">int</span> tg=<span class="number">0</span>,<span class="keyword">int</span> tm=<span class="number">0</span>,<span class="keyword">int</span> sm=<span class="number">0</span>)</div><div class="line">		 :l(l),r(r),tg(tg),tm(tm),sm(sm)&#123;&#125;</div><div class="line">&#125; v[<span class="number">20000000</span>]; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt,to,c; edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,<span class="keyword">int</span> c=<span class="number">0</span>) </div><div class="line">		:nxt(nxt),to(to),c(c)&#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="keyword">int</span> n,Q,A,hsh[N],od[N],hed[N],tot,cnt; </div><div class="line"><span class="keyword">int</span> sz[N],sn[N],rt[N],d[N],f[N],b[N],dn[N],bd[N],ct; </div><div class="line">ll sm[N],as,hv; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	<span class="keyword">return</span> hsh[x]&lt;hsh[y]; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> c)</span> </span>&#123; </div><div class="line">	e[++tot]=edge(hed[x],y,c),hed[x]=tot; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	sz[x]=<span class="number">1</span>,sn[x]=<span class="number">0</span>; <span class="keyword">int</span> y; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">		<span class="keyword">if</span> (y=e[i].to, y!=f[x]) &#123; </div><div class="line">			f[y]=x, d[y]=d[x]+e[i].c,dfs(y); </div><div class="line">			sz[x]+=sz[y]; <span class="keyword">if</span>(sz[y]&gt;sz[sn[x]]) sn[x]=y; </div><div class="line">		&#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> top)</span> </span>&#123; </div><div class="line">	b[x]=top,dn[x]=++cnt,bd[cnt]=x;<span class="keyword">int</span> y; </div><div class="line">	<span class="keyword">if</span> (sn[x]) &#123; dfs(sn[x],top); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">			<span class="keyword">if</span> (y=e[i].to, y!=f[x]&amp;&amp;y!=sn[x]) </div><div class="line">				dfs(y,y);</div><div class="line">	&#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fd</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> l=<span class="number">0</span>,r=n,md,rc=<span class="number">0</span>; </div><div class="line">	<span class="keyword">while</span> (l&lt;=r) &#123; md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (hsh[od[md]]&lt;=x) rc=md,l=md+<span class="number">1</span>; </div><div class="line">		<span class="keyword">else</span> r=md<span class="number">-1</span>; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> rc; </div><div class="line">&#125; </div><div class="line"><span class="keyword">inline</span> ll _len(<span class="keyword">int</span> l, <span class="keyword">int</span> r) &#123; </div><div class="line">	<span class="keyword">if</span> (d[l]&gt;d[r]) swap(l,r); <span class="keyword">return</span> d[r]-d[f[l]]; </div><div class="line">&#125; </div><div class="line"><span class="keyword">void</span> _mdf(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r,<span class="keyword">int</span> tm) &#123; </div><div class="line">	<span class="keyword">if</span> (v[x].tm!=tm) &#123; v[++cnt]=v[x],x=cnt,v[x].tm=tm;&#125; </div><div class="line">	<span class="keyword">if</span> (_l&lt;=l&amp;&amp;r&lt;=_r) ++v[x].tg; </div><div class="line">	<span class="keyword">else</span> &#123; <span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">		v[x].sm+=_len(bd[_l],bd[_r]); </div><div class="line">		<span class="keyword">if</span> (_r&lt;=md) _mdf(v[x].l,l,md,_l,_r,tm); </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (_l&gt;md) _mdf(v[x].r,md+<span class="number">1</span>,r,_l,_r,tm); </div><div class="line">			<span class="keyword">else</span> _mdf(v[x].l,l,md,_l,md,tm), _mdf(v[x].r,md+<span class="number">1</span>,r,md+<span class="number">1</span>,_r,tm); </div><div class="line">	&#125;</div><div class="line">&#125; </div><div class="line"><span class="keyword">void</span> _qry(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r,ll gt) &#123; </div><div class="line">	gt+=v[x].tg; </div><div class="line">	<span class="keyword">if</span> (_l&lt;=l&amp;&amp;r&lt;=_r) hv-=<span class="number">2l</span>l*(v[x].sm+gt*_len(bd[l],bd[r])); </div><div class="line">	<span class="keyword">else</span> &#123; <span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (_l&lt;=md) _qry(v[x].l,l,md,_l,_r,gt); </div><div class="line">		<span class="keyword">if</span> (_r&gt;md) _qry(v[x].r,md+<span class="number">1</span>,r,_l,_r,gt); </div><div class="line">	&#125;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> tm)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> fx=b[x]; <span class="keyword">while</span> (fx!=<span class="number">1</span>) &#123;</div><div class="line">		_mdf(rt[tm],<span class="number">1</span>,n,dn[fx],dn[x],tm); </div><div class="line">		x=f[fx],fx=b[x]; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (x!=<span class="number">1</span>) _mdf(rt[tm],<span class="number">1</span>,n,dn[<span class="number">1</span>],dn[x],tm); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> tm)</span> </span>&#123; </div><div class="line">	hv=<span class="number">1l</span>l*tm*d[x]+sm[tm]; </div><div class="line">	<span class="keyword">int</span> fx=b[x]; <span class="keyword">while</span> (fx!=<span class="number">1</span>) &#123;</div><div class="line">		_qry(rt[tm],<span class="number">1</span>,n,dn[fx],dn[x],<span class="number">0</span>); </div><div class="line">		x=f[fx],fx=b[x]; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (x!=<span class="number">1</span>) _qry(rt[tm],<span class="number">1</span>,n,dn[<span class="number">1</span>],dn[x],<span class="number">0</span>);</div><div class="line">	<span class="keyword">return</span> hv; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(n),in(Q),in(A); </div><div class="line">	rep(i,<span class="number">1</span>,n) in(hsh[i]),od[i]=i; </div><div class="line">	sort(od+<span class="number">1</span>,od+<span class="number">1</span>+n,cmp); </div><div class="line">	<span class="keyword">int</span> a,b,c; </div><div class="line">	rep(i,<span class="number">1</span>,n<span class="number">-1</span>) in(a),in(b),in(c),add(a,b,c),add(b,a,c); </div><div class="line">	dfs(<span class="number">1</span>), dfs(<span class="number">1</span>,<span class="number">1</span>); </div><div class="line">	rep(i,<span class="number">1</span>,n) &#123; rt[i]=rt[i<span class="number">-1</span>],modify(od[i],i),sm[i]=sm[i<span class="number">-1</span>]+d[od[i]]; &#125; </div><div class="line">	xep(I,Q) &#123; </div><div class="line">         in(c),in(a),in(b); </div><div class="line">		a=(a+as)%A, b=(b+as)%A; <span class="keyword">if</span>(a&gt;b) swap(a,b); </div><div class="line">		as=query(c,fd(b))-query(c,fd(a<span class="number">-1</span>)); </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,as); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树链剖分 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
            <tag> 动态点分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4011】[HNOI2015]落忆枫音]]></title>
      <url>/bzoj4011/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这个题目感觉还是比较奇妙的， 虽然难度<del>不是很大</del></p>
<p>做法主要还是一个拓扑图上的dp， 因为新图只是在原图（有向无环图）上添加了一条边， 所以做法肯定还是从有向无环图中拓展出来的。</p>
<p>比较重要的一个idea就是<span class="math inline">\(\text{ans}=\text{sum}-\text{illegal}\)</span></p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4011" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>在一个有向无环图上添加一条边， 问新图以<span class="math inline">\(1\)</span>为根的有向生成树的个数。</p>
<h1 id="解题报告">解题报告</h1>
<p>如果没有新加入的一条边， 那么原图（一个有向无环图）的有向生成树的个数为除点<span class="math inline">\(1\)</span>外所有点的入度的乘积, 记为<span class="math inline">\(\text{sum}\)</span>。</p>
<p>新加入一条边，如果这条边是<span class="math inline">\(x \rightarrow 1\)</span> 的形式， 那么显然这个对答案没有影响<sub>(≧▽≦)/</sub>啦啦啦</p>
<p>否则， 按照之前的方式算出了的答案， 其中有一部分是带环的， 并且<span class="math inline">\(x \rightarrow y\)</span>是这个方案中的边 。</p>
<p>考虑统计过气答案中的不合法方案， 可以发现 ，不合法的方案中<span class="math inline">\(y\)</span>点的入边选择的是<span class="math inline">\(x \rightarrow y\)</span> , 如果这个方案中， 存在<span class="math inline">\(y \rightarrow x\)</span>的路径， 那么就存在一个环。</p>
<p>如果<span class="math inline">\(S_{y \rightarrow x}\)</span>表示一条<span class="math inline">\(y \rightarrow x\)</span>的一条路径， 不合法方案数是<span class="math inline">\(\sum_{S_{y \rightarrow x}}\prod_{u\notin S}degree_u\)</span></p>
<p>令<span class="math inline">\(f[x]\)</span>表示<span class="math inline">\(\sum_{S_{y \rightarrow x}}\prod_{u \notin S} \text{degree}_u\)</span>， 只需要令<span class="math inline">\(\prod_{S_{y \rightarrow x}} \text{degree}_u = \frac{sum}{\prod_{u \in S} \text{degree}_u}\)</span> ,就非常好转移了。</p>
<p>最终的<span class="math inline">\(\text{ans}=\text{sum}-f[x]\)</span> .</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">1000000007</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> nxt,to; edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>) </div><div class="line">        :nxt(nxt),to(to)&#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="keyword">int</span> inv[N],n,m,hed[N],tot,in[N],x,y; ll as=<span class="number">1</span>; </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">    x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">    e[++tot]=edge(hed[x],y),++in[y],hed[x]=tot; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; </div><div class="line">    inv[<span class="number">1</span>]=<span class="number">1</span>; rep(i,<span class="number">2</span>,n) inv[i]=p<span class="number">-1l</span>l*(p/i)*inv[p%i]%p;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">topo</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(<span class="number">1</span>); <span class="keyword">int</span> o,nx;  </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> _in[N],f[N]; f[y]=as;  </div><div class="line">    rep(i,<span class="number">1</span>,n) _in[i]=in[i]; --_in[y]; </div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123; </div><div class="line">        o=q.front(); q.pop();  </div><div class="line">        f[o]=<span class="number">1l</span>l*f[o]*inv[in[o]]%p; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=hed[o];i;i=e[i].nxt) </div><div class="line">            <span class="keyword">if</span> (nx=e[i].to, _in[nx]) &#123; </div><div class="line">                f[nx]=(f[nx]+f[o])%p;</div><div class="line">                --_in[nx]; <span class="keyword">if</span> (!_in[nx]) q.push(nx); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    as=as-f[x]; <span class="keyword">if</span> (as&lt;<span class="number">0</span>) as+=p;  </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    read(n),read(m),read(x),read(y); <span class="keyword">int</span> a,b;  </div><div class="line">    xep(i,m) read(a),read(b),add(a,b); </div><div class="line">    ++in[y]; </div><div class="line">    rep(i,<span class="number">2</span>,n) as=as*in[i]%p; </div><div class="line">    <span class="keyword">if</span> (y==<span class="number">1</span>) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,as),<span class="number">0</span>; </div><div class="line">    init(), topo(); </div><div class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,as),<span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3995】[SDOI2015]道路修建]]></title>
      <url>/bzoj3995/</url>
      <content type="html"><![CDATA[<blockquote>
<p>应该算是比较丝薄无味的一个题目， 按照题目诞生的时间推断， 出题人应该是借鉴了SHOI2008的堵塞的交通，并且难度还降低了。</p>
<p>简单的来说， 是线段树维护连通性的裸题。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3995" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>维护两行点的区间最小生成树？ 支持修改边权的操作。</p>
<h1 id="解题报告">解题报告</h1>
<p>因为只有两行点么， 所以可以把同一列的两个点当做线段树上的一个节点。</p>
<p>维护四个信息， 对于区间<span class="math inline">\([l,r]\)</span>, 分别表示：</p>
<ol style="list-style-type: decimal">
<li><code>as[l,r]</code> : <span class="math inline">\([l,r]\)</span>之间的<span class="math inline">\(2(r-l+1)\)</span>个的的最小生成树；</li>
<li><code>ls[l,r]</code> : <span class="math inline">\([l,r]\)</span>之间， 第<span class="math inline">\(l\)</span>行的两个点不联通， 形成两个联通块的最小代价；</li>
<li><code>rs[l,r]</code> : <span class="math inline">\([l,r]\)</span>之间， 第<span class="math inline">\(r\)</span>行的两个点不连通， 形成两个联通块的最小代价；</li>
<li><code>ts[l,r]</code> : <span class="math inline">\([l,r]\)</span>之间， 第<span class="math inline">\(l\)</span>行的两个点不连通， 第<span class="math inline">\(r\)</span>行的两个点不连通， 形成三个联通块的最小代价。</li>
</ol>
<p>通过手动的讨论， 可以得到合并两个区间的转移：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">cmin(x.as,l.as+r.as+a); </div><div class="line">cmin(x.as,l.rs+r.as+a+b); </div><div class="line">cmin(x.as,l.as+r.ls+a+b); </div><div class="line">cmin(x.ls,l.ls+r.as+a); </div><div class="line">cmin(x.ls,l.ls+r.ls+a+b); </div><div class="line">cmin(x.ls,l.ts+r.as+a+b); </div><div class="line">cmin(x.rs,l.as+r.rs+a); </div><div class="line">cmin(x.rs,l.rs+r.rs+a+b); </div><div class="line">cmin(x.rs,l.as+r.ts+a+b); </div><div class="line">cmin(x.ts,l.ls+r.rs+a); </div><div class="line">cmin(x.ts,l.ls+r.ts+a+b); </div><div class="line">cmin(x.ts,l.ts+r.rs+a+b);</div></pre></td></tr></table></figure>
<p>奇怪的是， 这个题目就这样完结了。。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">60010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">500000000</span>; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> n,m,lo[N],lw[N],c[N]; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">four</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> as, ls, rs, ts; </div><div class="line">    four() &#123;as=ls=ts=ts=inf;&#125;</div><div class="line">    four(<span class="keyword">int</span> as,<span class="keyword">int</span> ls,<span class="keyword">int</span> rs,<span class="keyword">int</span> ts) </div><div class="line">        : as(as),ls(ls),rs(rs),ts(ts)&#123;&#125;</div><div class="line">&#125; s[N&lt;&lt;<span class="number">2</span>]; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">    x*=f; </div><div class="line">&#125; </div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;x,T a)</span></span>&#123;x=a&lt;x?a:x;&#125;</div><div class="line"><span class="function">four <span class="title">merge</span><span class="params">(four l, four r,<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (a&gt;b) swap(a,b) ; </div><div class="line">    <span class="function">four <span class="title">x</span><span class="params">(inf,inf,inf,inf)</span></span>; </div><div class="line">    cmin(x.as,l.as+r.as+a); </div><div class="line">    cmin(x.as,l.rs+r.as+a+b); </div><div class="line">    cmin(x.as,l.as+r.ls+a+b); </div><div class="line">    cmin(x.ls,l.ls+r.as+a); </div><div class="line">    cmin(x.ls,l.ls+r.ls+a+b); </div><div class="line">    cmin(x.ls,l.ts+r.as+a+b); </div><div class="line">    cmin(x.rs,l.as+r.rs+a); </div><div class="line">    cmin(x.rs,l.rs+r.rs+a+b); </div><div class="line">    cmin(x.rs,l.as+r.ts+a+b); </div><div class="line">    cmin(x.ts,l.ls+r.rs+a); </div><div class="line">    cmin(x.ts,l.ls+r.ts+a+b); </div><div class="line">    cmin(x.ts,l.ts+r.rs+a+b); </div><div class="line">    <span class="keyword">return</span> x; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (l==r) &#123; s[x]=four(c[l],<span class="number">0</span>,<span class="number">0</span>,inf);&#125; </div><div class="line">    <span class="keyword">else</span> &#123; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">        build(x&lt;&lt;<span class="number">1</span>, l, mid); </div><div class="line">        build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r); </div><div class="line">        s[x]=merge(s[x&lt;&lt;<span class="number">1</span>],s[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],lo[mid],lw[mid]); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (l==r) &#123; s[x]=four(c[l],<span class="number">0</span>,<span class="number">0</span>,inf);&#125;</div><div class="line">    <span class="keyword">else</span> &#123; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">         <span class="keyword">if</span> (p&lt;=mid) change(x&lt;&lt;<span class="number">1</span>,l,mid,p); </div><div class="line">         <span class="keyword">else</span> change(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,p); </div><div class="line">         s[x]=merge(s[x&lt;&lt;<span class="number">1</span>],s[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],lo[mid],lw[mid]); </div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> p)</span> </span>&#123; </div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; <span class="keyword">if</span> (mid==p) &#123; </div><div class="line">        s[x]=merge(s[x&lt;&lt;<span class="number">1</span>],s[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],lo[mid],lw[mid]); </div><div class="line">        <span class="keyword">return</span> ; </div><div class="line">    &#125; <span class="keyword">else</span> &#123; </div><div class="line">        <span class="keyword">if</span> (l==r) <span class="keyword">return</span> ;</div><div class="line">        <span class="keyword">if</span> (p&lt;=mid) modify(x&lt;&lt;<span class="number">1</span>,l,mid,p); </div><div class="line">        <span class="keyword">else</span> modify(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,p); </div><div class="line">        s[x]=merge(s[x&lt;&lt;<span class="number">1</span>],s[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],lo[mid],lw[mid]); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="function">four <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (_l&lt;=l&amp;&amp;r&lt;=_r) <span class="keyword">return</span> s[x]; </div><div class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">    <span class="keyword">if</span> (_r&lt;=mid) <span class="keyword">return</span> query(x&lt;&lt;<span class="number">1</span>,l,mid,_l,_r); </div><div class="line">    <span class="keyword">if</span> (_l&gt;mid) <span class="keyword">return</span> query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,_l,_r); </div><div class="line">    <span class="keyword">return</span> merge(query(x&lt;&lt;<span class="number">1</span>,l,mid,_l,_r),</div><div class="line">        query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,_l,_r),lo[mid],lw[mid]); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    in(n),in(m); </div><div class="line">    rep(i,<span class="number">1</span>,n<span class="number">-1</span>) in(lo[i]); rep(i,<span class="number">1</span>,n<span class="number">-1</span>) in(lw[i]); </div><div class="line">    rep(i,<span class="number">1</span>,n) in(c[i]); build(<span class="number">1</span>,<span class="number">1</span>,n); </div><div class="line">    <span class="keyword">char</span> tp[<span class="number">10</span>]; <span class="keyword">int</span> l,r,_l,_r,w; four an;  </div><div class="line">    xep(I, m) &#123; <span class="built_in">scanf</span>(<span class="string">"%s"</span>, tp); </div><div class="line">        <span class="keyword">if</span> (tp[<span class="number">0</span>]==<span class="string">'C'</span>) &#123; </div><div class="line">            in(l),in(r),in(_l),in(_r),in(w); </div><div class="line">            <span class="keyword">if</span> (r==_r) c[r]=w, change(<span class="number">1</span>,<span class="number">1</span>,n,r); </div><div class="line">            <span class="keyword">else</span> &#123; <span class="keyword">if</span> (r&gt;_r) swap(r,_r); </div><div class="line">                <span class="keyword">if</span> (l==<span class="number">1</span>) lo[r]=w; <span class="keyword">else</span> lw[r]=w; </div><div class="line">                modify(<span class="number">1</span>,<span class="number">1</span>,n,r);</div><div class="line">            &#125; </div><div class="line">        &#125; <span class="keyword">else</span> &#123; </div><div class="line">            in(l),in(r), an=query(<span class="number">1</span>,<span class="number">1</span>,n,l,r); </div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, an.as); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3742】Painting]]></title>
      <url>/bzoj3742/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一道国家集训队好几年前的互测题， 现场似乎被当做送分题？ 我是在XYM屠历年集训队题目的时候发现自己碰巧会做？</p>
<p>想我这样的菜鸡， 肯定只是碰巧好吧。 而且看我的常数那么大， 一定是人傻QWQ</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3742" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>给出一颗<span class="math inline">\(n\)</span>个节点的树，要给每一条边染一个<span class="math inline">\(1\)</span>~<span class="math inline">\((n-1)\)</span>的颜色，染颜色<span class="math inline">\(i\)</span>的代价为<span class="math inline">\(i\)</span>，要求同一个节点连出的所有边所染颜色都互不相同，求一个为整棵树染色的方案，使得代价之和尽量小。</p>
<h1 id="解题报告">解题报告</h1>
<p>先考虑设计状态， 令<span class="math inline">\(f[x][i]\)</span>表示与<span class="math inline">\(x\)</span>相连的边不能染<span class="math inline">\(i\)</span>这个颜色， <span class="math inline">\(x\)</span>的子树中的最小代价。</p>
<p>考虑从子节点向父亲节点进行转移， 那么可以枚举父亲节点与爷爷节点的边的颜色，然后是把<span class="math inline">\(1\)</span>~<span class="math inline">\((n-1)\)</span>这些颜色分配给儿子节点， 每个颜色只能使用一次， 颜色本身和颜色对应每个儿子有各自的代价， 这个转移是相当复杂的。</p>
<p>但仔细想一下哈， 这么强的限制竟然极其类似二分图的最大权匹配， 所以可以使用费用流或者KM这类的进行转移。</p>
<p>具体的， <span class="math inline">\(S\)</span>向每种颜色<span class="math inline">\(i\)</span>连流量<span class="math inline">\(1\)</span>, 费用<span class="math inline">\(i\)</span>的边, 每种颜色向每个儿子<span class="math inline">\(y\)</span>连流量<span class="math inline">\(1\)</span>, 费用<span class="math inline">\(f[y][i]\)</span>的边， 每个儿子向<span class="math inline">\(T\)</span>连流量<span class="math inline">\(1\)</span>， 费用<span class="math inline">\(0\)</span>的边。</p>
<p>然后这个题就在时限内解决了。。</p>
<p>后记： 写代码的时候大脑一热， 从网上找了一个zkw费用流的板子膜敲了一遍， 发现各种慢慢慢。。 以后还是老老实实spfa费用流（单增广）吧。</p>
<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">#include &lt;bits/stdc++.h&gt; </div><div class="line"> </div><div class="line">using namespace std;</div><div class="line"> </div><div class="line">#define rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </div><div class="line">#define REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </div><div class="line">#define VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </div><div class="line"> </div><div class="line">const int N=200; </div><div class="line">const int inf=1000000000; </div><div class="line"> </div><div class="line">struct edge &#123; </div><div class="line">    int nxt,to; edge(int nxt=0,int to=0)</div><div class="line">        :nxt(nxt),to(to) &#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;1]; </div><div class="line"> </div><div class="line">int n, f[N][N],tot,hed[N],da[N];</div><div class="line"> </div><div class="line">inline void add(int x,int y) &#123;</div><div class="line">    e[++tot]=edge(hed[x],y),hed[x]=tot; </div><div class="line">&#125; </div><div class="line"> </div><div class="line">namespace cst &#123; </div><div class="line">    struct edge &#123; </div><div class="line">        int nxt,to,f,c; edge() &#123;nxt=to=f=c=0;&#125;</div><div class="line">        edge(int nxt,int to,int f,int c)</div><div class="line">        :nxt(nxt),to(to),f(f),c(c)&#123;&#125;</div><div class="line">    &#125; e[N*N*4]; </div><div class="line">    int S,T,tot,hed[N*2],d[N*2],cst,piS; </div><div class="line">    deque&lt;int&gt; q; bool v[N*20]; </div><div class="line">    void clean() &#123;  </div><div class="line">        REP(i,0,tot) e[i]=edge(); </div><div class="line">        REP(i,0,N+N) hed[i]=0; </div><div class="line">        tot=1,cst=0,piS=0; </div><div class="line">    &#125; </div><div class="line">    void add(int x,int y,int f,int c) &#123; </div><div class="line">        e[++tot]=edge(hed[x],y,f,c), hed[x]=tot; </div><div class="line">        e[++tot]=edge(hed[y],x,0,-c), hed[y]=tot; </div><div class="line">    &#125;</div><div class="line">    bool label() &#123; </div><div class="line">        REP(i,S,T) d[i]=inf; d[T]=0,q.push_back(T);</div><div class="line">        int x,y,dt;</div><div class="line">        while (q.size()) &#123; x=q.front(); q.pop_front(); </div><div class="line">            for (int i=hed[x];i;i=e[i].nxt)</div><div class="line">                if (y=e[i].to,e[i^1].f&amp;&amp;(dt=d[x]-e[i].c)&lt;d[y])</div><div class="line">                    d[y]=dt, d[y]&lt;=(q.size()?d[q.front()]:0)</div><div class="line">                    ? q.push_front(y): q.push_back(y); </div><div class="line">        &#125;</div><div class="line">        REP(i,S,T) for(int j=hed[i];j;j=e[j].nxt) </div><div class="line">            e[j].c+=d[e[j].to]-d[i]; </div><div class="line">        piS+=d[S]; </div><div class="line">        return d[S]&lt;inf; </div><div class="line">    &#125; </div><div class="line">    bool dfs(int x,int lm) &#123; int l=lm,y,f; </div><div class="line">        v[x]=1; </div><div class="line">        if (x==T) return cst+=lm*piS,lm; </div><div class="line">        for (int i=hed[x];i;i=e[i].nxt)</div><div class="line">            if(y=e[i].to, e[i].f&amp;&amp;!v[y]&amp;&amp;!e[i].c) &#123; </div><div class="line">                f=dfs(y,e[i].f&lt;l?e[i].f:l),e[i].f-=f,e[i^1].f+=f; </div><div class="line">                l-=f; if (!l) return lm; </div><div class="line">            &#125; </div><div class="line">        return lm-l; </div><div class="line">    &#125; </div><div class="line">    int mcmf() &#123; </div><div class="line">        while (label()) do</div><div class="line">            REP(i,S,T) v[i]=0; </div><div class="line">        while (dfs(S,inf)); </div><div class="line">        return cst; </div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line">void who_s_your_daddy(int x,int fa) &#123; </div><div class="line">    da[x]=fa; int y; for(int i=hed[x];i;i=e[i].nxt) </div><div class="line">        if (y=e[i].to, y!=fa) who_s_your_daddy(y,x); </div><div class="line">&#125; </div><div class="line">int dfs(int x, int ba) &#123;</div><div class="line">    if (f[x][ba]!=-1) return f[x][ba]; </div><div class="line">    int y,ct=0; </div><div class="line">    for (int i=hed[x];i;i=e[i].nxt)</div><div class="line">        if (y=e[i].to, y!=da[x]) &#123; ++ct;  </div><div class="line">            for (int j=1;j&lt;n;++j) if (j!=ba) dfs(y,j); </div><div class="line">        &#125;</div><div class="line">    if (ct==0) return f[x][ba]=0; </div><div class="line">    cst::clean();   </div><div class="line">    cst::S=0,cst::T=n+ct; REP(i,1,n-1) </div><div class="line">        if (i!=ba) cst::add(cst::S,i,1,i); </div><div class="line">    ct=n-1; for (int i=hed[x];i;i=e[i].nxt) </div><div class="line">        if (y=e[i].to, y!=da[x]) &#123; ++ct; </div><div class="line">            for (int j=1; j&lt;n; ++j) if (j!=ba) </div><div class="line">                cst::add(j,ct,1,f[y][j]); </div><div class="line">            cst::add(ct,cst::T,1,0); </div><div class="line">        &#125; </div><div class="line">    f[x][ba]=cst::mcmf(); </div><div class="line">    return f[x][ba]; </div><div class="line">&#125; </div><div class="line">int main() &#123; </div><div class="line">    scanf("%d",&amp;n); </div><div class="line">    memset(f,-1,sizeof(f)); </div><div class="line">    rep(i,n-1) &#123; int x, y; scanf("%d%d",&amp;x,&amp;y); </div><div class="line">        add(x,y), add(y,x); </div><div class="line">    &#125; </div><div class="line">    who_s_your_daddy(1,0); </div><div class="line">    printf("%d\n",dfs(1,n)); </div><div class="line">    return 0; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> dp </tag>
            
            <tag> 费用流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4569】[Scoi2016]萌萌哒]]></title>
      <url>/bzoj4569/</url>
      <content type="html"><![CDATA[<blockquote>
<p>SCOI2016Day1 第三道</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4569" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>若干条件， 每次要求<span class="math inline">\(k \in [l,r]\)</span> , <span class="math inline">\(a_k=a_{ll+k-l}\)</span> , 求多少不存在前导零的大整数满足这些条件。</p>
<h1 id="解题报告">解题报告</h1>
<p>首先暴力的方法是每次用并查集暴力合并每个位置，考虑优化， 开始想到的是用线段树优化，但是涉及两个区间，不容易处理， 但是用ST表， 对于<span class="math inline">\(f[i][j]\)</span>, 也就是从位置<span class="math inline">\(i\)</span>开始的长度为<span class="math inline">\(2^j\)</span>的区间维护并查集信息，每次添加条件， 只需要找到指定的<span class="math inline">\(j\)</span>, 进行两次并查集合并。</p>
<p>最终的答案是<span class="math inline">\(2^{c-1} \times 9\)</span> , 其中<span class="math inline">\(c\)</span>是<span class="math inline">\(j=0\)</span>的并查集中联通块数。</p>
<p>在统计答案之前，进行标记的下方，也就是<span class="math inline">\(f[i][j] \rightarrow f[i][j-1]/f[i+(1&lt;&lt;j-1)][j-1]\)</span> ;</p>
<p>总的复杂度是<span class="math inline">\(O(m+n\log{n})\)</span>.</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">1000000007</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100100</span>; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> f[<span class="number">20</span>][N],n,m,tw[N]; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">    x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">if</span> (f[o][x]!=x) </div><div class="line">    f[o][x]=find(o,f[o][x]); <span class="keyword">return</span> f[o][x]; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">    x=find(o,x), y=find(o,y); <span class="keyword">if</span>(x!=y) f[o][x]=y; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    in(n),in(m),tw[<span class="number">1</span>]=<span class="number">0</span>; </div><div class="line">    rep(i,<span class="number">2</span>,n) tw[i]=tw[i/<span class="number">2</span>]+<span class="number">1</span>; </div><div class="line">    rep(i,<span class="number">0</span>,tw[n]) rep(j,<span class="number">1</span>,n-(<span class="number">1</span>&lt;&lt;i)+<span class="number">1</span>) f[i][j]=j; </div><div class="line">    <span class="keyword">int</span> l,r,_l,_r,o; </div><div class="line">    xep(I,m) &#123; in(l), in(r),in(_l),in(_r),o=tw[r-l+<span class="number">1</span>];</div><div class="line">        merge(o,l,_l), merge(o,r-(<span class="number">1</span>&lt;&lt;o)+<span class="number">1</span>,_r-(<span class="number">1</span>&lt;&lt;o)+<span class="number">1</span>); </div><div class="line">    &#125; </div><div class="line">    vep(i,tw[n],<span class="number">1</span>) rep(j,<span class="number">1</span>,n-(<span class="number">1</span>&lt;&lt;i)+<span class="number">1</span>) &#123; </div><div class="line">        <span class="keyword">int</span> rt=find(i,j); <span class="keyword">if</span> (j!=rt) </div><div class="line">            merge(i<span class="number">-1</span>,j,rt), merge(i<span class="number">-1</span>,j+(<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>),rt+(<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>)); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>, as=<span class="number">9</span>; </div><div class="line">    rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (find(<span class="number">0</span>,i)==i) ++cnt; </div><div class="line">    xep(i,cnt<span class="number">-1</span>) as=<span class="number">1l</span>l*as*<span class="number">10</span>%p; </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, as); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> ST表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4568】[Scoi2016]幸运数字]]></title>
      <url>/bzoj4568/</url>
      <content type="html"><![CDATA[<blockquote>
<p>SCOI2016Day1 第二道</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4568" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>每个点上有一个权值，多次查询一条路径每个点任意选</p>
<h1 id="解题报告">解题报告</h1>
<p>首先，每个点任意选或不选的最大异或和是线性基的裸题，所以考虑将一条路径的线性基合并；</p>
<p>这个显然可以使用动态点分治完成， 记录每个点到点分树上的每个祖先的路径线性基(空间复杂度<span class="math inline">\(O(n\log{n}\log{X})\)</span>), 预处理的时间是<span class="math inline">\(O(n\log{n}\log{X})\)</span>, 查询的时候通过<span class="math inline">\(O(\log{n})\)</span>确定路径在点分树上的<code>lca</code>, 然后在<code>lca</code>(也就是一个重心处）将两个线性基合并， 复杂度是<span class="math inline">\(O(q\times(\log{n}+\log^2{p}))\)</span> .</p>
<p>然而我却使用了一个复杂度非常烂的算法（写的时候以为是一样的。。。） ， 倍增+线性基合并。</p>
<p>首先预处理的时候需要做<span class="math inline">\(O(n\log{n}\log^2{X})\)</span>, 因为线性基的合并是<span class="math inline">\(O(\log^2{P})\)</span>的。</p>
<p>查询的时候我更加愚蠢的跳了<span class="math inline">\(\log{n}\)</span>次， 每次都合并了线性基。。所以复杂度是<span class="math inline">\(O(q\times\log{n}\log^2{X})\)</span> .</p>
<p>然后竟然还过了。。艹？</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> W(x,w) (((x)&gt;&gt;w)&amp;1)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20010</span>; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">base</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> c; ll a[<span class="number">65</span>]; base() &#123;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a)),c=<span class="number">0</span>;&#125;; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(ll x)</span> </span>&#123; </div><div class="line">		vep(i,<span class="number">60</span>,<span class="number">0</span>) <span class="keyword">if</span> (W(x,i)) &#123; </div><div class="line">			<span class="keyword">if</span> (!a[i]) &#123; ++c,a[i]=x; <span class="keyword">break</span>;&#125; </div><div class="line">			<span class="keyword">else</span> &#123; x^=a[i]; <span class="keyword">if</span> (!x) <span class="keyword">break</span>;&#125; </div><div class="line">		&#125; </div><div class="line">	&#125; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; </div><div class="line">		<span class="built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">		vep(i,<span class="number">60</span>,<span class="number">0</span>) <span class="keyword">if</span> (a[i]) <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">":"</span>&lt;&lt;a[i]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">	&#125; </div><div class="line">&#125; b[N][<span class="number">16</span>]; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt,to; edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>) </div><div class="line">		:nxt(nxt),to(to) &#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="keyword">int</span> n,q,hed[N],f[N][<span class="number">16</span>],tot,de[N]; ll g[N];</div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(T &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	e[++tot]=edge(hed[x],y),hed[x]=tot; </div><div class="line">&#125; </div><div class="line"><span class="function">base <span class="title">merge</span><span class="params">(base x, base y)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x.c&gt;y.c) swap(x,y); </div><div class="line">	xep(i, <span class="number">61</span>) <span class="keyword">if</span> (x.a[i]) y.ins(x.a[i]); </div><div class="line">	<span class="keyword">return</span> y; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	b[x][<span class="number">0</span>].ins(g[x]); de[x]=de[f[x][<span class="number">0</span>]]+<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;f[x][i];++i) &#123; </div><div class="line">		f[x][i+<span class="number">1</span>]=f[f[x][i]][i]; </div><div class="line">		b[x][i+<span class="number">1</span>]=merge(b[x][i],b[f[x][i]][i]); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">int</span> y; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">		<span class="keyword">if</span> (y=e[i].to, y!=f[x][<span class="number">0</span>])  </div><div class="line">			f[y][<span class="number">0</span>]=x,build(y); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (de[x]&lt;de[y]) swap(x,y); </div><div class="line">	base as; <span class="keyword">int</span> dta=de[x]-de[y];</div><div class="line">	vep(i,<span class="number">14</span>,<span class="number">0</span>) <span class="keyword">if</span> (W(dta,i)) </div><div class="line">		as=merge(as, b[x][i]), x=f[x][i]; </div><div class="line">	<span class="keyword">if</span> (x!=y) &#123; </div><div class="line">		vep(i,<span class="number">14</span>,<span class="number">0</span>) <span class="keyword">if</span> (f[x][i]!=f[y][i]) &#123;  </div><div class="line">			as=merge(as, b[x][i]), as=merge(as, b[y][i]); </div><div class="line">			x=f[x][i], y=f[y][i]; </div><div class="line">		&#125;</div><div class="line">		as=merge(as,b[x][<span class="number">0</span>]), as=merge(as,b[y][<span class="number">0</span>]); </div><div class="line">		x=f[x][<span class="number">0</span>], y=f[y][<span class="number">0</span>];</div><div class="line">	&#125;</div><div class="line">	as=merge(as,b[x][<span class="number">0</span>]); </div><div class="line">	ll ans=<span class="number">0</span>; </div><div class="line">	vep(i,<span class="number">60</span>,<span class="number">0</span>) <span class="keyword">if</span> ((ans^as.a[i])&gt;ans) </div><div class="line">		ans=ans^as.a[i]; </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans); </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(n), in(q); rep(i,<span class="number">1</span>,n) in(g[i]); <span class="keyword">int</span> x,y;  </div><div class="line">	xep(i,n<span class="number">-1</span>) in(x),in(y),add(x,y),add(y,x); </div><div class="line">	build(<span class="number">1</span>); </div><div class="line">	xep(i,q) &#123; in(x),in(y); query(x,y);&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 倍增 </tag>
            
            <tag> 动态点分治 </tag>
            
            <tag> 线性基 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4567】[Scoi2016]背单词]]></title>
      <url>/bzoj4567/</url>
      <content type="html"><![CDATA[<blockquote>
<p>SCOI2016Day1 第一道</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4567" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>这个题目的意思非常的模糊， 读到最后才理解了， 是确定一个字符串的编号，如果存在一个字符串后缀的编号<span class="math inline">\(&gt;\)</span>大于这个字符串，那么要付出<span class="math inline">\(n^2\)</span>的巨额代价，否则有付出编号减去后缀最大编号的代价。</p>
<h1 id="解题报告">解题报告</h1>
<p>首先后缀倒过来就是前缀，可以通过trie树+重建树得到字符串之间的后缀关系。</p>
<p>需要一个结论， 就是因为后缀靠后的代价太高， 显然需要让所有的后缀的编号都小于当前串。</p>
<p>在重构的树上， 有一个可以通过推广得到的结论， 就是编号一定先编完一棵子树再进入另外的一棵子树。</p>
<p>首先题目中“编号减去后缀最大的编号”相当于当前点的编号减去树上父亲节点的编号。</p>
<p>考虑二叉树的情况， 联想到’holidy’那个题目， 如下图(1)(2), 其中第一个图显然更优。</p>
<div class="figure">
<img src="/bzoj4567/1.png">

</div>
<p>在二叉树中，显然先进入较短的一侧可以付出更小的代价， 所以推广到多叉树，先进入<code>size</code>较小的子树代价更小。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">110001</span>; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt,to; edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>) </div><div class="line">		:nxt(nxt),to(to) &#123;&#125;</div><div class="line">&#125; e[N]; </div><div class="line"><span class="keyword">int</span> hed[N],tot,n,sn[N*<span class="number">5</span>][<span class="number">26</span>],na[N*<span class="number">5</span>],cnt=<span class="number">1</span>,rt=<span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> sz[N],rc; <span class="keyword">char</span> s[N*<span class="number">5</span>]; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	e[++tot]=edge(hed[x],y), hed[x]=tot; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rvs_ins</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> id)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> x=rt,no; vep(i,<span class="built_in">strlen</span>(s)<span class="number">-1</span>,<span class="number">0</span>) &#123; </div><div class="line">		no=s[i]-<span class="string">'a'</span>; <span class="keyword">if</span> (!sn[x][no]) sn[x][no]=++cnt; </div><div class="line">		x=sn[x][no]; <span class="keyword">if</span> (i==<span class="number">0</span>) na[x]=id+<span class="number">1</span>;  </div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> f)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (na[x]) add(f,na[x]), f=na[x]; </div><div class="line">	xep(i,<span class="number">26</span>) <span class="keyword">if</span> (sn[x][i]) build(sn[x][i],f); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	sz[x]=<span class="number">1</span>; <span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">		dfs(e[i].to), sz[x]+=sz[e[i].to]; </div><div class="line">&#125; </div><div class="line"><span class="keyword">int</span> v[N],od[N]; <span class="keyword">long</span> <span class="keyword">long</span> as;  </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">got</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fm)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x) v[x]=++rc, as+=v[x]-v[fm]; </div><div class="line">	<span class="built_in">vector</span>&lt;pii&gt; ss; </div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">		ss.push_back(mp(sz[e[i].to],e[i].to)); </div><div class="line">	sort(ss.begin(),ss.end()); </div><div class="line">	xep(i,ss.size()) got(ss[i].second,x); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);  </div><div class="line">	xep(i,n) <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s), rvs_ins(s,i); </div><div class="line">	build(<span class="number">1</span>,<span class="number">0</span>), dfs(<span class="number">0</span>), got(<span class="number">0</span>,<span class="number">-1</span>); </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,as); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 字符串题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> trie树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[codechef-选做-3]]></title>
      <url>/cc3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>仍然在做CC中简单一点的题目</p>
</blockquote>
<a id="more"></a>
<h1 id="cc-gerald07chef-and-graph-queries">【CC GERALD07】Chef and Graph Queries</h1>
<h2 id="题目大意">题目大意</h2>
<p>保留区间<span class="math inline">\([l,r]\)</span>的边，问图的联通块个数。</p>
<h2 id="解题报告">解题报告</h2>
<p>这个题目是一个动态树裸题，结合扫描线+离线。</p>
<p>使用LCT维护一个最大时间生成树，如果当前边相连的两个点是不连通的，那么直接加入当前边， 否则每次查询一条路径的最早加入的边， 删除后再加入当前边。</p>
<p>用一个树状数组维护单点修改区间和，边加入删除的时候在树状数组上也加入删除。</p>
<p>然后联通块数=点数-边数；</p>
<h2 id="代码">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1000000000</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">query</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> l,r,id; query(<span class="keyword">int</span> l=<span class="number">0</span>,<span class="keyword">int</span> r=<span class="number">0</span>,<span class="keyword">int</span> id=<span class="number">0</span>):l(l),r(r),id(id)&#123;&#125;</div><div class="line">&#125; qry[N]; </div><div class="line">	</div><div class="line"><span class="keyword">int</span> n,T,m,q,bt[N],as[N]; </div><div class="line">pii pth[N];</div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;x, T a)</span> </span>&#123; <span class="keyword">if</span> (a&lt;x) x=a; &#125;</div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(T &amp;x)</span> </span>&#123; <span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">int</span> f=<span class="number">1</span>; <span class="keyword">for</span>(;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar())<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>; ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; x*=f; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">namespace</span> LCT &#123; </div><div class="line">	<span class="keyword">int</span> sn[N*<span class="number">2</span>][<span class="number">2</span>],f[N*<span class="number">2</span>],mn[N*<span class="number">2</span>],v[N*<span class="number">2</span>],rv[N*<span class="number">2</span>]; </div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">birth</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">		sn[x][<span class="number">0</span>]=sn[x][<span class="number">1</span>]=f[x]=rv[x]=<span class="number">0</span>,mn[x]=v[x]=((x&gt;n)?x:INF); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">inline</span> <span class="keyword">int</span> _d(<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> sn[f[x]][<span class="number">1</span>]==x;&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> !f[x]||(sn[f[x]][<span class="number">0</span>]!=x&amp;&amp;sn[f[x]][<span class="number">1</span>]!=x);&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">		mn[x]=v[x]; </div><div class="line">		<span class="keyword">if</span> (sn[x][<span class="number">0</span>]) cmin(mn[x],mn[sn[x][<span class="number">0</span>]]); </div><div class="line">		<span class="keyword">if</span> (sn[x][<span class="number">1</span>]) cmin(mn[x],mn[sn[x][<span class="number">1</span>]]); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">inline</span> <span class="keyword">void</span> _rev(<span class="keyword">int</span> x) &#123;</div><div class="line">		<span class="keyword">if</span> (!x) <span class="keyword">return</span>; swap(sn[x][<span class="number">0</span>],sn[x][<span class="number">1</span>]),rv[x]^=<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">		<span class="keyword">if</span> (rv[x]) _rev(sn[x][<span class="number">0</span>]),_rev(sn[x][<span class="number">1</span>]),rv[x]=<span class="number">0</span>; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	 	<span class="keyword">int</span> y=f[x],d=_d(x),z=f[y]; </div><div class="line">	 	f[x]=z; <span class="keyword">if</span> (!isroot(y)) sn[z][_d(y)]=x; </div><div class="line">	 	<span class="keyword">if</span> (sn[x][d^<span class="number">1</span>])f[sn[x][d^<span class="number">1</span>]]=y; sn[y][d]=sn[x][d^<span class="number">1</span>]; </div><div class="line">	 	sn[x][d^<span class="number">1</span>]=y, f[y]=x, up(y); </div><div class="line">	&#125; </div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	 	<span class="keyword">static</span> <span class="keyword">int</span> stk[N],tp,nw; tp=<span class="number">0</span>,nw=x; </div><div class="line">		<span class="keyword">while</span> (!isroot(nw)) stk[++tp]=nw,nw=f[nw]; </div><div class="line">		stk[++tp]=nw; <span class="keyword">while</span>(tp) down(stk[tp--]);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> y=f[x];!isroot(x);rotate(x),y=f[x])</div><div class="line">			<span class="keyword">if</span> (isroot(y)) <span class="keyword">continue</span>; </div><div class="line">			<span class="keyword">else</span> rotate((_d(y)==_d(x)?y:x)); </div><div class="line">		up(x); </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	 	<span class="keyword">for</span> (<span class="keyword">int</span> r=<span class="number">0</span>;x;r=x,x=f[x])splay(x),sn[x][<span class="number">1</span>]=r; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mkroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">		access(x),splay(x),_rev(x); </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">		access(x),splay(x);<span class="keyword">while</span>(sn[x][<span class="number">0</span>])x=sn[x][<span class="number">0</span>];<span class="keyword">return</span> x;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">		mkroot(x),f[x]=y,access(x);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cutf</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">		access(x),splay(x),f[sn[x][<span class="number">0</span>]]=<span class="number">0</span>,sn[x][<span class="number">0</span>]=<span class="number">0</span>,up(x);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">		mkroot(x), cutf(y); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">inline</span> <span class="keyword">int</span> _min(<span class="keyword">int</span> x,<span class="keyword">int</span> y) &#123; </div><div class="line">		mkroot(x),access(y),splay(y);<span class="keyword">return</span> mn[y];</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cnct</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> x!=y&amp;&amp;root(x)==root(y); </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> LCT; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(query a, query b)</span> </span>&#123;<span class="keyword">return</span> a.r&lt;b.r;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> v)</span> </span>&#123;<span class="keyword">for</span>(;x&lt;=m;x+=x&amp;(-x))bt[x]+=v;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qury</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> sm=<span class="number">0</span>)</span> </span>&#123;<span class="keyword">for</span>(;x;x-=x&amp;(-x))sm+=bt[x];<span class="keyword">return</span> sm;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (in(T);T;--T) &#123; </div><div class="line">		in(n),in(m),in(q); <span class="keyword">int</span> x,y,z;</div><div class="line">		REP(i,<span class="number">1</span>,m) in(x),in(y),pth[i]=mp(x,y); </div><div class="line">		REP(i,<span class="number">1</span>,q) in(x),in(y),qry[i]=query(x,y,i); </div><div class="line">		sort(qry+<span class="number">1</span>, qry+<span class="number">1</span>+q, cmp); <span class="keyword">int</span> j=<span class="number">0</span>; </div><div class="line">		REP(i,<span class="number">0</span>,n+m) birth(i);REP(i,<span class="number">0</span>,m)bt[i]=<span class="number">0</span>; </div><div class="line">		REP(i,<span class="number">1</span>,m) &#123; x=pth[i].fi,y=pth[i].se;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span> (cnct(x,y)) &#123; </div><div class="line">				z=_min(x,y); </div><div class="line">				cut(pth[z-n].fi,z),cut(pth[z-n].se,z), add(z-n, <span class="number">-1</span>); </div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (x!=y) link(x,i+n),link(y,i+n),add(i,<span class="number">1</span>); </div><div class="line">			<span class="keyword">if</span> (qry[j+<span class="number">1</span>].r==i) &#123; <span class="keyword">int</span> as2=qury(i),as1; </div><div class="line">				<span class="keyword">while</span> (j&lt;q&amp;&amp;qry[j+<span class="number">1</span>].r==i) </div><div class="line">					as1=qury(qry[++j].l<span class="number">-1</span>),as[qry[j].id]=as2-as1;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		REP(i,<span class="number">1</span>,q) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-as[i]); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-diftripdifferent-trips">【CC DIFTRIP】Different Trips</h1>
<h2 id="题目大意-1">题目大意</h2>
<p>每个点的权值是度数，问从每个点到根的所有字符串中，本质不同的子串个数。</p>
<h2 id="解题报告-1">解题报告</h2>
<p>就用每个点的度数离散一下， 做了一个后缀自动机， 字符集的大小开的是<span class="math inline">\(\sqrt{n}\)</span>的，因为本质不同的度数最多有<span class="math inline">\(\sqrt{n}\)</span>个，然后果断跑得好慢（<del>比map还慢</del>)</p>
<p>貌似标算是树上的后缀数组。</p>
<p>广义后缀自动机是从这个地方学的： <a href="%22http://dwjshift.logdown.com/posts/304570%22">传送门</a></p>
<h2 id="代码-1">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>;</div><div class="line"><span class="keyword">int</span> ls[N],rt,ct,sn[N*<span class="number">2</span>][<span class="number">320</span>],pa[N*<span class="number">2</span>],le[N*<span class="number">2</span>],n,hh[N],tt;</div><div class="line">vi nxt[N]; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">birth</span><span class="params">(<span class="keyword">int</span> len,<span class="keyword">int</span> *go,<span class="keyword">int</span> par=<span class="number">0</span>)</span> </span>&#123;</div><div class="line">	++ct, le[ct]=len, pa[ct]=par; </div><div class="line">	<span class="keyword">if</span> (go!=<span class="literal">NULL</span>) REP(i,<span class="number">1</span>,tt) sn[ct][i]=go[i]; </div><div class="line">	<span class="keyword">return</span> ct;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ls)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!hh[x])hh[x]=++tt; x=hh[x];</div><div class="line">	<span class="keyword">int</span> p=ls;  </div><div class="line">	<span class="keyword">if</span> (sn[p][x]&amp;&amp;le[sn[p][x]]==le[p]+<span class="number">1</span>) </div><div class="line">		<span class="keyword">return</span> sn[p][x];</div><div class="line">	<span class="keyword">if</span> (sn[p][x]) &#123;</div><div class="line">		<span class="keyword">int</span> q=sn[p][x],nq=birth(le[p]+<span class="number">1</span>,sn[q],pa[q]); </div><div class="line">		pa[q]=nq; <span class="keyword">while</span>(p&amp;&amp;sn[p][x]==q)sn[p][x]=nq,p=pa[p]; </div><div class="line">		<span class="keyword">return</span> nq; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> np=birth(le[p]+<span class="number">1</span>,<span class="literal">NULL</span>); </div><div class="line">	<span class="keyword">while</span> (p&amp;&amp;!sn[p][x]) sn[p][x]=np,p=pa[p];</div><div class="line">	<span class="keyword">if</span> (!p) pa[np]=rt; <span class="keyword">else</span> &#123; </div><div class="line">		<span class="keyword">int</span> q=sn[p][x]; </div><div class="line">		<span class="keyword">if</span> (le[q]==le[p]+<span class="number">1</span>) pa[np]=q; </div><div class="line">		<span class="keyword">else</span> &#123; 	</div><div class="line">			<span class="keyword">int</span> nq=birth(le[p]+<span class="number">1</span>,sn[q],pa[q]); </div><div class="line">			pa[q]=pa[np]=nq;</div><div class="line">			<span class="keyword">while</span>(p&amp;&amp;sn[p][x]==q)sn[p][x]=nq,p=pa[p];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> np;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> f)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> sz=(f!=<span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> y:nxt[x])<span class="keyword">if</span>(y!=f)++sz;</div><div class="line">	ls[x]=ins(sz,ls[f]); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> y:nxt[x])<span class="keyword">if</span>(y!=f)dfs(y,x);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); <span class="keyword">int</span> x,y;</div><div class="line">	rep(i,n<span class="number">-1</span>) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y),nxt[x].pb(y),nxt[y].pb(x);</div><div class="line">	ls[<span class="number">0</span>]=rt=ct=<span class="number">1</span>, dfs(<span class="number">1</span>,<span class="number">0</span>); ll as=<span class="number">0</span>; </div><div class="line">	REP(i,<span class="number">2</span>,ct) as+=le[i]-le[pa[i]];</div><div class="line">	<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, as),<span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-evilbookevil-book">【CC EVILBOOK】Evil Book</h1>
<h2 id="题目大意-2">题目大意</h2>
<p>每一个物品可以通过付出<span class="math inline">\(C_i\)</span>的代价得到<span class="math inline">\(M_i\)</span>的收益， 可以通过失去<span class="math inline">\(X\)</span>点收益使某一个物品的<span class="math inline">\(C_i\)</span>和<span class="math inline">\(M_i\)</span>同时<span class="math inline">\(\div 3\)</span> , 问获得<span class="math inline">\(666\)</span>点收益，最少付出多少的代价。</p>
<h2 id="解题报告-2">解题报告</h2>
<p>我竟然是一个连暴力都打不好的蒟蒻。。。</p>
<p>考虑最暴力的求解方法， 枚举每个物品选择的之前进行了多少次的<span class="math inline">\(\div 3\)</span>操作，因为物品的收益和代价都是<span class="math inline">\(\leqslant 10^7\)</span>的， 所以复杂度是<span class="math inline">\((\log_3 10^7)^n\)</span>, （<del>这就有点太暴力了</del>)</p>
<p>优化这个暴力？每个物品的<span class="math inline">\(M\)</span>如果不小于<span class="math inline">\(666*3\)</span>, 那么显然是很多余的（因为我们只需要<span class="math inline">\(666\)</span>), 就可以必要的使用一次<span class="math inline">\(\div 3\)</span>操作；</p>
<p>如果付出的<span class="math inline">\(X\)</span>已经超过了可以获得的<span class="math inline">\(M\)</span>？那就不可能选了对吧。题目中<span class="math inline">\(X\)</span>有一个下界，是<span class="math inline">\(10\)</span>, 可以发现， 如果对<span class="math inline">\(666\)</span>进行<span class="math inline">\(2\)</span>次<span class="math inline">\(\div 3\)</span>操作，那么<span class="math inline">\(2X&gt;666 \div 3^2\)</span>,也就是<span class="math inline">\(M\)</span>消到<span class="math inline">\(666\)</span>后,最多进行<span class="math inline">\(2\)</span>次<span class="math inline">\(\div 3\)</span>操作。</p>
<p>那么一个物品可能进行的<span class="math inline">\(\div 3\)</span>操作数只有四种连续的情况，现在复杂度是<span class="math inline">\(4^n\)</span>了，这就可以过了？ 再顺手加一个最优化剪枝， 最对进行的<span class="math inline">\(\div 3\)</span>操作次数强加一个递增的顺序，就跑得比较快了。</p>
<h2 id="代码-2">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">const</span> ff eps=<span class="number">1e-9</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">21</span>; </div><div class="line"><span class="keyword">int</span> c[N],m[N],n,X,pd[N];</div><div class="line">ff sm,ans;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> us,<span class="keyword">int</span> pre,ff iu,ff hv,ff co)</span></span>&#123;</div><div class="line"><span class="comment">//	cout&lt;&lt;hv&lt;&lt;' '&lt;&lt;co&lt;&lt;endl; </span></div><div class="line">	<span class="keyword">if</span> (hv&gt;<span class="number">666</span>-eps)&#123; ans=min(ans,co); <span class="keyword">return</span>;&#125;</div><div class="line">	<span class="keyword">if</span> (hv+sm/iu&lt;<span class="number">666</span>-eps) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span> (co&gt;ans) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span> (us*X&gt;hv) <span class="keyword">return</span>;</div><div class="line">	REP(i,pre,n) <span class="keyword">if</span> (pd[i]==<span class="number">0</span>&amp;&amp;us*X&lt;m[i]/iu)&#123;</div><div class="line">		pd[i]=<span class="number">1</span>; sm-=m[i];</div><div class="line">		dfs(us,i+<span class="number">1</span>,iu,hv-us*X+m[i]/iu,co+c[i]/iu);</div><div class="line">		pd[i]=<span class="number">0</span>; sm+=m[i];</div><div class="line">	&#125;</div><div class="line">	dfs(us+<span class="number">1</span>,<span class="number">1</span>,iu*<span class="number">3</span>,hv,co);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;X); sm=<span class="number">0</span>;</div><div class="line">	REP(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;c[i],&amp;m[i]), sm+=m[i];</div><div class="line">	<span class="keyword">if</span> (sm&lt;<span class="number">666</span>) &#123; <span class="built_in">puts</span>(<span class="string">"impossible"</span>); <span class="keyword">return</span>;&#125;</div><div class="line">	ans=<span class="number">1e18</span>; dfs(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%.0lf\n"</span>,ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">	<span class="keyword">for</span> (;t;t--) solve();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-leboxeslittle-elephant-and-boxes">【CC LEBOXES】Little Elephant and Boxes</h1>
<h2 id="题目大意-3">题目大意</h2>
<p><span class="math inline">\(n\)</span>个宝箱，每一个宝箱有<span class="math inline">\(p_i/100\)</span>的概率转换成<span class="math inline">\(V_i\)</span>的dollars, 有<span class="math inline">\(1-\frac{p_i}{100}\)</span>的概率转成<span class="math inline">\(1\)</span>个diamond.</p>
<p><span class="math inline">\(m\)</span>个商品，每个需要<span class="math inline">\(C_i\)</span>的dollars和<span class="math inline">\(D_i\)</span>的diamonds.</p>
<p>问聪明至极的情况下， 买到的商品数的期望值。</p>
<h2 id="解题报告-3">解题报告</h2>
<p>首先<span class="math inline">\(n\)</span>的范围十分的精妙，<span class="math inline">\(2^n\)</span>跑不了， <span class="math inline">\(2^{n/2}\)</span>次方没问题， 像极了meet in the middle的数据范围。</p>
<p>虽然dollars的数量级很大，但diamond很小， 考虑让diamond数和买到的商品数做下标， 具体的，<span class="math inline">\(f[i][j]\)</span>表示使用<span class="math inline">\(i\)</span>个钻石，买<span class="math inline">\(j\)</span>个商品，最少需要多少的dollars, 这个可以用O/1背包解决。</p>
<p>对 <span class="math inline">\(2^x\)</span> ， 即前 <span class="math inline">\(x\)</span> 个商品的转换情况进行预处理，得到 <span class="math inline">\(sto_{i,j}(x,y)\)</span> , 表示得到<span class="math inline">\(i\)</span>个钻石和不超过<span class="math inline">\(x\)</span>个dollars，的概率为 <span class="math inline">\(y\)</span> .</p>
<p>对<span class="math inline">\(2^{n-x}\)</span>， 即剩下的商品进行查询， 通过二分+查表， 得到期望值。</p>
<p>复杂度<span class="math inline">\(O(2^x\log 2^x+n^3+2^{n-x} \log 2^x)\)</span></p>
<h2 id="代码-3">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> lobo lower_bound</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (x.size()) </span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,ff&gt; pif; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">35</span>; </div><div class="line"><span class="keyword">int</span> les[N][N],T,n,m,B,v[N],c[N],d[N],p[N]; </div><div class="line"><span class="built_in">vector</span>&lt;pif&gt; sto[N]; </div><div class="line">ff as; </div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;x, T a)</span> </span>&#123;<span class="keyword">if</span> (a&lt;x) x=a;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> dos,<span class="keyword">int</span> das,ff pr)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x&gt;B) &#123; sto[das].pb(mp(dos,pr)); <span class="keyword">return</span>;&#125; </div><div class="line">	dfs(x+<span class="number">1</span>,dos+v[x],das,pr*((ff)p[x]/<span class="number">100.00</span>)); </div><div class="line">	dfs(x+<span class="number">1</span>,dos,das+<span class="number">1</span>,pr*(<span class="number">1.0</span>-(ff)p[x]/<span class="number">100.00</span>)); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> dos,<span class="keyword">int</span> das,ff pr)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x&gt;n) &#123; </div><div class="line">		REP(i,<span class="number">0</span>,B) REP(j,<span class="number">1</span>,m) &#123; </div><div class="line">			<span class="built_in">vector</span>&lt;pif&gt;::iterator</div><div class="line">				k=lobo(sto[i].begin(),sto[i].end(),</div><div class="line">				mp(les[i+das][j]-dos,(ff)<span class="number">0</span>)); </div><div class="line">			<span class="keyword">if</span> (k!=sto[i].end()) &#123; </div><div class="line">				ff pl=sto[i][sz(sto[i])<span class="number">-1</span>].se; </div><div class="line">				<span class="keyword">if</span> (k!=sto[i].begin()) --k,pl-=k-&gt;se; </div><div class="line">				as+=(ff)j*pl*pr; </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span>; </div><div class="line">	&#125;</div><div class="line">	getans(x+<span class="number">1</span>,dos+v[x],das,pr*((ff)p[x]/<span class="number">100.00</span>)); </div><div class="line">	getans(x+<span class="number">1</span>,dos,das+<span class="number">1</span>,pr*(<span class="number">1.0</span>-(ff)p[x]/<span class="number">100.00</span>)); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//get les[i][j] : use i diamonds to buy j objects, what the least cost is; </span></div><div class="line">	<span class="built_in">memset</span>(les,<span class="number">127</span>,<span class="keyword">sizeof</span>(les)); </div><div class="line">	les[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>; REP(i,<span class="number">1</span>,m) VEP(j,n,d[i]) VEP(k,m,<span class="number">1</span>) </div><div class="line">		<span class="keyword">if</span> (les[j-d[i]][k<span class="number">-1</span>]+c[i]&lt;<span class="number">300000010</span>) </div><div class="line">			cmin(les[j][k],les[j-d[i]][k<span class="number">-1</span>]+c[i]); </div><div class="line"><span class="comment">//get sto[i][j](fi,se) : use the first B boxes, get i dias and no more than fi dols, what the prob; </span></div><div class="line">	B=n/<span class="number">3</span>*<span class="number">2</span>; dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>); </div><div class="line">	REP(i,<span class="number">0</span>,B) sort(sto[i].begin(),sto[i].end()); </div><div class="line">	REP(i,<span class="number">0</span>,B) REP(j,<span class="number">1</span>,sz(sto[i])<span class="number">-1</span>) sto[i][j].se+=sto[i][j<span class="number">-1</span>].se; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T); <span class="keyword">while</span> (T--) &#123; as=<span class="number">0</span>; </div><div class="line">		rep(i,<span class="number">22</span>) sto[i].clear(); </div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);  REP(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;v[i],&amp;p[i]); </div><div class="line">		REP(i,<span class="number">1</span>,m) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;c[i],&amp;d[i]);  </div><div class="line">		prepare(), getans(B+<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>); </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%.4lf\n"</span>,as); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-gthronesa-game-of-thrones">【CC GTHRONES】A Game of Thrones</h1>
<h2 id="题目大意-4">题目大意</h2>
<p>Bran 和 Tyrion 进行博弈， Bran先手，指定一个数作为当前数<span class="math inline">\(x\)</span>， 之后交替进行操作： 选择一个与当前数满足条件的数<span class="math inline">\(y\)</span>, 将<span class="math inline">\(y\)</span>设为当前数， 删掉一个<span class="math inline">\(x\)</span>, 不能操作者负。</p>
<p>需要满足的条件： 1. 如果<span class="math inline">\(x&gt;y\)</span> , <span class="math inline">\(y|x\)</span>, <span class="math inline">\(x/y\)</span>是一个质数； 2. 如果<span class="math inline">\(y&gt;x\)</span> , <span class="math inline">\(x|y\)</span>, <span class="math inline">\(y/x\)</span>是一个质数。</p>
<h2 id="解题报告-4">解题报告</h2>
<p>首先，如果把满足条件的点<span class="math inline">\(x\)</span>,<span class="math inline">\(y\)</span>连边， 那么原图会成为一个二分图，可以安装质因子个数的奇偶进行分类。</p>
<p>如果这个二分图存在完美匹配，那么先手必负， 因为后手只需要选取匹配中与当前点相连的点就可以不负。</p>
<p>否则， 先手必胜， 考虑先手选择一个不在某个最大匹配中的点作为初始状态， 后手需要使用存在于最大匹配中的点（否则不满足最大匹配的定义），然后，先手只需要使用最大匹配中对应的点回敬即可不负。</p>
<p>所以只需要判断是否存在完美匹配就可以判断胜负， 然后找到最小的不在某个最大匹配中的点作为最小代价，可以通过网络流的退流操作进行判断。</p>
<h2 id="代码-4">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">510</span>; </div><div class="line"><span class="keyword">const</span> ll inf=<span class="number">1000000000000000l</span>l; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt,to; ll f; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,ll f=<span class="number">0</span>) </div><div class="line">		:nxt(nxt),to(to),f(f)&#123;&#125;</div><div class="line">&#125; e[N*N*<span class="number">3</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> hed[N*<span class="number">2</span>],tot=<span class="number">1</span>,n,c[N*<span class="number">2</span>],co[N*<span class="number">2</span>],p[N],od[N]; <span class="keyword">bool</span> viz[N];</div><div class="line"><span class="keyword">int</span> S,T,s,t,de[N*<span class="number">2</span>],q[N*N],he,ta; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v[N]; ll u[N*<span class="number">2</span>];  </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,ll f)</span> </span>&#123;</div><div class="line">	e[++tot]=edge(hed[x],y,f), hed[x]=tot; </div><div class="line">	e[++tot]=edge(hed[y],x,<span class="number">0</span>), hed[y]=tot; <span class="keyword">return</span> tot^<span class="number">1</span>; </div><div class="line">&#125; </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(T &amp;x)</span> </span>&#123; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>; ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"><span class="keyword">void</span> _color(<span class="keyword">int</span> x,<span class="keyword">int</span> fm=<span class="number">0</span>) &#123; </div><div class="line">	viz[x]=<span class="number">1</span>;co[x]=co[fm]^<span class="number">1</span>; </div><div class="line">	rep(i,v[x].size()) <span class="keyword">if</span> (!viz[v[x][i]]) _color(v[x][i],x); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123; </div><div class="line">	he=ta=<span class="number">0</span>,q[ta++]=s; <span class="built_in">memset</span>(de,<span class="number">0</span>,<span class="keyword">sizeof</span>(de)),de[s]=<span class="number">1</span>; <span class="keyword">int</span> x,y;  </div><div class="line">	<span class="keyword">while</span> (he&lt;ta) &#123; x=q[he++]; <span class="keyword">for</span>(<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">		<span class="keyword">if</span> (y=e[i].to, !de[y]&amp;&amp;e[i].f) de[y]=de[x]+<span class="number">1</span>,q[ta++]=y; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> de[t]; </div><div class="line">&#125; </div><div class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, ll lm)</span> </span>&#123; ll f,hv=<span class="number">0</span>; <span class="keyword">int</span> y; <span class="keyword">if</span> (x==t) <span class="keyword">return</span> lm;  </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) <span class="keyword">if</span> (y=e[i].to,de[y]==de[x]+<span class="number">1</span>&amp;&amp;e[i].f) &#123; </div><div class="line">		f=dfs(y,min(e[i].f, lm)); e[i].f-=f,e[i^<span class="number">1</span>].f+=f,hv+=f,lm-=f; </div><div class="line">		<span class="keyword">if</span> (!lm) <span class="keyword">return</span> hv; </div><div class="line">	&#125; de[x]=<span class="number">-1</span>; <span class="keyword">return</span> hv; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> _s, <span class="keyword">int</span> <span class="keyword">_t</span>)</span> </span>&#123; </div><div class="line">	s=_s, t=<span class="keyword">_t</span>; ll as=<span class="number">0</span>; <span class="keyword">while</span> (bfs()) as+=dfs(s,inf); <span class="keyword">return</span> as; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> pm[<span class="number">10</span>]=&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">11</span>,<span class="number">13</span>,<span class="number">17</span>,<span class="number">19</span>,<span class="number">23</span>,<span class="number">29</span>&#125;; </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll a,ll b,ll p)</span> </span>&#123;</div><div class="line">	a%=p,b%=p; <span class="keyword">if</span>(a&lt;<span class="number">0</span>)a+=p; <span class="keyword">if</span>(b&lt;<span class="number">0</span>)b+=p; </div><div class="line">	ll k=(ll)(((ff)a*b/p)); ll as=a*b-p*k; </div><div class="line">	as%=p; <span class="keyword">if</span>(as&lt;<span class="number">0</span>) as+=p; <span class="keyword">return</span> as; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">fast</span><span class="params">(ll x,ll k,ll p)</span> </span>&#123; </div><div class="line">	ll as=<span class="number">1</span>; <span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=mul(x,x,p)) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) as=mul(as,x,p);</div><div class="line">	<span class="keyword">return</span> as;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">miller_rabin</span><span class="params">(ll x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">if</span> (x&lt;=<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">	ll a,m=x<span class="number">-1</span>,k=<span class="number">0</span>; <span class="keyword">while</span> (m%<span class="number">2</span>==<span class="number">0</span>) m/=<span class="number">2</span>,++k; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>;++i) &#123; <span class="keyword">if</span> (pm[i]==x) <span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">		a=fast(pm[i],m,x); <span class="keyword">if</span>(a==<span class="number">1</span>) <span class="keyword">continue</span>; </div><div class="line">		<span class="keyword">int</span> j; <span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=k;++j) &#123; </div><div class="line">			<span class="keyword">if</span>(a==x<span class="number">-1</span>) <span class="keyword">break</span>; a=mul(a,a,x);</div><div class="line">		&#125; </div><div class="line">		<span class="keyword">if</span> (j&gt;k) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chek</span><span class="params">(ll a,ll b)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (a&lt;b) swap(a,b); <span class="keyword">if</span>(a%b) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">	<span class="keyword">if</span> (!miller_rabin(a/b)) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> u[a]&lt;u[b];&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("A.in","r",stdin); </span></div><div class="line"><span class="comment">//	freopen("A.out","w",stdout); </span></div><div class="line">	in(n); REP(i,<span class="number">1</span>,n) in(u[i]),in(c[i]);</div><div class="line">	REP(i,<span class="number">1</span>,n) REP(j,i+<span class="number">1</span>,n) <span class="keyword">if</span>(chek(u[i],u[j])) </div><div class="line">		v[i].pb(j),v[j].pb(i); </div><div class="line">	REP(i,<span class="number">1</span>,n) <span class="keyword">if</span> (!viz[i]) _color(i); </div><div class="line"> </div><div class="line">	S=<span class="number">0</span>, T=n+<span class="number">1</span>; ll s1=<span class="number">0</span>, s2=<span class="number">0</span>;  </div><div class="line">	REP(i,<span class="number">1</span>,n) <span class="keyword">if</span> (co[i]==<span class="number">1</span>) &#123; </div><div class="line">		p[i]=add(S,i,c[i]),s1+=c[i]; </div><div class="line">		rep(j,v[i].size()) add(i,v[i][j],inf); </div><div class="line">	&#125; <span class="keyword">else</span> p[i]=add(i,T,c[i]),s2+=c[i]; </div><div class="line">	ll flo=dinic(S,T); </div><div class="line"> </div><div class="line">	<span class="keyword">if</span> (flo==max(s1,s2)) &#123;<span class="built_in">puts</span>(<span class="string">"Tyrion"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</div><div class="line">	REP(i,<span class="number">1</span>,n) od[i]=i; sort(od+<span class="number">1</span>,od+<span class="number">1</span>+n,cmp); </div><div class="line">	ll fno,old1,old2; <span class="keyword">int</span> pa,k;  </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Bran"</span>); REP(i,<span class="number">1</span>,n) &#123; k=od[i],pa=p[k]; </div><div class="line">		<span class="keyword">if</span> (e[pa].f) &#123;<span class="built_in">printf</span>(<span class="string">" %lld\n"</span>,u[k]);<span class="keyword">return</span> <span class="number">0</span>;&#125;</div><div class="line">		old1=e[pa].f, old2=e[pa^<span class="number">1</span>].f; </div><div class="line">		e[pa].f=e[pa^<span class="number">1</span>].f=<span class="number">0</span>; </div><div class="line">		<span class="keyword">if</span> (co[k]==<span class="number">1</span>) fno=dinic(S,k); </div><div class="line">		<span class="keyword">else</span> fno=dinic(k,T); </div><div class="line">		<span class="keyword">if</span> (fno) &#123; <span class="built_in">printf</span>(<span class="string">" %lld\n"</span>,u[k]); <span class="keyword">return</span> <span class="number">0</span>;&#125; </div><div class="line">		e[pa].f=old1, e[pa^<span class="number">1</span>].f=old2;</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-cardchufcard-shuffle">【CC CARDCHUF】Card Shuffle</h1>
<h2 id="题目大意-5">题目大意</h2>
<p>初始一个<span class="math inline">\(1\)</span>到<span class="math inline">\(n\)</span>的序列，每次进行几个操作： 1. 拿走顶端的<span class="math inline">\(A\)</span>个数。 2. 再拿走顶端的<span class="math inline">\(B\)</span>个数。 3. 把<span class="math inline">\(A\)</span>个数放回顶端。 4. 在顶端拿走<span class="math inline">\(C\)</span>个数。 5. 把<span class="math inline">\(B\)</span>个数倒序放回顶端。 6. 放回<span class="math inline">\(C\)</span>个数。</p>
<h2 id="解题报告-5">解题报告</h2>
<p>天朝数据结构碾压终生。</p>
<p>FHQTreap超容易写的一道裸题。HARD？</p>
<h2 id="代码-5">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; droot; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100100</span>; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> n,m,sn[N][<span class="number">2</span>],ke[N],v[N],sz[N],ct,rv[N],rt;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) </div><div class="line">		<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) </div><div class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>; x*=f; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">birth</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	++ct; ke[x]=rand(),sn[ct][<span class="number">0</span>]=sn[ct][<span class="number">1</span>]=<span class="number">0</span>,v[ct]=x,sz[ct]=<span class="number">1</span>;<span class="keyword">return</span> ct;</div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _rev(<span class="keyword">int</span> x) &#123;</div><div class="line">	<span class="keyword">if</span> (!x) <span class="keyword">return</span> ; </div><div class="line">	rv[x]^=<span class="number">1</span>; swap(sn[x][<span class="number">0</span>],sn[x][<span class="number">1</span>]); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (rv[x]) _rev(sn[x][<span class="number">0</span>]), _rev(sn[x][<span class="number">1</span>]), rv[x]=<span class="number">0</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	sz[x]=<span class="number">1</span>; <span class="keyword">if</span> (sn[x][<span class="number">0</span>]) sz[x]+=sz[sn[x][<span class="number">0</span>]]; </div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">1</span>]) sz[x]+=sz[sn[x][<span class="number">1</span>]]; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> stk[N],tp,x,las; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123; </div><div class="line">		x=birth(i); <span class="keyword">while</span> (tp&amp;&amp;ke[stk[tp]]&gt;ke[x]) </div><div class="line">			las=stk[tp], --tp, up(las); </div><div class="line">		<span class="keyword">if</span> (tp) sn[stk[tp]][<span class="number">1</span>]=x;</div><div class="line">		sn[x][<span class="number">0</span>]=las, stk[++tp]=x,las=<span class="number">0</span>;  </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">while</span> (tp) up(stk[tp]), --tp; </div><div class="line">	<span class="keyword">return</span> stk[<span class="number">1</span>]; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function">droot <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!x) <span class="keyword">return</span> mp(<span class="number">0</span>,<span class="number">0</span>); <span class="keyword">if</span> (!k) <span class="keyword">return</span> mp(<span class="number">0</span>,x); </div><div class="line">	down(x); <span class="keyword">int</span> lsz=sz[sn[x][<span class="number">0</span>]]; droot y;  </div><div class="line">	<span class="keyword">if</span> (lsz&gt;=k) &#123; y=split(sn[x][<span class="number">0</span>],k); </div><div class="line">	 	sn[x][<span class="number">0</span>]=y.se; up(x); y.se=x; </div><div class="line">	&#125; <span class="keyword">else</span> &#123; y=split(sn[x][<span class="number">1</span>],k<span class="number">-1</span>-lsz); </div><div class="line">	 	sn[x][<span class="number">1</span>]=y.fi; up(x); y.fi=x;  </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> y; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">if</span>(a*b==<span class="number">0</span>) <span class="keyword">return</span> a+b; </div><div class="line">	down(a), down(b); </div><div class="line">	<span class="keyword">if</span> (ke[a]&lt;ke[b]) &#123; </div><div class="line">		sn[a][<span class="number">1</span>]=merge(sn[a][<span class="number">1</span>],b);</div><div class="line">		up(a); <span class="keyword">return</span> a; </div><div class="line">	&#125; <span class="keyword">else</span> &#123; </div><div class="line">		sn[b][<span class="number">0</span>]=merge(a, sn[b][<span class="number">0</span>]); </div><div class="line">		up(b); <span class="keyword">return</span> b; </div><div class="line">	&#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">look</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span>(!x) <span class="keyword">return</span>; down(x); </div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">0</span>]) look(sn[x][<span class="number">0</span>]); </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d "</span>, v[x]); </div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">1</span>]) look(sn[x][<span class="number">1</span>]); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(n),in(m),rt=build();<span class="keyword">int</span> a,b,c;</div><div class="line">	<span class="comment">//look(rt); //cout&lt;&lt;endl; </span></div><div class="line">	rep(i,m) &#123; in(a),in(b),in(c); </div><div class="line">		droot A=split(rt,a); </div><div class="line">		droot B=split(A.se,b); </div><div class="line">		rt=merge(A.fi,B.se); </div><div class="line">		<span class="comment">//look(rt); //cout&lt;&lt;endl; </span></div><div class="line">		A=split(rt, c); </div><div class="line">		_rev(B.fi),A.se=merge(B.fi,A.se); </div><div class="line">		rt=merge(A.fi,A.se); </div><div class="line">		<span class="comment">//look(rt);cout&lt;&lt;endl; </span></div><div class="line">	&#125; </div><div class="line">	look(rt); <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>; <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-tapaircounting-the-important-pairs">【CC TAPAIR】Counting The Important Pairs</h1>
<h2 id="题目大意-6">题目大意</h2>
<p>一个无向简单图， 求无序点对<span class="math inline">\((x,y)\)</span>满足同时删除这两条边，无向图不再联通的对数。</p>
<h2 id="解题报告-6">解题报告</h2>
<p>在dfs树上观察， 发现如果<span class="math inline">\(x\)</span>,<span class="math inline">\(y\)</span>两条边有相同的编号，那么同时删除无向图不再联通。</p>
<p>编号是啥？ 令dfs树上的返祖边，每个反祖边有一个编号，那么树上一条边的编号是删除这条边后，使用哪些返祖边可以使图依旧联通的编号集合。</p>
<p>其实有两种情况： 1. 两个编号相同边一个是返祖边，一个是树边，那么这个返祖边是唯一一个使得树边删除后图依然联通的边， 同时删除满足题意。 2. 如果都是树边， 容易得到不存在返祖边使得两条树边之间的联通块与其他部分联通， 同时删除两条树边，使得中间的联通块“独立”， 满足题意。</p>
<p>那怎么判断两个边的编号是不是相同？用奇怪的Hash技巧（比如xor?)就可以了。</p>
<h2 id="代码-6">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> RAND ull((1ull*rand()&lt;&lt;45)|(1ull*rand()&lt;&lt;30)|(rand()&lt;&lt;15)|rand())</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">300010</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></div><div class="line">	 <span class="keyword">int</span> nxt,to; edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>)</div><div class="line">	 	:nxt(nxt),to(to) &#123;&#125;</div><div class="line">&#125; e[M&lt;&lt;<span class="number">1</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> hed[N],tot,n,m; ull v[M];</div><div class="line"><span class="keyword">bool</span> vi[N],instk[N]; </div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(T &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar())</div><div class="line">		<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) </div><div class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>;  x*=f; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	e[++tot]=edge(hed[x],y), hed[x]=tot; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fm)</span> </span>&#123;</div><div class="line">	instk[x]=<span class="number">1</span>,vi[x]=<span class="number">1</span>; </div><div class="line"><span class="comment">//	cout&lt;&lt;RAND&lt;&lt;endl; </span></div><div class="line">	<span class="keyword">int</span> y; <span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">		<span class="keyword">if</span> (y=e[i].to, y!=fm) &#123; </div><div class="line">			<span class="keyword">if</span> (vi[y]) &#123; <span class="keyword">if</span>(instk[y]) v[++n]=RAND,v[x]^=v[n],v[y]^=v[n];&#125;</div><div class="line">			<span class="keyword">else</span> dfs(y,x); </div><div class="line">		&#125; </div><div class="line">	v[fm]^=v[x],instk[x]=<span class="number">0</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; in(n),in(m); srand(<span class="number">23333</span>); </div><div class="line">	<span class="keyword">int</span> x,y; rep(i,m) in(x),in(y),add(x,y),add(y,x); </div><div class="line">	dfs(<span class="number">1</span>,<span class="number">0</span>),v[<span class="number">1</span>]=v[n],--n, sort(v+<span class="number">1</span>,v+<span class="number">1</span>+n); ll t; <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>; </div><div class="line">	<span class="keyword">while</span> (i&lt;n&amp;&amp;v[i+<span class="number">1</span>]==<span class="number">0</span>) ++i; ll as=<span class="number">0</span>; </div><div class="line">	t=i,t*=n<span class="number">-1</span>,as+=t,t=i,t=t*(t<span class="number">-1</span>)/<span class="number">2</span>,as-=t; </div><div class="line">	<span class="keyword">for</span> (++i;i&lt;=n;i=j+<span class="number">1</span>) &#123; j=i; <span class="keyword">while</span> (j&lt;n&amp;&amp;v[j+<span class="number">1</span>]==v[i]) ++j; </div><div class="line">		t=j-i+<span class="number">1</span>, t=t*(t<span class="number">-1</span>)/<span class="number">2</span>, as+=t; </div><div class="line">	&#125; </div><div class="line">	<span class="built_in">cout</span>&lt;&lt;as&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-farasafurik-and-rubik-and-sub-array">【CC FARASA】Furik and Rubik and Sub Array</h1>
<h2 id="题目大意-7">题目大意</h2>
<p>给出一个序列，求不同的区间和的个数。</p>
<h2 id="解题报告-7">解题报告</h2>
<p>题目对<span class="math inline">\(n*SUM\)</span>做了约束，如果<span class="math inline">\(n\)</span>很小， 直接<span class="math inline">\(O(n^2logn)\)</span>艹过去了。</p>
<p>如果<span class="math inline">\(n\)</span>大一点，比如<span class="math inline">\(2000 &lt; n \leqslant 20000\)</span> , 那么数的和就可以作为数组的下标，所以<span class="math inline">\(O(n^2)\)</span>艹过去了。</p>
<p>如果<span class="math inline">\(n\)</span>再大一点？比如<span class="math inline">\(20000&lt;n\leqslant 200000\)</span>, 可以把<span class="math inline">\(sum(l,r)\)</span>表示成<span class="math inline">\(pre(r)-pre(l-1)\)</span> , 可以把<span class="math inline">\(pre\)</span>数组和<span class="math inline">\(-pre\)</span>数组分别作为多项式的幂指数， 做多项式乘法统计系数就可以了，<span class="math inline">\(O(sum\log sum)\)</span>艹过去了！</p>
<p>但是我发现自己的多项式代码一直WA，然后把对拍用的暴力交了上去，竟然是跑得最快的。。。 是不是用什么生日悖论可以证明暴力复杂度优越呀。。</p>
<h2 id="代码-7">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</div><div class="line">ll a[N]; <span class="keyword">int</span> s[N],n;</div><div class="line"><span class="keyword">bool</span> f[<span class="number">20000010</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</div><div class="line">	ll ans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(n&lt;=<span class="number">2000</span>) &#123;</div><div class="line">		<span class="built_in">set</span>&lt;ll&gt; s;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">1</span>;l&lt;=n;++l) &#123;</div><div class="line">			ll sum=<span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> r=l;r&lt;=n;++r) </div><div class="line">				sum+=a[r], s.insert(sum);</div><div class="line">		&#125;</div><div class="line">		ans=s.size();</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		s[<span class="number">0</span>]=<span class="number">0</span>, f[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n; ++i)</div><div class="line">			s[i]=s[i<span class="number">-1</span>]+a[i], f[s[i]]=<span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> sum=s[n];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=sum;++i) &#123;</div><div class="line">			<span class="keyword">if</span>(!f[i]) &#123;</div><div class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; ++j) &#123;</div><div class="line">					<span class="keyword">int</span> x=s[j]+i; <span class="keyword">if</span> (x&gt;sum) <span class="keyword">break</span>;</div><div class="line">					<span class="keyword">if</span>(f[x]) &#123; f[i]=<span class="number">1</span>; <span class="keyword">break</span>; &#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			ans+=f[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span>&lt;&lt;ans<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>FFT 做法</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> ff pi=<span class="built_in">acos</span>(<span class="number">-1</span>); </div><div class="line">ll a[<span class="number">200010</span>],n;</div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(T &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar());</div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar())</div><div class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">namespace</span> one &#123; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">		<span class="built_in">set</span>&lt;ll&gt; s; </div><div class="line">		REP(i,<span class="number">1</span>,n) &#123; a[i]+=a[i<span class="number">-1</span>]; </div><div class="line">			rep(j,i) <span class="keyword">if</span> (s.count(a[i]-a[j])==<span class="number">0</span>) </div><div class="line">				s.insert(a[i]-a[j]); </div><div class="line">		&#125; </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, s.size()<span class="number">-1</span>); </div><div class="line">	&#125; </div><div class="line">&#125; </div><div class="line"><span class="keyword">namespace</span> two &#123; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">		<span class="built_in">bitset</span>&lt;20000001&gt; exi; </div><div class="line">		REP(i,<span class="number">1</span>,n) &#123; a[i]+=a[i<span class="number">-1</span>]; </div><div class="line">			rep(j,i) exi.<span class="built_in">set</span>(a[i]-a[j]); </div><div class="line">		&#125;</div><div class="line">		exi.reset(<span class="number">0</span>); </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, exi.count()<span class="number">-1</span>) ; </div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"><span class="keyword">namespace</span> three &#123; </div><div class="line">	<span class="keyword">int</span> _n,r[<span class="number">600000</span>]; </div><div class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">cmx</span> &#123;</span> </div><div class="line">		ff x,y; cmx(ff x=<span class="number">0</span>,ff y=<span class="number">0</span>):x(x),y(y)&#123;&#125;</div><div class="line">		cmx <span class="keyword">operator</span> +(<span class="keyword">const</span> cmx b) &#123; <span class="keyword">return</span> cmx(x+b.x,y+b.y);&#125;</div><div class="line">		cmx <span class="keyword">operator</span> -(<span class="keyword">const</span> cmx b) &#123; <span class="keyword">return</span> cmx(x-b.x,y-b.y);&#125;</div><div class="line">		cmx <span class="keyword">operator</span> *(<span class="keyword">const</span> cmx b) &#123; <span class="keyword">return</span> cmx(x*b.x-y*b.y,x*b.y+y*b.x);&#125;</div><div class="line">	&#125; A[<span class="number">600000</span>],B[<span class="number">600000</span>]; </div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dft</span><span class="params">(cmx *a,<span class="keyword">int</span> f)</span> </span>&#123; </div><div class="line">		rep(i,_n) <span class="keyword">if</span> (i&lt;r[i]) swap(a[i],a[r[i]]); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> m=<span class="number">1</span>; m&lt;_n; m&lt;&lt;=<span class="number">1</span>) &#123; </div><div class="line">			cmx wn=cmx(<span class="built_in">cos</span>(pi/m),<span class="built_in">sin</span>(pi/m)*f); </div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;_n; i+=m&lt;&lt;<span class="number">1</span>) &#123;</div><div class="line">				cmx w=cmx(<span class="number">1</span>,<span class="number">0</span>); </div><div class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m; ++j) &#123;</div><div class="line">					cmx x=a[i+j],y=a[i+j+m]*w; </div><div class="line">					a[i+j]=x+y, a[i+j+m]=x-y; </div><div class="line">					w=w*wn; </div><div class="line">				&#125; </div><div class="line">			&#125; </div><div class="line">		&#125; </div><div class="line">		<span class="keyword">if</span> (f==<span class="number">-1</span>) rep(i,_n) a[i].x/=(ff)_n; </div><div class="line">	&#125; </div><div class="line">				</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">		REP(i,<span class="number">1</span>,n) &#123; a[i]+=a[i<span class="number">-1</span>],A[a[i]].x=<span class="number">1</span>;&#125; </div><div class="line">		A[<span class="number">0</span>].x=<span class="number">1</span>; rep(i,a[n]+<span class="number">1</span>) B[i].x=A[a[n]-i].x; </div><div class="line">		<span class="keyword">int</span> m=a[n]+a[n]+<span class="number">1</span>; <span class="keyword">for</span> (_n=<span class="number">1</span>; _n&lt;m; _n&lt;&lt;=<span class="number">1</span>); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;_n;++i) &#123; r[i]=j; </div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> k=_n&gt;&gt;<span class="number">1</span>;(j^=k)&lt;k;k&gt;&gt;=<span class="number">1</span>); </div><div class="line">		&#125; </div><div class="line">		dft(A,<span class="number">1</span>),dft(B,<span class="number">1</span>);rep(i,_n) A[i]=A[i]*B[i]; ll as=<span class="number">0</span>; </div><div class="line">		dft(A,<span class="number">-1</span>); REP(i,a[n]+<span class="number">1</span>,a[n]+a[n]) <span class="keyword">if</span> (<span class="keyword">int</span>(A[i].x+<span class="number">0.5</span>)) ++as; </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, as<span class="number">-1</span>); </div><div class="line">	&#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("A.in","r",stdin);</span></div><div class="line"><span class="comment">//	freopen("A.out","w",stdout); </span></div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); <span class="comment">//cout&lt;&lt;1&lt;&lt;endl;</span></div><div class="line">	</div><div class="line">	REP(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</div><div class="line">	</div><div class="line"> </div><div class="line">	<span class="keyword">if</span> (n&lt;=<span class="number">2000</span>) one :: main(); </div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (n&lt;=<span class="number">20000</span>) two :: main(); </div><div class="line">		<span class="keyword">else</span> three:: main(); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-changemaking-change">【CC CHANGE】Making Change</h1>
<h2 id="题目大意-8">题目大意</h2>
<h2 id="解题报告-8">解题报告</h2>
<h2 id="代码-8">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for (int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">51</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">1000000007</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> d[N],c[<span class="number">101</span>],n,T,le,tw[<span class="number">400</span>],f[N*N*<span class="number">20</span>],sm;</div><div class="line"><span class="keyword">char</span> s[<span class="number">110</span>]; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T); </div><div class="line">	<span class="keyword">while</span> (T--) &#123; </div><div class="line">		sm=<span class="number">0</span>,<span class="built_in">scanf</span>(<span class="string">"%d%s"</span>,&amp;n,s); </div><div class="line">		le=<span class="built_in">strlen</span>(s); rep(i,le) c[i]=s[le-i<span class="number">-1</span>]-<span class="string">'0'</span>; </div><div class="line">		<span class="keyword">int</span> lf=<span class="number">0</span>,tn=<span class="number">0</span>; <span class="keyword">while</span> (le&gt;<span class="number">1</span>||c[<span class="number">0</span>]&gt;=<span class="number">1</span>) &#123; </div><div class="line">			VEP(i,le<span class="number">-1</span>,<span class="number">0</span>) &#123; <span class="keyword">int</span> x=lf*<span class="number">10</span>+c[i]; </div><div class="line">				lf=x%<span class="number">2</span>, c[i]=x/<span class="number">2</span>; </div><div class="line">			&#125;</div><div class="line">			tw[++tn]=lf, lf=<span class="number">0</span>; </div><div class="line">			<span class="keyword">while</span> (c[le<span class="number">-1</span>]==<span class="number">0</span>) le--; </div><div class="line">		&#125;</div><div class="line"><span class="comment">//		REP(i, 1,tn) cout&lt;&lt;tw[i]&lt;&lt;' ' ;cout&lt;&lt;endl; </span></div><div class="line">		REP(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;d[i]),sm+=d[i];</div><div class="line">		<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f)); </div><div class="line">		f[<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">int</span> smx=<span class="number">0</span>,v;  </div><div class="line">		sort(d+<span class="number">1</span>,d+<span class="number">1</span>+n); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tn;++i) &#123; </div><div class="line">			<span class="built_in">memset</span>(f+<span class="number">1</span>+smx,<span class="number">0</span>,sm*<span class="keyword">sizeof</span>(ui));</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;++j) &#123; v=d[j],smx+=v; </div><div class="line">				VEP(k,smx,v) f[k]+=f[k-v],f[k]-=p*((f[k]&gt;&gt;<span class="number">30</span>)&amp;<span class="number">3</span>); </div><div class="line">			&#125;</div><div class="line">			<span class="keyword">int</span> _j,j; </div><div class="line">			<span class="keyword">for</span>(_j=tw[i],j=<span class="number">0</span>; _j&lt;=smx;_j+=<span class="number">2</span>,++j) &#123;  </div><div class="line">				f[j]=f[_j]; <span class="keyword">if</span> (f[j]&gt;=p) f[j]-=p;</div><div class="line">			&#125; </div><div class="line">			smx=j<span class="number">-1</span>; </div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%u\n"</span>, f[<span class="number">0</span>]); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 题目集锦 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LCT </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> 后缀自动机 </tag>
            
            <tag> DP </tag>
            
            <tag> 数位DP </tag>
            
            <tag> 博弈 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> meet in the middle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[codechef-选做-again]]></title>
      <url>/cc2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>继续做CC中难度比较低的题目</p>
</blockquote>
<a id="more"></a>
<h1 id="cc-tripschildren-trips">【CC TRIPS】Children Trips</h1>
<h2 id="题目大意">题目大意</h2>
<p>一棵树上每个边的权值为1， 每次给出一个小盆友的体力值， 每天可以行进的距离<span class="math inline">\(\leqslant\)</span>体力值，问走<span class="math inline">\((x,y)\)</span>这条路径需要几天。</p>
<h2 id="解题报告">解题报告</h2>
<p>首先考虑体力值为1 、2 、3…的分别走步数<span class="math inline">\(n\)</span> , 总共需要走的距离是<span class="math inline">\(n^3\)</span>级别的，实际总步数是<span class="math inline">\(n^2\)</span>级别， 所以每个体力值走过的步数是<span class="math inline">\(\sqrt{n}\)</span>级别， 每一步走到哪一个节点通过倍增（二分？）<span class="math inline">\(\log n\)</span>可以得到, 复杂度<span class="math inline">\(O(n\sqrt{n}\log n)\)</span></p>
<p>如果一个体力值走的步数<span class="math inline">\(&gt; n\)</span>，那么可以对这个体力值进行重建图， 每个点连向上能到达的最远的点， 在呈现做倍增， 这个重构图的过程最多进行<span class="math inline">\(\sqrt{n}\)</span>次， 单次复杂度<span class="math inline">\(O(n\log n)\)</span>.</p>
<p>重构图之后， 通过倍增就可以<span class="math inline">\(\log n\)</span>解决一次询问， 复杂度<span class="math inline">\(O(n\log n)\)</span>.</p>
<p>所以总体的复杂度就是<span class="math inline">\(O(n \sqrt{n} \log n)\)</span></p>
<h2 id="代码">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i,  a,  b) for (int i = int(a),  nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i,  a,  b) for (int i = int(a),  nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,  b) for (int i = 0,  nn = int(b); i &lt; b; ++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> u, v, c, id;</div><div class="line">	node(<span class="keyword">int</span> u=<span class="number">0</span>, <span class="keyword">int</span> v=<span class="number">0</span>, <span class="keyword">int</span> c=<span class="number">0</span>, <span class="keyword">int</span> id=<span class="number">0</span>) </div><div class="line">		:u(u), v(v), c(c), id(id) &#123;&#125;</div><div class="line">&#125; t[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt, to, v; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,<span class="keyword">int</span> v=<span class="number">0</span>) </div><div class="line">		:nxt(nxt), to(to), v(v) &#123;&#125;</div><div class="line">&#125; e[N*<span class="number">2</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, m, d, lca, sum, c;</div><div class="line"><span class="keyword">int</span> head[N], tot; </div><div class="line"><span class="keyword">int</span> dep[N], deep[N], fa[N][<span class="number">20</span>], _fa[N][<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> st[N], top, top2;</div><div class="line"><span class="keyword">int</span> ans[N], s[N*<span class="number">2</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span>&#123;<span class="keyword">return</span> a.c&gt;b.c;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line"> 	e[++tot] = edge(head[x], y, v), head[x]=tot;</div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (deep[x] &gt; d) d = deep[x];</div><div class="line">	<span class="keyword">int</span> y; </div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; fa[x][i]; ++i) </div><div class="line">		fa[x][i+<span class="number">1</span>] = fa[ fa[x][i] ][i]; </div><div class="line"> </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = e[i].nxt)</div><div class="line">		<span class="keyword">if</span> (y = e[i].to, y != fa[x][<span class="number">0</span>]) &#123;</div><div class="line">			deep[y] = deep[x] + e[i].v;</div><div class="line">			dep[y] = dep[x] + <span class="number">1</span>, fa[y][<span class="number">0</span>]=x; </div><div class="line">			dfs(y);</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">void</span> _dfs(<span class="keyword">int</span> x) &#123;</div><div class="line">	<span class="keyword">int</span> _top = top2, y;</div><div class="line">	<span class="keyword">for</span> ( st[ ++top ] = x; deep[x]-deep[st[top2]] &gt; c; ++top2);</div><div class="line">	_fa[x][<span class="number">0</span>] = st[top2];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; _fa[x][i]; ++i)</div><div class="line">		_fa[x][i+<span class="number">1</span>] = _fa[_fa[x][i]][i];</div><div class="line">		</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x]; i; i = e[i].nxt)</div><div class="line">		<span class="keyword">if</span> (y = e[i].to, y != fa[x][<span class="number">0</span>]) </div><div class="line">			_dfs(y);</div><div class="line">			</div><div class="line">	--top, top2 = _top;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i, j;</div><div class="line">	<span class="keyword">if</span>(dep[u] &lt; dep[v]) swap(u, v);</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>, j=dep[u]-dep[v]; j; ++i, j&gt;&gt;=<span class="number">1</span>)	</div><div class="line">		<span class="keyword">if</span>(j &amp; <span class="number">1</span>) u = fa[u][i];</div><div class="line">	<span class="keyword">if</span> (u == v) <span class="keyword">return</span> u;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">17</span>; i&gt;=<span class="number">0</span>; --i) <span class="keyword">if</span>(fa[u][i] != fa[v][i])</div><div class="line">		 u = fa[u][i], v = fa[v][i];</div><div class="line">	<span class="keyword">return</span> fa[u][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); <span class="keyword">int</span> u, v, i, j, k; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;n; ++i) &#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;c);</div><div class="line">		add(u, v, c), add(v, u, c); </div><div class="line">	&#125;</div><div class="line">	dep[<span class="number">1</span>] = deep[<span class="number">1</span>]=<span class="number">1</span>, dfs(<span class="number">1</span>);</div><div class="line">	 </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m; ++i)&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;c); </div><div class="line">		t[i] = node(u, v, c, i); </div><div class="line">		</div><div class="line">		s[ t[i].c ] += n / t[i].c;</div><div class="line">		<span class="keyword">if</span>(s[ t[i].c ]&gt;n) s[t[i].c] = n;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	sort(t+<span class="number">1</span>, t+m+<span class="number">1</span>, cmp);</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>, c=<span class="number">-1</span>; i &lt;= m; ++i) &#123;</div><div class="line">		u = t[i].u, v = t[i].v;</div><div class="line">		lca = LCA(u, v), sum=<span class="number">0</span>;</div><div class="line">		<span class="keyword">if</span>(s[ t[i].c ] &lt; n) &#123;</div><div class="line">			c = t[i].c;</div><div class="line">			<span class="keyword">for</span> (; deep[u]-deep[lca]&gt;=c; u=k, ++sum) &#123;</div><div class="line">				<span class="keyword">for</span> (j=<span class="number">17</span>, k=u; j&gt;=<span class="number">0</span>; --j)</div><div class="line">					<span class="keyword">if</span>(deep[u] - deep[fa[k][j]] &lt;= c)</div><div class="line">						k = fa[k][j];</div><div class="line">				<span class="keyword">if</span>(k == lca)<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">for</span> (; deep[v]-deep[lca]&gt;=c; v=k, ++sum) &#123;</div><div class="line">				<span class="keyword">for</span> (j=<span class="number">17</span>, k=v; j&gt;=<span class="number">0</span>; --j)</div><div class="line">					<span class="keyword">if</span>(deep[v]-deep[fa[k][j]] &lt;= c)</div><div class="line">						k = fa[k][j];</div><div class="line">				<span class="keyword">if</span>(k == lca)<span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(u!=lca || v!=lca)</div><div class="line">				sum += <span class="number">1</span> + (deep[u]+deep[v]<span class="number">-2</span>*deep[lca]&gt;c);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (t[i].c != c) c = t[i].c, _dfs(<span class="number">1</span>);</div><div class="line">			<span class="keyword">for</span> (j=<span class="number">17</span>; j&gt;=<span class="number">0</span>; --j)</div><div class="line">				<span class="keyword">if</span> (deep[_fa[u][j]] - deep[lca]&gt;<span class="number">0</span>)</div><div class="line">					u=_fa[u][j], sum += <span class="number">1</span>&lt;&lt;j;</div><div class="line">			<span class="keyword">for</span> (j=<span class="number">17</span>; j&gt;=<span class="number">0</span>; --j)</div><div class="line">				<span class="keyword">if</span> (deep[_fa[v][j]] - deep[lca]&gt;<span class="number">0</span>)</div><div class="line">					v=_fa[v][j], sum += <span class="number">1</span>&lt;&lt;j;</div><div class="line">			<span class="keyword">if</span>(u!=lca || v!=lca)</div><div class="line">				sum += <span class="number">1</span>+(deep[u]+deep[v]<span class="number">-2</span>*deep[lca]&gt;c);</div><div class="line">		&#125;</div><div class="line">		ans[t[i].id] = sum;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m; ++i) </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-seaeqsereja-and-equality">【CC SEAEQ】Sereja and Equality</h1>
<h2 id="题目大意-1">题目大意</h2>
<p>子串相等在题目中的定义就是离散后对应位置相同的意思， 求所有长度为<span class="math inline">\(n\)</span>的排列中， 相等的逆序对个数不超过<span class="math inline">\(E\)</span>的子串对数。</p>
<h2 id="解题报告-1">解题报告</h2>
<p>首先求出长度为<span class="math inline">\(i\)</span>的逆序对个数不超过<span class="math inline">\(j\)</span>的排列个数， 设<span class="math inline">\(f[i][j]\)</span>表示长度为<span class="math inline">\(i\)</span>逆序对个数为<span class="math inline">\(j\)</span>的方案数， <span class="math display">\[f[i][j]=\sum_{k=0}^{i-1} f[i-1][j-k]\]</span> <span class="math display">\[g[i][j]=\sum_{k=0}^{j}f[i][k]\]</span> 直接转移就可以得到， 复杂度<span class="math inline">\(O(n^2)\)</span></p>
<p>对于一个询问<span class="math inline">\(n,E\)</span> , 枚举相等子串的长度<span class="math inline">\(l\)</span> , 对答案的贡献是<span class="math display">\[((n-l)!C_n^l(n-l+1))^2 \times g[l][E]\]</span></p>
<p>复杂度<span class="math inline">\(O(n^2+nq)\)</span></p>
<h2 id="代码-1">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll </span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">510</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">1000000007</span>; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> f[N][N*N/<span class="number">2</span>], test, C[N][N], fac[N];</div><div class="line"> </div><div class="line">main() &#123; </div><div class="line">	f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>, f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>; </div><div class="line">	</div><div class="line">	<span class="keyword">int</span> n = <span class="number">500</span>, E, pE, dl; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) &#123; </div><div class="line">		E = i*(i<span class="number">-1</span>) / <span class="number">2</span>, pE = (i<span class="number">-1</span>)*(i<span class="number">-2</span>)/<span class="number">2</span>; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= E; ++j) &#123;</div><div class="line">			f[i][j] = f[i<span class="number">-1</span>][min(j, pE)]; </div><div class="line">			dl = j - i; </div><div class="line">			<span class="keyword">if</span> (dl &gt;= <span class="number">0</span>) f[i][j] -= f[i<span class="number">-1</span>][dl]; </div><div class="line">			<span class="keyword">if</span> (f[i][j] &gt;= p) f[i][j] -= p; </div><div class="line">			<span class="keyword">if</span> (f[i][j] &lt; <span class="number">0</span>) f[i][j] += p; </div><div class="line">		&#125; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= E; ++j) &#123;</div><div class="line">			f[i][j] += f[i][j<span class="number">-1</span>]; </div><div class="line">			<span class="keyword">if</span> (f[i][j] &gt;= p) f[i][j] -= p ;</div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	</div><div class="line">	C[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) &#123;</div><div class="line">		C[i][<span class="number">0</span>] = <span class="number">1</span>; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=i; ++j) &#123;</div><div class="line">			C[i][j] = C[i<span class="number">-1</span>][j] + C[i<span class="number">-1</span>][j<span class="number">-1</span>]; </div><div class="line">			<span class="keyword">if</span> (C[i][j] &gt;= p) C[i][j] -= p; </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	fac[<span class="number">0</span>] = <span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; ++i) </div><div class="line">		fac[i] = <span class="number">1L</span>L * fac[i<span class="number">-1</span>] * i % p; </div><div class="line">	</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;test);  </div><div class="line">	 </div><div class="line">	<span class="keyword">while</span> (test --) &#123; </div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;E); </div><div class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; ++l) &#123;</div><div class="line">			ll x = C[n][l]  * fac[n-l] % p  ; </div><div class="line">			ans += x * x % p * (n-l+<span class="number">1</span>) % p * f[l][min(l*(l<span class="number">-1</span>)/<span class="number">2</span>, E)] % p;</div><div class="line">			<span class="keyword">if</span> (ans &gt;= p) ans -= p; </div><div class="line">		&#125; </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans); </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-parsinsine-partition-function">【CC PARSIN】Sine Partition Function</h1>
<h2 id="题目大意-2">题目大意</h2>
<p><span class="math display">\[f(n, m, x) = \sum_k sin(k_1x)sin(k_2x)···sin(k_mx)\]</span></p>
<p>其中<span class="math inline">\(k_1+k_2+...+k_m=n\)</span> .</p>
<p>求<span class="math inline">\(f(n, m, x)\)</span></p>
<h2 id="解题报告-2">解题报告</h2>
<p>考虑<span class="math inline">\(n+1\)</span> , 有两个情况， 一种在末尾添加一个<span class="math inline">\(sin(x)\)</span>， 一种是将<span class="math inline">\(k_m+1\)</span>。</p>
<p>后一种情况出现和和差角问题， 利用高中（我并没有学过）的三角函数知识， 需要利用<span class="math inline">\(cos(k_mx)\)</span>进行转移。</p>
<p>令<span class="math inline">\(g(n,m,x)=\sum_k sin(k_1x)sin(k_2x)···cos(k_mx)\)</span></p>
<p>可以得到： <span class="math display">\[f(n,m,x)=f(n-1,m,x)cosx+(f(n-1,m-1,x)+g(n-1,m-1,x))sinx\]</span> <span class="math display">\[g(n,m,x)=(f(n-1,m-1,x)-f(n-1,m,x))sinx+g(n-1,m,x)cosx\]</span></p>
<p>因为<span class="math inline">\(m\)</span>很小， 所以把两个数组都压到矩阵里， 大力快速幂+矩阵乘法就搞了。</p>
<h2 id="代码-2">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">31</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> x, y; </div><div class="line">	ff a[M+M][M+M]; </div><div class="line">	matrix() &#123;</div><div class="line">		<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a)); </div><div class="line">		x = y = <span class="number">0</span>; </div><div class="line">	&#125; </div><div class="line">	matrix(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> t=<span class="number">0</span>) </div><div class="line">	:x(x), y(y) &#123; </div><div class="line">		<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a)); </div><div class="line">		<span class="keyword">if</span> (t == <span class="number">1</span>) </div><div class="line">			REP(i, x) a[i][i] = <span class="number">1</span>; </div><div class="line">	&#125; </div><div class="line">	matrix <span class="keyword">operator</span> *(<span class="keyword">const</span> matrix b)<span class="keyword">const</span>&#123; </div><div class="line">		<span class="function">matrix <span class="title">c</span><span class="params">(x, b.y)</span> </span>; </div><div class="line">		REP(i, c.x) REP(j, c.y) REP(k, y) </div><div class="line">			c.a[i][j] += a[i][k]*b.a[k][j]; </div><div class="line">		<span class="keyword">return</span> c; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">		</div><div class="line">	 	<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">' '</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">	 	REP(i, x) REP(j, y) <span class="built_in">cout</span> &lt;&lt; a[i][j] &lt;&lt; ((j+<span class="number">1</span>==y)?<span class="string">'\n'</span>:<span class="string">' '</span>);</div><div class="line">	 	</div><div class="line">	 	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">	 &#125; </div><div class="line">	  </div><div class="line">&#125; trans, ini; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> test, n, m; ff X;</div><div class="line"> </div><div class="line"><span class="function">matrix <span class="title">fast</span><span class="params">(matrix x, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line"> 	<span class="function">matrix <span class="title">ans</span><span class="params">(x.x, x.y, <span class="number">1</span>)</span></span>; </div><div class="line"> 	<span class="keyword">for</span> (; k; k&gt;&gt;=<span class="number">1</span>, x=x*x) </div><div class="line"> 		<span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = ans*x; </div><div class="line"> 	<span class="keyword">return</span> ans; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">	</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; test; </div><div class="line">	<span class="keyword">while</span> (test --) &#123; </div><div class="line">		<span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; X; </div><div class="line">		</div><div class="line">		ini = trans = matrix(); </div><div class="line">		ini.x = (m+<span class="number">1</span>)*<span class="number">2</span>, ini.y = <span class="number">1</span>; </div><div class="line">		ini.a[<span class="number">0</span>][<span class="number">0</span>]=ini.a[m+<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>; </div><div class="line">		</div><div class="line">		trans.x=trans.y=(m+<span class="number">1</span>)*<span class="number">2</span>; </div><div class="line">		ff _s = <span class="built_in">sin</span>(X), _c = <span class="built_in">cos</span>(X); </div><div class="line">		REP(i, trans.x) </div><div class="line">			<span class="keyword">if</span> (i == <span class="number">0</span> || i == m+<span class="number">1</span>) </div><div class="line">				<span class="keyword">continue</span>; </div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= m) &#123; </div><div class="line">					trans.a[i][i<span class="number">-1</span>]=_s; </div><div class="line">					trans.a[i][i]=_c; </div><div class="line">					trans.a[i][m+<span class="number">1</span>+i]=_s; </div><div class="line">				&#125; <span class="keyword">else</span> &#123; </div><div class="line">					trans.a[i][i-(m+<span class="number">1</span>)<span class="number">-1</span>]=_c; </div><div class="line">					trans.a[i][i-(m+<span class="number">1</span>)]=-_s; </div><div class="line">					trans.a[i][i]=_c; </div><div class="line">				&#125; </div><div class="line">		</div><div class="line">		trans = fast(trans, n); </div><div class="line">		</div><div class="line"><span class="comment">//		trans.print(); </span></div><div class="line">		trans = trans * ini; </div><div class="line">		</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; trans.a[m][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-lecoinslittle-elephant-and-colored-coins">【CC LECOINS】Little Elephant and Colored Coins</h1>
<h2 id="题目大意-3">题目大意</h2>
<p>有<span class="math inline">\(n\)</span>种硬币， 每种硬币无限使用， 有一个价值<span class="math inline">\(v\)</span>和颜色<span class="math inline">\(c\)</span>， 每次询问能否凑出价值<span class="math inline">\(S\)</span>， 最多用多少颜色。</p>
<h2 id="解题报告-3">解题报告</h2>
<p>对价值最小的硬币做模意义， 因为价值最大是<span class="math inline">\(200000\)</span>。</p>
<p>设<span class="math inline">\(f[i][j]\)</span>表示使用<span class="math inline">\(i\)</span>种颜色，价值模意义下为<span class="math inline">\(j\)</span>的最小能凑出的价值， 把同一种颜色的硬币放在一起， 对<span class="math inline">\(f[i][j]\)</span>从<span class="math inline">\(f[i-1][k]\)</span>进行更新， 然后利用取模成环的性质，对<span class="math inline">\(f[i][j]\)</span>从<span class="math inline">\(f[i][k]\)</span>更新， 复杂度是<span class="math inline">\(O(n^2*V)\)</span></p>
<p>（要把和价值最小硬币颜色相同的硬币单独拿出来， 更新<span class="math inline">\(f[i][j]\)</span>得到<span class="math inline">\(g[i][j]\)</span>）</p>
<p>询问的时候， 枚举<span class="math inline">\(i\)</span>, 看<span class="math inline">\(f[i][S%V]\)</span>和<span class="math inline">\(S\)</span>的大小关系， 在判断<span class="math inline">\(g[i][S%V]\)</span>和<span class="math inline">\(S\)</span>的大小关系， 更新答案</p>
<p>时间复杂度<span class="math inline">\(O(n^2V+Q*n)\)</span></p>
<h2 id="代码-3">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> ll INF = <span class="number">1000000000000000000L</span>L;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200005</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, m, cnt; ll mV, mC, V[N]; </div><div class="line">pii A[<span class="number">64</span>];</div><div class="line">ll R[<span class="number">64</span>][N],  _R[<span class="number">64</span>][N];</div><div class="line"><span class="keyword">bool</span> U[N];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="built_in">vector</span>&lt; pii &gt; T)</span> </span>&#123;</div><div class="line">	FORD (i, cnt, <span class="number">0</span>) REP (it, T.size())</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = mV<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--)</div><div class="line">			<span class="keyword">if</span> (R[i][j] &lt; INF) R[i+<span class="number">1</span>][(j+T[it].se)%mV] = </div><div class="line">					min(R[i+<span class="number">1</span>][(j+T[it].se)%mV], R[i][j]+T[it].se);</div><div class="line">					</div><div class="line">	REP(i, cnt+<span class="number">2</span>) REP(j, T.size()) &#123;</div><div class="line">		ll v = T[j].se, vm = v%mV;</div><div class="line">		<span class="keyword">if</span> (vm == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">		<span class="keyword">int</span> d = __gcd((ll)vm, mV);</div><div class="line">		REP(x, d) &#123;</div><div class="line">			<span class="keyword">int</span> z = x, y = x;</div><div class="line">			<span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">				<span class="keyword">if</span> (R[i][y] &lt; R[i][z]) z = y;</div><div class="line">				y = (y + vm) % mV;</div><div class="line">				<span class="keyword">if</span> (y == x) <span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">			y = z;</div><div class="line">			<span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">				<span class="keyword">int</span> w = (y + vm) % mV;</div><div class="line">				R[i][w] = min(R[i][w], R[i][y]+v);</div><div class="line">				y = w; <span class="keyword">if</span> (y == z) <span class="keyword">break</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	REP(i, <span class="number">64</span>) REP(j, N) R[i][j] = INF;</div><div class="line">	R[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">	mV = INF, mC = <span class="number">-1</span>;</div><div class="line">	REP(i, n) &#123;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; A[i].se &gt;&gt; A[i].fi;</div><div class="line">		<span class="keyword">if</span> (A[i].se &lt; mV) </div><div class="line">			mV = A[i].se, mC = A[i].fi;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	sort(A, A+n);</div><div class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">	<span class="built_in">vector</span>&lt; pii &gt; _T;</div><div class="line">	<span class="keyword">while</span> (i &lt; n) &#123;</div><div class="line">		<span class="keyword">if</span> (A[i].first == mC) &#123;</div><div class="line">			<span class="keyword">if</span> (A[i].se != mV) _T.pb(A[i]);</div><div class="line">			i ++; <span class="keyword">continue</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">		<span class="built_in">vector</span>&lt; pii &gt; T;</div><div class="line">		<span class="keyword">while</span> (i+j&lt;n &amp;&amp; A[i+j].fi==A[i].fi) </div><div class="line">			T.pb(A[i+j]), j ++;</div><div class="line">			</div><div class="line">		update(T), i += j, cnt ++;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	REP(i, <span class="number">64</span>) REP(j, mV) _R[i][j] = R[i][j];</div><div class="line">	update(_T), cnt ++;</div><div class="line"> </div><div class="line">	<span class="built_in">cin</span> &gt;&gt; m;</div><div class="line">	</div><div class="line">	REP(i, m) &#123; </div><div class="line">		ll s; <span class="keyword">int</span> res = <span class="number">-1</span>;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;s);</div><div class="line">		REP(j, n+<span class="number">1</span>) &#123;</div><div class="line">			ll d = _R[j][s % mV];</div><div class="line">			<span class="keyword">if</span> (d &gt;= INF) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">if</span> (d &gt; s) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">if</span> (d == s) res = max(res, j);</div><div class="line">			<span class="keyword">else</span> res = max(res, j + <span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">if</span> (!_T.empty()) &#123;</div><div class="line">			REP(j, n+<span class="number">1</span>)  &#123;</div><div class="line">				ll d = R[j][s % mV];</div><div class="line">				<span class="keyword">if</span> (d &gt;= INF) <span class="keyword">continue</span>;</div><div class="line">				<span class="keyword">if</span> (d &gt; s) <span class="keyword">continue</span>;</div><div class="line">				res = max(res, j);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-anudtq-dynamic-trees-and-queries">【CC ANUDTQ】 Dynamic Trees and Queries</h1>
<h2 id="题目大意-4">题目大意</h2>
<p>四种操作： 1. 向一个点连一个权值为<span class="math inline">\(v\)</span>的叶子； 2. 向一个点的子树加一个权值<span class="math inline">\(v\)</span>; 3. 删除一棵子树； 4. 询问一棵子树的权值和；</p>
<h2 id="解题报告-4">解题报告</h2>
<p>本来增加连边的问题要先试试LCT, 但设计子树加和子树查询要维护若干信息， 比较麻烦。</p>
<p>如果用SPLAY维护出栈入栈序就十分的方便， 具体的， 就是每个点有一个入栈点和一个出栈点， 出栈点是没有权值的size的。</p>
<p>剩下就是模板了。。</p>
<h2 id="代码-4">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;i++)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; x &lt;&lt;endl;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> f;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">400020</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> to, nxt; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>):nxt(nxt),to(to)&#123;&#125;</div><div class="line">&#125; e[N];</div><div class="line"><span class="keyword">int</span> head[N], n, cnt, tot, rec, rt; </div><div class="line"><span class="keyword">int</span> sn[N][<span class="number">2</span>], fa[N], sz[N], s[N], key[N], sm[N], ps[N], dn[N], ot[N], Eu[N]; </div><div class="line">ll ans;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">in</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch = getchar(); <span class="keyword">int</span> f=<span class="number">1</span>,x =<span class="number">0</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar())</div><div class="line">		<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f = <span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar())</div><div class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">	<span class="keyword">return</span> x*f; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">	e[++tot]=edge(head[x], y), head[x]=tot;</div><div class="line">	e[++tot]=edge(head[y], x), head[y]=tot;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">birth</span><span class="params">(<span class="keyword">int</span> _v, <span class="keyword">int</span> _s)</span> </span>&#123;</div><div class="line">	++cnt, sn[cnt][<span class="number">0</span>]=sn[cnt][<span class="number">1</span>]=fa[cnt]=<span class="number">0</span>, sz[cnt]=s[cnt]=_s; </div><div class="line">	key[cnt] = sm[cnt] = _v; <span class="keyword">return</span> cnt;  </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ad</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> _v)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!x) <span class="keyword">return</span>;  </div><div class="line">	ps[x] += _v, sm[x] += _v * sz[x]; </div><div class="line">	key[x] += s[x] * _v; </div><div class="line">&#125; </div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	sz[x] = s[x], sm[x] = key[x]; </div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">0</span>]) sz[x] += sz[sn[x][<span class="number">0</span>]], sm[x] += sm[sn[x][<span class="number">0</span>]]; </div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">1</span>]) sz[x] += sz[sn[x][<span class="number">1</span>]], sm[x] += sm[sn[x][<span class="number">1</span>]]; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (!x) <span class="keyword">return</span>; </div><div class="line">	<span class="keyword">if</span> (ps[x]) ad(sn[x][<span class="number">0</span>], ps[x]), ad(sn[x][<span class="number">1</span>], ps[x]), ps[x]=<span class="number">0</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> y = fa[x], z = fa[y], d = (sn[y][<span class="number">1</span>]==x); </div><div class="line">	fa[x] = z; <span class="keyword">if</span> (z) sn[z][sn[z][<span class="number">1</span>]==y] = x; </div><div class="line">	<span class="keyword">if</span> (sn[x][d^<span class="number">1</span>]) fa[sn[x][d^<span class="number">1</span>]] = y; sn[y][d] = sn[x][d^<span class="number">1</span>]; </div><div class="line">	fa[y] = x, sn[x][d^<span class="number">1</span>] = y, up(y); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> aim=<span class="number">0</span>)</span></span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> stk[N], top=<span class="number">0</span>, tmp; tmp = x;  </div><div class="line">	<span class="keyword">while</span> (tmp != aim) stk[++top]=tmp, tmp=fa[tmp]; </div><div class="line">	<span class="keyword">while</span> (top) down(stk[top]), --top; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> y=fa[x]; y!=aim; rotate(x), y=fa[x]) &#123;</div><div class="line">		<span class="keyword">if</span> (fa[y] == aim) <span class="keyword">continue</span>; </div><div class="line">		<span class="keyword">if</span> ((sn[y][<span class="number">0</span>]==x)^(sn[fa[y]][<span class="number">0</span>]==y)) rotate(x); </div><div class="line">		<span class="keyword">else</span> rotate(y); </div><div class="line">	&#125;</div><div class="line">	up(x); <span class="keyword">if</span> (!aim) rt = x; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span>&#123;</div><div class="line">	Eu[ ++rec ] = dn[x];</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x], y; i; i=e[i].nxt)</div><div class="line">		<span class="keyword">if</span> (y = e[i].to, y != fa) dfs(y, x);</div><div class="line">	Eu[ ++rec ] = ot[x];</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">	<span class="keyword">int</span> mid = (l+r) &gt;&gt; <span class="number">1</span>, x = Eu[mid];</div><div class="line">	sn[x][<span class="number">0</span>] = build(l, mid<span class="number">-1</span>);</div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">0</span>]) fa[sn[x][<span class="number">0</span>]] = x;</div><div class="line">	sn[x][<span class="number">1</span>] = build(mid+<span class="number">1</span>, r); </div><div class="line">	<span class="keyword">if</span> (sn[x][<span class="number">1</span>]) fa[sn[x][<span class="number">1</span>]] = x; </div><div class="line">	up(x); <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	splay(x);</div><div class="line">	<span class="keyword">if</span> (!sn[x][<span class="number">0</span>]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (x = sn[x][<span class="number">0</span>], down(x); sn[x][<span class="number">1</span>];) </div><div class="line">		x = sn[x][<span class="number">1</span>], down(sn[x][<span class="number">1</span>]);</div><div class="line">	<span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">main() &#123;</div><div class="line"><span class="comment">//	freopen("A.in", "r", stdin); </span></div><div class="line">	n = in();</div><div class="line">	REP(i, <span class="number">1</span>, n) &#123;</div><div class="line">		dn[i] = birth(in(), <span class="number">1</span>);</div><div class="line">		ot[i] = birth(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">	&#125;</div><div class="line">	REP(i, <span class="number">1</span>, n<span class="number">-1</span>) add(in()+<span class="number">1</span>, in()+<span class="number">1</span>);</div><div class="line">	dfs(<span class="number">1</span>, <span class="number">0</span>), rt = build(<span class="number">1</span>, rec);</div><div class="line">	</div><div class="line">	<span class="keyword">int</span> t, x, tmp; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> m = in(); m--; ) &#123;</div><div class="line">		t = in(), x = in()+<span class="number">1</span>+ans;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">1</span>)&#123;</div><div class="line">			dn[++n] = birth(in(), <span class="number">1</span>), ot[n] = birth(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">			sn[dn[n]][<span class="number">1</span>] = ot[n], fa[ot[n]] = dn[n]; </div><div class="line">			splay(ot[x]), tmp = sn[ot[x]][<span class="number">0</span>];</div><div class="line">			sn[ot[x]][<span class="number">0</span>] = dn[n], fa[dn[n]] = ot[x];</div><div class="line">			sn[dn[n]][<span class="number">0</span>] = tmp;</div><div class="line">			<span class="keyword">if</span> (tmp) fa[tmp] = dn[n];</div><div class="line">			up(dn[n]), up(ot[x]); </div><div class="line"><span class="comment">//			DEBUG(sz[ot[x]]); </span></div><div class="line">		&#125;  	</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">2</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (!pre(dn[x])) </div><div class="line">				splay(ot[x]), ad(sn[rt][<span class="number">0</span>], in()), up(rt); </div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				splay(pre(dn[x])), splay(ot[x], rt);</div><div class="line">				ad(sn[sn[rt][<span class="number">1</span>]][<span class="number">0</span>], in());</div><div class="line">				up(sn[rt][<span class="number">1</span>]), up(rt); </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">3</span>) &#123;</div><div class="line">			splay(pre(dn[x])), splay(ot[x], rt);</div><div class="line">			sn[sn[rt][<span class="number">1</span>]][<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">			up(sn[rt][<span class="number">1</span>]), up(rt); </div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (t == <span class="number">4</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (!pre(dn[x]))</div><div class="line">				splay(ot[x]), <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans=sm[sn[rt][<span class="number">0</span>]]);</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				splay(pre(dn[x])), splay(ot[x], rt);</div><div class="line">				<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans=sm[sn[sn[rt][<span class="number">1</span>]][<span class="number">0</span>]]);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-matchexpected-maximum-matching">【CC MATCH】Expected Maximum Matching</h1>
<h2 id="题目大意-5">题目大意</h2>
<p>一个二分图， 点<span class="math inline">\(i\)</span>和点<span class="math inline">\(j\)</span>之间有边相连的概率为<span class="math inline">\(p[i][j]\)</span>, 求期望最大匹配数。</p>
<h2 id="解题报告-5">解题报告</h2>
<p>有一个叫做Hall定理的东西， 内容大概是， 二分图存在完美匹配的充分必要条件是一类点的任意一个大小为<span class="math inline">\(x\)</span>的点集都与另一类点中<span class="math inline">\(&gt;=x\)</span>个点相连。</p>
<p>可以注意到， 左边的点数量少到出奇， 这使得合法的状态非常的少， 使用<span class="math inline">\(2^{2^n}\)</span>表示子集是否满足Hall定理，因为子集满足Hall定理具有包含关系，也就是一个集合满足， 他的子集都需要满足， 所以通过打表， 发现状态数十分的有限。</p>
<p>然后预处理转移， 对于一个状态<span class="math inline">\(x\)</span>, 预处理出与一个右侧的点联通情况为<span class="math inline">\(S\)</span>时，得到的Hall定理状态为<span class="math inline">\(nxt\)</span> ，再预处理出与左侧每个点联通情况为<span class="math inline">\(S\)</span>的概率。</p>
<p>之后直接dp, <span class="math inline">\(f[i][j]\)</span>表示右侧前<span class="math inline">\(i\)</span>个点， Hall定理状态为<span class="math inline">\(j\)</span>的概率， 直接计算期望就好了。</p>
<h2 id="代码-5">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> B(x) (1u&lt;&lt;(x))</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">105</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> trans[N][<span class="number">40</span>],ful[<span class="number">6</span>],as[N],n,m,w,tot; </div><div class="line">ff f[M][N],g[M][<span class="number">40</span>],p[M][<span class="number">6</span>]; ui q[N]; <span class="built_in">map</span>&lt;ui,<span class="keyword">int</span>&gt; hsh; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(ui S)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (hsh.count(S) == <span class="number">0</span>) q[hsh[S] = tot++]=S; </div><div class="line">	<span class="keyword">return</span> hsh[S]; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m); w = <span class="number">1</span>&lt;&lt;n; </div><div class="line">	rep(i, n) rep(j, m) <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;p[j][i]); </div><div class="line">	rep(i,w) &#123;<span class="keyword">int</span> cnt=<span class="number">0</span>; rep(j,n) <span class="keyword">if</span>(i&amp;B(j)) ++cnt; ful[cnt]|=B(i);&#125;</div><div class="line">	<span class="keyword">int</span> k = <span class="number">0</span>; </div><div class="line">	<span class="keyword">for</span> (find(<span class="number">1</span>); k&lt;tot; ++k) &#123; </div><div class="line">		ui x = q[k]; </div><div class="line">		<span class="keyword">static</span> ui nxt[<span class="number">6</span>];</div><div class="line">		rep(i, n) nxt[i] = <span class="number">0</span>; </div><div class="line">		rep(i, w) <span class="keyword">if</span> (x &amp; B(i)) rep(j, n) nxt[j]|=B(i|B(j)); </div><div class="line">		rep(i, w) &#123; ui S = x ; </div><div class="line">			rep(j, n) <span class="keyword">if</span> (i&amp;B(j)) S|=nxt[j]; </div><div class="line">			trans[k][i] = find(S); </div><div class="line">		&#125; </div><div class="line">		VEP(i, n, <span class="number">0</span>) <span class="keyword">if</span> (x&amp;ful[i]) &#123;as[k]=i; <span class="keyword">break</span>;&#125;</div><div class="line">	&#125;</div><div class="line">	rep(i, m) rep(x, w) &#123; g[i][x]=<span class="number">1</span>;rep(j,n) </div><div class="line">		<span class="keyword">if</span>(x&amp;B(j))g[i][x]*=p[i][j];<span class="keyword">else</span> g[i][x]*=(<span class="number">1</span>-p[i][j]);&#125; </div><div class="line">	</div><div class="line">	</div><div class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>; rep(i, m) rep(k, tot) rep(x, w) </div><div class="line">		f[i+<span class="number">1</span>][trans[k][x]] += f[i][k] * g[i][x]; </div><div class="line"></div><div class="line">	ff ans = <span class="number">0</span>; </div><div class="line">	rep(i, tot) ans += f[m][i] * (ff)as[i]; </div><div class="line">	</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, ans); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-cot5count-on-a-treap">【CC COT5】Count on a Treap</h1>
<h2 id="题目大意-6">题目大意</h2>
<p>维护一颗Treap, 支持: 1. 插入一个key和weight分别为k, w的点； 2. 删除一个key是k的点； 3. 返回key是ku和kv的两个点在树上的距离；</p>
<h2 id="解题报告-6">解题报告</h2>
<p>主要就是挖掘Treap的性质， 也就是Treap上的点<span class="math inline">\(x\)</span>是点<span class="math inline">\(y\)</span>的祖先， 当且仅当key在<span class="math inline">\(x\)</span>，<span class="math inline">\(y\)</span>之间的数重量都小于<span class="math inline">\(w_x\)</span>;</p>
<p>treap上两个点的LCA就是key在两点之间的重量最大数， 这个使用区间最大值的 位置就可以确定；</p>
<p>那么关键就是确定一个点在treap中的深度， 这个利用点<span class="math inline">\(x\)</span>是点<span class="math inline">\(y\)</span>的祖先的条件， 分别寻找点左右两侧的祖先数量， 求和就可以得到深度。</p>
<p>点<span class="math inline">\(x\)</span>左、右祖先的个数， 实际是维护一个向左、右单调递增的序列，这个通过记录区间max和区间向左向右单增序列长度， 可以单次<span class="math inline">\(\log n\)</span>(分入左右子树)进行合并， 从而<span class="math inline">\(O(n\log^2 n)\)</span>修改+查询；</p>
<h2 id="代码-6">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i)</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200010</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ask</span>  &#123;</span></div><div class="line">	<span class="keyword">int</span> tp; ui x, y;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tp);</div><div class="line">		<span class="keyword">if</span> (tp==<span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">"%u"</span>,&amp;x); </div><div class="line">		<span class="keyword">else</span> <span class="built_in">scanf</span>(<span class="string">"%u%u"</span>, &amp;x, &amp;y);</div><div class="line">	&#125;</div><div class="line">&#125; as[N];</div><div class="line"> </div><div class="line">ui x[N],y[N];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, m, now, ans;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(ui *a, ui x)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> l=<span class="number">1</span>, r=m+<span class="number">1</span>, ans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (l &lt; r) &#123;</div><div class="line">		<span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (a[mid] &gt;= x)</div><div class="line">			ans = mid, r = mid;</div><div class="line">		<span class="keyword">else</span> l = mid+<span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> l[N&lt;&lt;<span class="number">2</span>], r[N&lt;&lt;<span class="number">2</span>], we[N&lt;&lt;<span class="number">2</span>], mx[N&lt;&lt;<span class="number">2</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findl</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (v==<span class="number">0</span>) <span class="keyword">return</span> l[x];</div><div class="line">	<span class="keyword">if</span> (v &gt; mx[x]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (l[x] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (v &lt;= mx[x&lt;&lt;<span class="number">1</span>]) </div><div class="line">		<span class="keyword">return</span> l[x]-l[x&lt;&lt;<span class="number">1</span>]+findl(x&lt;&lt;<span class="number">1</span>, v);</div><div class="line">	<span class="keyword">return</span> findl(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, v);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findr</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (v==<span class="number">0</span>) <span class="keyword">return</span> r[x];</div><div class="line">	<span class="keyword">if</span> (v &gt; mx[x]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (r[x] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (v &lt;= mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]) </div><div class="line">		<span class="keyword">return</span> r[x]-r[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+findr(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,v);</div><div class="line">	<span class="keyword">return</span> findr(x&lt;&lt;<span class="number">1</span>,v);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (mx[x&lt;&lt;<span class="number">1</span>]&gt;mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]) &#123;</div><div class="line">		mx[x]=mx[x&lt;&lt;<span class="number">1</span>]; we[x]=we[x&lt;&lt;<span class="number">1</span>];</div><div class="line">	&#125; <span class="keyword">else</span>  &#123;</div><div class="line">		mx[x]=mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]; we[x]=we[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</div><div class="line">	&#125;</div><div class="line">	l[x]=l[x&lt;&lt;<span class="number">1</span>]+findl(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, mx[x&lt;&lt;<span class="number">1</span>]);</div><div class="line">	r[x]=r[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+findr(x&lt;&lt;<span class="number">1</span>,mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ll == rr) &#123;</div><div class="line">		l[x]=<span class="number">1</span>, r[x]=<span class="number">1</span>, we[x]=ll, mx[x]=_r;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">int</span> mid=ll+rr&gt;&gt;<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (_l&lt;=mid) insert(x&lt;&lt;<span class="number">1</span>,ll,mid,_l,_r); </div><div class="line">		<span class="keyword">else</span> insert(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rr,_l,_r);</div><div class="line">		push_up(x);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ll==rr) &#123;</div><div class="line">		l[x]=<span class="number">0</span>, r[x]=<span class="number">0</span>, we[x]=<span class="number">0</span>, mx[x]=<span class="number">0</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">int</span> mid=ll+rr&gt;&gt;<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (mid&gt;=p) del(x&lt;&lt;<span class="number">1</span>,ll,mid,p); </div><div class="line">		<span class="keyword">else</span> del(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rr,p);</div><div class="line">		push_up(x);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findl</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ll==rr) &#123;</div><div class="line">		now=mx[x]; <span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">	&#125; <span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">int</span> mid=ll+rr&gt;&gt;<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (mid&gt;=p) &#123;</div><div class="line">			<span class="keyword">int</span> ans=findl(x&lt;&lt;<span class="number">1</span>,ll,mid,p);</div><div class="line">			ans+=findl(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,now);</div><div class="line">			now=max(now,mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]); <span class="keyword">return</span> ans;</div><div class="line">		&#125; <span class="keyword">else</span> <span class="keyword">return</span> findl(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rr,p);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findr</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ll==rr) &#123;</div><div class="line">		now=mx[x]; <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">int</span> mid=ll+rr&gt;&gt;<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (mid&gt;=p) <span class="keyword">return</span> findr(x&lt;&lt;<span class="number">1</span>,ll,mid,p);</div><div class="line">		<span class="keyword">else</span>  &#123;</div><div class="line">			<span class="keyword">int</span> ans=findr(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rr,p);</div><div class="line">			ans+=findr(x&lt;&lt;<span class="number">1</span>,now);</div><div class="line">			now=max(now,mx[x&lt;&lt;<span class="number">1</span>]); <span class="keyword">return</span> ans;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findd</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> findl(<span class="number">1</span>,<span class="number">1</span>,m,x)+findr(<span class="number">1</span>,<span class="number">1</span>,m,x);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">findmax</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (ll&gt;_r||rr&lt;_l) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span> (ll&gt;=_l&amp;&amp;rr&lt;=_r) &#123;</div><div class="line">		<span class="keyword">if</span> (mx[x]&gt;now) </div><div class="line">			now=mx[x], ans=we[x];</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid=ll+rr&gt;&gt;<span class="number">1</span>;</div><div class="line">	findmax(x&lt;&lt;<span class="number">1</span>,ll,mid,_l,_r);</div><div class="line">	findmax(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,rr,_l,_r);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) as[i].read();</div><div class="line">	m=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span> (as[i].tp==<span class="number">0</span>) &#123;</div><div class="line">		x[++m]=as[i].x; y[m]=as[i].y;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	sort(x+<span class="number">1</span>,x+m+<span class="number">1</span>);</div><div class="line">	sort(y+<span class="number">1</span>,y+m+<span class="number">1</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">		<span class="keyword">if</span> (as[i].tp==<span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">int</span> l=find(x,as[i].x),r=find(y,as[i].y);</div><div class="line">			insert(<span class="number">1</span>,<span class="number">1</span>,m,l,r);</div><div class="line">		&#125; </div><div class="line">		<span class="keyword">if</span> (as[i].tp==<span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">int</span> l=find(x,as[i].x); del(<span class="number">1</span>,<span class="number">1</span>,m,l);</div><div class="line">		&#125; </div><div class="line">		<span class="keyword">if</span> (as[i].tp==<span class="number">2</span>) &#123;</div><div class="line">			<span class="keyword">int</span> l=find(x,as[i].x),r=find(x,as[i].y); now=<span class="number">0</span>; ans=<span class="number">0</span>;</div><div class="line">			<span class="keyword">if</span> (l&gt;r) swap(l,r);</div><div class="line">			findmax(<span class="number">1</span>,<span class="number">1</span>,m,l,r);</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,findd(l)+findd(r)-findd(ans)*<span class="number">2</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-fnfibonacci-number">【CC FN】Fibonacci Number</h1>
<h2 id="题目大意-7">题目大意</h2>
<p>在<span class="math inline">\(\mod \ p\)</span>意义下, 斐波那契数列第<span class="math inline">\(n\)</span>项<span class="math inline">\(f_n=C\)</span>的最小的<span class="math inline">\(n\)</span>.</p>
<h2 id="解题报告-7">解题报告</h2>
<p>题目中说<span class="math inline">\(p \mod 10=1/9\)</span>, 这个性质就保证了<span class="math inline">\(\sqrt{5}\)</span>在<span class="math inline">\(\mod p\)</span>意义下存在对应整数（<span class="math inline">\(5^{(p-1)/2}=1(\mod p)\)</span>）；</p>
<p>现在令<span class="math inline">\(x=\frac{\sqrt{5}+1}{2}\)</span>, 则<span class="math inline">\(x^n-(-x)^{-n}=\sqrt{5}C\)</span></p>
<p>从而， 对<span class="math inline">\(n\)</span>分奇偶情况讨论， 得到：</p>
<ol style="list-style-type: decimal">
<li><span class="math inline">\(n\)</span>为偶数， 且<span class="math inline">\((x^n)^2-\sqrt{5}C \times (x^n)-1=0\)</span>;</li>
<li><span class="math inline">\(n\)</span>为奇数， 且<span class="math inline">\((x^n)^2-\sqrt{5}C \times (x^n)+1=0\)</span>;</li>
</ol>
<p>利用求根公式+二次剩余+BSGS可以得到最小的<span class="math inline">\(n\)</span> ;</p>
<p>关于二次剩余， 求<span class="math inline">\(x^2=n(\mod p)\)</span> , 先随机找到一个<span class="math inline">\(w=a^2-n\)</span>, 且<span class="math inline">\(w^{(p-1)/2}=-1(\mod p)\)</span>, 那么<span class="math inline">\(x=(a+ \sqrt{w})^{(p+1)/2}\)</span>就是一个合法的<span class="math inline">\(x\)</span>;</p>
<p>因为<span class="math inline">\(x^2 = (a+\sqrt{w})^{p+1}=a^2-w=n\)</span></p>
<h2 id="代码-7">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> Hm = <span class="number">4705219</span>;</div><div class="line"> </div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> seed;</div><div class="line"><span class="keyword">int</span> C,p,w,r2,s5,L,A;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Hmap</span> &#123;</span></div><div class="line"> </div><div class="line">	<span class="keyword">int</span> info[Hm][<span class="number">2</span>],nxt[Hm],head[Hm],use[Hm],cnt,tot; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= cnt;i ++) head[use[i]] = <span class="number">0</span>;</div><div class="line">		cnt = <span class="number">0</span>, tot = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> mi,<span class="keyword">int</span> va)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> p = va % Hm;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = head[p];i;i = nxt[i])</div><div class="line">			<span class="keyword">if</span> (info[i][<span class="number">0</span>] == va) <span class="keyword">return</span>;</div><div class="line">		info[++ tot][<span class="number">0</span>] = va,info[tot][<span class="number">1</span>] = mi;</div><div class="line">		<span class="keyword">if</span> (!head[p]) use[++ cnt] = p;</div><div class="line">		nxt[tot] = head[p],head[p] = tot;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> va)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> p = va % Hm;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = head[p];i;i = nxt[i])</div><div class="line">			<span class="keyword">if</span> (info[i][<span class="number">0</span>] == va) <span class="keyword">return</span> info[i][<span class="number">1</span>];</div><div class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	&#125;</div><div class="line">&#125; hsh[<span class="number">2</span>];</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Z</span> &#123;</span></div><div class="line">	LL a,b; Z(<span class="keyword">void</span>)&#123;&#125;</div><div class="line">	Z(LL a,LL b) : a(a),b(b)&#123;&#125;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">Z <span class="keyword">operator</span> *(<span class="keyword">const</span> Z &amp;a,<span class="keyword">const</span> Z &amp;b) &#123;</div><div class="line">	<span class="keyword">return</span> Z((a.a * b.a % p + a.b * b.b % p * w % p) % p,(a.a * b.b % p + a.b * b.a % p) % p);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">updt</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (b == <span class="number">-1</span>) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span> (a == <span class="number">-1</span>) a = b; <span class="keyword">else</span></div><div class="line">		a = min(a,b);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">RAND</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (seed = (seed * <span class="number">31</span> + <span class="number">998244353</span>));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">fast</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	LL as = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(;b;b &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) as = as * a % p;</div><div class="line">		a = a * <span class="number">1l</span>l * a % p;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> as;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function">Z <span class="title">fast</span><span class="params">(Z a,<span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	Z as = Z(<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">	<span class="keyword">for</span>(;b;b &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) as = as * a;</div><div class="line">		a = a * a;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> as;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">lerend</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (fast(n,(p - <span class="number">1</span>) / <span class="number">2</span>) == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> _sqrt(<span class="keyword">int</span> n) &#123;</div><div class="line">	<span class="keyword">if</span> (!n) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (lerend(n) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">int</span> a;</div><div class="line">	<span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">		a = RAND() % p;</div><div class="line">		w = (a * <span class="number">1l</span>l * a - n + p) % p;</div><div class="line">		<span class="keyword">if</span> (lerend(w) == <span class="number">-1</span>) <span class="keyword">break</span>;</div><div class="line">	&#125;</div><div class="line">	Z cur = Z(a,<span class="number">1</span>);</div><div class="line">	cur = fast(cur,(p + <span class="number">1</span>) / <span class="number">2</span>);</div><div class="line">	<span class="keyword">return</span> cur.a;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> _solve(<span class="keyword">int</span> sig,<span class="keyword">int</span> tar) &#123;</div><div class="line">	<span class="keyword">int</span> mi = <span class="number">-1</span>,least = fast(fast(A,L),p - <span class="number">2</span>);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,tmp = tar;i &lt;= p / L;i ++,tmp = <span class="number">1l</span>l * tmp * least % p) &#123;</div><div class="line">		<span class="keyword">int</span> fr = i * L,v = hsh[(sig - (fr &amp; <span class="number">1</span>) + <span class="number">2</span>) % <span class="number">2</span>].find(tmp);</div><div class="line">		<span class="keyword">if</span> (v == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">		updt(mi,v + fr);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> mi;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;C, &amp;p);</div><div class="line">	r2 = fast(<span class="number">2</span>,p - <span class="number">2</span>),s5 = _sqrt(<span class="number">5</span>);</div><div class="line">	L = <span class="built_in">sqrt</span>(p);</div><div class="line">	A = (<span class="number">1</span> + s5) % p * <span class="number">1l</span>l * r2 % p;</div><div class="line">	hsh[<span class="number">0</span>].clear();</div><div class="line">	hsh[<span class="number">1</span>].clear();</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,tmp = <span class="number">1</span>;i &lt; L;i ++,tmp = tmp * <span class="number">1l</span>l * A % p)</div><div class="line">		hsh[i &amp; <span class="number">1</span>].push(i,tmp);</div><div class="line">	C = C * <span class="number">1l</span>l * s5 % p;</div><div class="line">	<span class="keyword">int</span> Ans = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> od = <span class="number">0</span>,sig = <span class="number">1</span>;od &lt; <span class="number">2</span>;od ++,sig *= <span class="number">-1</span>) &#123;</div><div class="line">		<span class="keyword">int</span> delta = (C * <span class="number">1l</span>l * C % p + <span class="number">4</span> * sig % p + p) % p;</div><div class="line">		delta = _sqrt(delta);</div><div class="line">		<span class="keyword">if</span> (delta == <span class="number">-1</span>) <span class="keyword">continue</span>;</div><div class="line">		updt(Ans,_solve(od,(C + delta) % p * <span class="number">1l</span>l * r2 % p));</div><div class="line">		updt(Ans,_solve(od,(C - delta + p) % p * <span class="number">1l</span>l * r2 % p));</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Ans);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	seed = <span class="number">17</span>;</div><div class="line">	<span class="keyword">int</span> T;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</div><div class="line">	<span class="keyword">for</span>(;T;T --) work();</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125; </div><div class="line">```	</div><div class="line"></div><div class="line"># 【CC SEALCM】Sereja <span class="keyword">and</span> LCM</div><div class="line">## 题目大意</div><div class="line"></div><div class="line">对于$k \in [l,r]$, 其中满足$k|LCM(a_1,a_2...a_n)$且$max(a_i)&lt;=m$的数列个数。 </div><div class="line"></div><div class="line">## 解题报告</div><div class="line"></div><div class="line">这是一个千载难逢的水题呀！</div><div class="line"></div><div class="line">因为$m$和$k$的范围都很小， 所以质因子的个数最多只有$<span class="number">5</span>$个； </div><div class="line"></div><div class="line">用一个$<span class="number">2</span>^<span class="number">5</span>$表示$k$的每个质因子是否满足的状态， 然后压到矩阵里， 大力转移就可以了。</div><div class="line"></div><div class="line">## 代码</div><div class="line"></div><div class="line">```c++</div><div class="line">#include &lt;bits/stdc++.h&gt; </div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> B(x) (1&lt;&lt;(x))</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">1000000007</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, test, m, l, r, t, a[<span class="number">5</span>]; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line"> 	t = <span class="number">0</span>; <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a)); </div><div class="line"> 	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>; i*i&lt;=d; ++i) </div><div class="line"> 		<span class="keyword">if</span> (d % i==<span class="number">0</span>) &#123; </div><div class="line"> 			a[t++]=<span class="number">1</span>; <span class="keyword">while</span>(d%i==<span class="number">0</span>)a[t<span class="number">-1</span>]*=i,d/=i;  </div><div class="line"> 		&#125; </div><div class="line">  	<span class="keyword">if</span> (d &gt; <span class="number">1</span>) a[t++]=d, d=<span class="number">1</span>; </div><div class="line">&#125; </div><div class="line">  </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">matrix</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> x, y; ll a[<span class="number">20</span>][<span class="number">20</span>]; </div><div class="line">	matrix()&#123;x=y=<span class="number">0</span>; <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));&#125;</div><div class="line">	matrix(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> t=<span class="number">0</span>):x(x),y(y) &#123;</div><div class="line">		<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a)); </div><div class="line">		<span class="keyword">if</span>(t) rep(i, x) a[i][i]=<span class="number">1</span>; </div><div class="line">	&#125; </div><div class="line">	matrix <span class="keyword">operator</span> * (<span class="keyword">const</span> matrix b) <span class="keyword">const</span> &#123; </div><div class="line">		<span class="function">matrix <span class="title">c</span><span class="params">(x, b.y)</span> </span>;</div><div class="line">		rep(i, c.x) rep(j, c.y) rep(k, y)</div><div class="line">			c.a[i][j]=(c.a[i][j]+a[i][k]*b.a[k][j]%p)%p; </div><div class="line">		<span class="keyword">return</span> c; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; </div><div class="line">		<span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">", "</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">		rep(i, x) rep(j, y) <span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;((j+<span class="number">1</span>==y)?<span class="string">'\n'</span>:<span class="string">' '</span>); </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">&#125; ;</div><div class="line"> </div><div class="line">matrix _fast(matrix x, <span class="keyword">int</span> k) &#123;</div><div class="line">	<span class="function">matrix <span class="title">as</span><span class="params">(x.x, x.y, <span class="number">1</span>)</span></span>; </div><div class="line">	<span class="keyword">for</span> (;k; k&gt;&gt;=<span class="number">1</span>, x=x*x)<span class="keyword">if</span>(k&amp;<span class="number">1</span>)as=as*x;</div><div class="line">	<span class="keyword">return</span> as; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;test); </div><div class="line">	<span class="keyword">while</span> (test --) &#123; </div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;n, &amp;m, &amp;l, &amp;r); </div><div class="line">		<span class="keyword">int</span> as = <span class="number">0</span>; </div><div class="line">		REP(d, l, r) &#123; </div><div class="line">			divide(d); <span class="keyword">int</span> w=B(t); <span class="function">matrix <span class="title">trs</span><span class="params">(w, w)</span></span>;  </div><div class="line">			rep(i, w) REP(x,<span class="number">1</span>,m) &#123; <span class="keyword">int</span> S=i; </div><div class="line">				rep(j, t) <span class="keyword">if</span> (x%a[j]==<span class="number">0</span>) S|=B(j); </div><div class="line">				trs.a[S][i]++;</div><div class="line">			&#125;</div><div class="line"><span class="comment">//			trs.print(); </span></div><div class="line">			trs=_fast(trs, n); </div><div class="line">			<span class="function">matrix <span class="title">ini</span><span class="params">(w, <span class="number">1</span>)</span></span>; ini.a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>; </div><div class="line">			ini = trs*ini; </div><div class="line">			as += ini.a[w<span class="number">-1</span>][<span class="number">0</span>]; <span class="keyword">if</span>(as&gt;=p)as-=p; </div><div class="line">		&#125; </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, as); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-qtreequeries-on-tree-again">【CC QTREE】Queries on tree again!</h1>
<h2 id="题目大意-8">题目大意</h2>
<p>环套树上两点的最短路径的最大连续字段和；</p>
<h2 id="解题报告-8">解题报告</h2>
<p>强行树-&gt;环套树 。。。</p>
<p>首先把环拆开， 变成一棵树+一条边， 对于每个操作<span class="math inline">\(x,y\)</span>进行特判， 判断是否走零散的那一条边。</p>
<p>然后用线段树，树链剖分后，对于每一个区间维护最大连续子段和，最小连续子段和，前缀最大子段和， 后缀最大子段和，前缀最小子段和， 后缀最小子段和， 区间变号标记。</p>
<p>修改的话非常的normal，就是直接树链剖分+线段树区间修改，查询的话比较麻烦， 因为需要完成从深到浅+由浅入深两个过程， 对应线段树的两种区间查询， 写的时候就比较冗长。</p>
<h2 id="代码-8">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for (int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100001</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> S=<span class="number">400001</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> <span class="keyword">int</span> nxt,to,c; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,<span class="keyword">int</span> c=<span class="number">0</span>):nxt(nxt),to(to),c(c)&#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="keyword">int</span> n,hed[N],tot,va[N],sn[N],sz[N],de[N],tp[N],f[N],dn[N],bd[N],cnt,u,v,w; </div><div class="line"><span class="keyword">int</span> mnl[S],mnr[S],mn[S],mxl[S],mxr[S],mx[S],sm[S],rv[S],as,asr,m; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> c)</span> </span>&#123;e[++tot]=edge(hed[x],y,c),hed[x]=tot;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar())x=x*<span class="number">10</span>+ch<span class="number">-48</span>; x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	de[x]=de[f[x]]+<span class="number">1</span>,sz[x]=<span class="number">1</span>,sn[x]=<span class="number">0</span>; <span class="keyword">int</span> y;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) <span class="keyword">if</span>(y=e[i].to,!sz[y]) </div><div class="line">		va[y]=e[i].c,f[y]=x,dfs(y),sz[x]+=sz[y],sn[x]=((sz[y]&gt;sz[sn[x]])?y:sn[x]); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">odr</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> top)</span> </span>&#123;</div><div class="line">	tp[x]=top,dn[x]=++cnt,bd[cnt]=x; </div><div class="line">	<span class="keyword">if</span> (sn[x]) &#123; odr(sn[x],top); <span class="keyword">int</span> y;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt) </div><div class="line">			<span class="keyword">if</span>(y=e[i].to,de[y]==de[x]+<span class="number">1</span>&amp;&amp;y!=sn[x]) odr(y,y); </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _lca(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123; </div><div class="line">	<span class="keyword">int</span> fx=tp[x], fy=tp[y]; </div><div class="line">	<span class="keyword">while</span> (fx!=fy) &#123; <span class="keyword">if</span> (de[fx]&lt;de[fy]) swap(fx,fy),swap(x,y); </div><div class="line">		x=f[fx], fx=tp[x];</div><div class="line">	&#125;  <span class="keyword">if</span> (de[x]&gt;de[y]) swap(x,y); <span class="keyword">return</span> x; </div><div class="line">&#125; </div><div class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _dis(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123; <span class="keyword">return</span> de[x]+de[y]-de[_lca(x,y)]*<span class="number">2</span>;&#125;</div><div class="line"> </div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _rev(<span class="keyword">int</span> x) &#123; </div><div class="line">	sm[x]=-sm[x],rv[x]^=<span class="number">1</span>,swap(mn[x],mx[x]),swap(mnl[x],mxl[x]),swap(mnr[x],mxr[x]); </div><div class="line">	mn[x]=-mn[x],mx[x]=-mx[x],mnl[x]=-mnl[x],mnr[x]=-mnr[x],mxl[x]=-mxl[x],mxr[x]=-mxr[x]; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	sm[x]=sm[x&lt;&lt;<span class="number">1</span>]+sm[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>], mx[x]=max(mxr[x&lt;&lt;<span class="number">1</span>]+mxl[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],max(mx[x&lt;&lt;<span class="number">1</span>],mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])); </div><div class="line">	mxl[x]=max(mxl[x&lt;&lt;<span class="number">1</span>],sm[x&lt;&lt;<span class="number">1</span>]+mxl[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]); </div><div class="line">	mxr[x]=max(mxr[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],sm[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+mxr[x&lt;&lt;<span class="number">1</span>]); </div><div class="line">	mn[x]=min(mnr[x&lt;&lt;<span class="number">1</span>]+mnl[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],min(mn[x&lt;&lt;<span class="number">1</span>],mn[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])); </div><div class="line">	mnl[x]=min(mnl[x&lt;&lt;<span class="number">1</span>],sm[x&lt;&lt;<span class="number">1</span>]+mnl[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]); </div><div class="line">	mnr[x]=min(mnr[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],sm[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+mnr[x&lt;&lt;<span class="number">1</span>]); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">if</span> (rv[x]) _rev(x&lt;&lt;<span class="number">1</span>),_rev(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>),rv[x]=<span class="number">0</span>;&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (l==r) &#123;  mn[x]=mnl[x]=mnr[x]=mx[x]=mxl[x]=mxr[x]=sm[x]=va[bd[l]];&#125; </div><div class="line">	<span class="keyword">else</span> &#123; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; build(x&lt;&lt;<span class="number">1</span>,l,mid),build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r); up(x);&#125; </div><div class="line">&#125; </div><div class="line"><span class="keyword">void</span> _rivers(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r) &#123; </div><div class="line">	<span class="keyword">if</span> (_l&lt;=l&amp;&amp;r&lt;=_r) _rev(x);</div><div class="line">	<span class="keyword">else</span> &#123; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;  down(x); </div><div class="line">		<span class="keyword">if</span> (_l&lt;=mid)_rivers(x&lt;&lt;<span class="number">1</span>,l,mid,_l,_r); </div><div class="line">		<span class="keyword">if</span> (_r&gt;mid)_rivers(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,_l,_r); up(x); </div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> _qry_r(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r) &#123; </div><div class="line">	<span class="keyword">if</span> (_l&lt;=l&amp;&amp;r&lt;=_r) &#123; <span class="keyword">if</span>(mx[x]&gt;as)as=mx[x]; <span class="keyword">if</span>(asr+mxr[x]&gt;as)as=asr+mxr[x];</div><div class="line">		asr+=sm[x]; <span class="keyword">if</span> (mxl[x]&gt;asr) asr=mxl[x]; </div><div class="line">	&#125; <span class="keyword">else</span> &#123; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; down(x); </div><div class="line">		<span class="keyword">if</span> (_r&gt;mid) _qry_r(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,_l,_r); </div><div class="line">		<span class="keyword">if</span> (_l&lt;=mid) _qry_r(x&lt;&lt;<span class="number">1</span>,l,mid,_l,_r); </div><div class="line">	&#125; </div><div class="line">&#125; </div><div class="line"><span class="keyword">void</span> _qry_l(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> _l,<span class="keyword">int</span> _r) &#123; </div><div class="line">	<span class="keyword">if</span> (_l&lt;=l&amp;&amp;r&lt;=_r) &#123; <span class="keyword">if</span>(mx[x]&gt;as)as=mx[x]; <span class="keyword">if</span>(asr+mxl[x]&gt;as)as=asr+mxl[x]; </div><div class="line">		asr+=sm[x]; <span class="keyword">if</span> (mxr[x]&gt;asr) asr=mxr[x]; </div><div class="line">	&#125; <span class="keyword">else</span> &#123; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; down(x); </div><div class="line">		<span class="keyword">if</span> (_l&lt;=mid) _qry_l(x&lt;&lt;<span class="number">1</span>,l,mid,_l,_r); </div><div class="line">		<span class="keyword">if</span> (_r&gt;mid) _qry_l(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,_l,_r); </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> fx=tp[x], fy=tp[y]; <span class="keyword">while</span> (fx!=fy) &#123; </div><div class="line">		<span class="keyword">if</span> (de[fx]&lt;de[fy]) swap(fx,fy),swap(x,y); </div><div class="line">		_rivers(<span class="number">1</span>,<span class="number">1</span>,n,dn[fx],dn[x]),x=f[fx],fx=tp[x]; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (de[x]&gt;de[y]) swap(x,y); </div><div class="line">	<span class="keyword">if</span> (x!=y) _rivers(<span class="number">1</span>,<span class="number">1</span>,n,dn[x]+<span class="number">1</span>,dn[y]); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">int</span> lca=_lca(x,y); </div><div class="line">	<span class="keyword">while</span> (tp[x]!=tp[lca]) _qry_r(<span class="number">1</span>,<span class="number">1</span>,n,dn[tp[x]],dn[x]),x=f[tp[x]]; </div><div class="line">	<span class="keyword">if</span> (x!=lca) _qry_r(<span class="number">1</span>,<span class="number">1</span>,n,dn[lca]+<span class="number">1</span>,dn[x]); </div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> _l[N],_r[N],top; top=<span class="number">0</span>; </div><div class="line">	<span class="keyword">while</span> (tp[y]!=tp[lca]) _l[++top]=dn[tp[y]],_r[top]=dn[y],y=f[tp[y]]; </div><div class="line">	<span class="keyword">if</span> (y!=lca) _l[++top]=dn[lca]+<span class="number">1</span>,_r[top]=dn[y]; </div><div class="line">	<span class="keyword">while</span> (top) _qry_l(<span class="number">1</span>,<span class="number">1</span>,n,_l[top],_r[top]),--top;</div><div class="line">&#125; 	</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(n); <span class="keyword">int</span> x,y,c;<span class="keyword">char</span> type; rep(i,n) in(x),in(y),in(c),add(x,y,c),add(y,x,c); </div><div class="line">	dfs(<span class="number">1</span>), odr(<span class="number">1</span>,<span class="number">1</span>); REP(x,<span class="number">1</span>,n) <span class="keyword">for</span>(<span class="keyword">int</span> i=hed[x];i;i=e[i].nxt)</div><div class="line">		<span class="keyword">if</span> (y=e[i].to, f[x]!=y&amp;&amp;f[y]!=x) u=x,v=y,w=e[i].c; </div><div class="line"><span class="comment">//	cout &lt;&lt; u&lt;&lt;"-&gt;"&lt;&lt;v&lt;&lt;": "&lt;&lt;w&lt;&lt;endl; </span></div><div class="line"><span class="comment">//	REP(i,1,n) cout &lt;&lt; f[i] &lt;&lt;"-&gt;" &lt;&lt;i&lt;&lt;": "&lt;&lt;tp[i]&lt;&lt;", "&lt;&lt;va[i]&lt;&lt;endl;</span></div><div class="line">	<span class="keyword">for</span>(build(<span class="number">1</span>,<span class="number">1</span>,n),in(m); m; --m) &#123; </div><div class="line">		type=getchar(); <span class="keyword">while</span>(type!=<span class="string">'?'</span>&amp;&amp;type!=<span class="string">'f'</span>)type=getchar(); </div><div class="line">		in(x),in(y);  <span class="keyword">if</span> (type==<span class="string">'f'</span>) &#123; </div><div class="line">			<span class="keyword">if</span> (_dis(x,u)+_dis(y,v)&gt;_dis(x,v)+_dis(y,u))swap(x,y); </div><div class="line">			<span class="keyword">if</span> (_dis(x,y)&lt;_dis(x,u)+_dis(y,v)+<span class="number">1</span>) reverse(x,y); </div><div class="line">			<span class="keyword">else</span> reverse(x,u), w=-w, reverse(v,y); </div><div class="line">		&#125; <span class="keyword">else</span> &#123; </div><div class="line">			as=<span class="number">0</span>, asr=<span class="number">0</span>; <span class="keyword">if</span> (_dis(x,u)+_dis(y,v)&gt;_dis(x,v)+_dis(y,u)) swap(x,y); </div><div class="line">			<span class="keyword">if</span> (_dis(x,y)&lt;_dis(x,u)+_dis(y,v)+<span class="number">1</span>) query(x,y); </div><div class="line">			<span class="keyword">else</span> &#123; query(x,u);<span class="keyword">if</span>(w&gt;as)as=w;<span class="keyword">if</span>(asr+w&gt;as)as=asr+w; </div><div class="line">				asr+=w; <span class="keyword">if</span>(w&gt;asr) asr=w; query(v,y);</div><div class="line">			&#125; </div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, as); </div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-permutejust-some-permutations-3">【CC PERMUTE】Just Some Permutations 3</h1>
<h2 id="题目大意-9">题目大意</h2>
<p>长度为<span class="math inline">\(n\)</span>的，相邻两个数的和不超过的<span class="math inline">\(m\)</span>的合法排列个数。</p>
<h2 id="解题报告-9">解题报告</h2>
<p>考虑从大到小插入<span class="math inline">\(n\)</span>个数， 每次插入一个数<span class="math inline">\(n\)</span>， 需要用<span class="math inline">\(\leqslant m-n\)</span>的数将他包裹起来， 也就是形如<span class="math inline">\(XnY\)</span>, 或者<span class="math inline">\(|nX\)</span>,或者<span class="math inline">\(Xn|\)</span>的形式。</p>
<p>现在考虑有几个可以选择来包裹<span class="math inline">\(n\)</span>的数，开始显然是<span class="math inline">\(m-n\)</span>个， 如果使用形如<span class="math inline">\(|nX\)</span>、<span class="math inline">\(Xn|\)</span>的形式进行包裹， 那么<span class="math inline">\(X\)</span>将不能再被使用， 成为左右边界<span class="math inline">\(|\)</span>的一部分，如果使用形如<span class="math inline">\(XnY\)</span>的形式包裹， 那么<span class="math inline">\(XnY\)</span>可以看成<span class="math inline">\(X&#39;\)</span>, 一个新的用来包裹的“数”；</p>
<p>可以发现， 随着插入<span class="math inline">\(n\)</span>,<span class="math inline">\(n-1\)</span>…<span class="math inline">\(\frac{m+1}{2}+1\)</span> , 用来包裹的数的个数是不变的。</p>
<ol style="list-style-type: decimal">
<li>如果<span class="math inline">\(m\)</span>为奇数， 那么<span class="math inline">\((m+1)/2\)</span>插入时， 剩余的数的个数是<span class="math inline">\(m-n+1\)</span>， 方案数是<span class="math inline">\((m-n+1)!\)</span>,总的方案数是<span class="math inline">\((2k+k(k-1))^{n-\frac{m+1}{2}}*(m-n+1)!\)</span></li>
<li>如果<span class="math inline">\(m\)</span>为偶数， 那么<span class="math inline">\((m+1)/2\)</span>插入时， 剩余的数的个数是<span class="math inline">\(m-n\)</span>, 方案数是<span class="math inline">\((2k+k(k-1))^{n-\frac{m+1}{2}}*(m-n)!\)</span></li>
</ol>
<p>其中<span class="math inline">\(k=m-n\)</span>, 表示可以用来包裹的数的个数。</p>
<h2 id="代码-9">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p =<span class="number">1000000007</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n,m,T,k,fac[<span class="number">1000001</span>]; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">fast</span><span class="params">(ll x,<span class="keyword">int</span> k)</span> </span>&#123;ll as=<span class="number">1</span>;<span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%p)<span class="keyword">if</span>(k&amp;<span class="number">1</span>)as=as*x%p;<span class="keyword">return</span> as;&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T); </div><div class="line">	fac[<span class="number">0</span>]=<span class="number">1</span>; REP(i,<span class="number">1</span>,<span class="number">1000000</span>)fac[i]=<span class="number">1l</span>l*fac[i<span class="number">-1</span>]*i%p;</div><div class="line">	<span class="keyword">while</span> (T--) &#123; </div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m); k=m-n; </div><div class="line">		<span class="keyword">if</span> (m &amp; <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, fast(<span class="number">1l</span>l*k*(k+<span class="number">1</span>)%p,n-(m+<span class="number">1</span>)/<span class="number">2</span>)*fac[k+<span class="number">1</span>]%p); </div><div class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, fast(<span class="number">1l</span>l*k*(k+<span class="number">1</span>)%p,n-m/<span class="number">2</span>)*fac[k]%p); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 题目集锦 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 倍增 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 组合数学 </tag>
            
            <tag> DP </tag>
            
            <tag> 数论 </tag>
            
            <tag> 分块 </tag>
            
            <tag> 矩阵乘法 </tag>
            
            <tag> 匹配 </tag>
            
            <tag> BSGS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[codechef-选做]]></title>
      <url>/cc1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>选做CC hard 题中最简单，通过人数最多的做…</p>
</blockquote>
<a id="more"></a>
<h1 id="cc-mgchgymmisha-and-gym">【CC MGCHGYM】Misha and Gym</h1>
<h2 id="题目大意">题目大意</h2>
<p><span class="math inline">\([1,n]\)</span> 每个位置有一个重量<span class="math inline">\(w_i\)</span> , 支持三个操作：</p>
<ol style="list-style-type: decimal">
<li>修改一个位置的重量</li>
<li>翻转一个区间</li>
<li>查询一个区间内的重量能否拼出重量<span class="math inline">\(w\)</span> .</li>
</ol>
<p>保证出现的重量不超过10种， 3操作只有<span class="math inline">\(1000\)</span>个。</p>
<h2 id="解题报告">解题报告</h2>
<p>很trivial的一个题呀…</p>
<p>因为出现的重量很少， 所以每个区间维护每个重量出现的次数， 因为存在翻转操作， 所以需要大力的写一个平衡树, 手选FHQTreap.</p>
<p>现在就差操作三了， 因为次数只有1000， 所以试着大力的背包一下， 咦 -_- 复杂度是<span class="math inline">\(O(wn)\)</span>的， 好像不行呀…</p>
<p>优化背包的办法好多呀， 因为维护0信息， 所以强上bitset呀， 复杂度就是<span class="math inline">\(O(wn/64)\)</span>了 . 有理想的交了好几发.都T了…</p>
<p>所以继续优化背包， 因为种类很少， 所以每一种用二进制优化一下， 复杂度就是<span class="math inline">\(O(10w*log(n)/64)\)</span>了， 好像还是不科学， 但是竟然A了 。 WLGC。。。</p>
<h2 id="代码">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>)</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> -</div><div class="line">		&#125; <span class="keyword">else</span> &#123; </div><div class="line">			go[b][<span class="number">0</span>] = merge(a, go[b][<span class="number">0</span>]); </div><div class="line">			push_up(b); </div><div class="line">			<span class="keyword">return</span> b; </div><div class="line">		&#125; </div><div class="line">	&#125; </div><div class="line">		</div><div class="line">			</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> (; *cp &lt; <span class="string">'0'</span> || *cp &gt; <span class="string">'9'</span>; cp++) ; </div><div class="line">	<span class="keyword">for</span> (x = <span class="number">0</span>; *cp &gt;= <span class="string">'0'</span> &amp;&amp; *cp &lt;= <span class="string">'9'</span>; cp++) </div><div class="line">		x = x * <span class="number">10</span> + *cp - <span class="number">48</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">enter</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (id[x]==<span class="number">-1</span>) &#123;</div><div class="line">		id[x] = tot ++; </div><div class="line">		v.push_back(x); </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">chang</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> FHQ; </div><div class="line">	<span class="keyword">int</span> l, w; in(l), in(w); 	</div><div class="line">	droot le = split(root, l<span class="number">-1</span>); </div><div class="line">	droot ri = split(le.se, <span class="number">1</span>); </div><div class="line">	<span class="keyword">int</span> x = ri.fi; </div><div class="line">	enter(w); </div><div class="line">	va[x] = id[w], info[x] = data(va[x]);</div><div class="line">	ra[x] = RAND;</div><div class="line">	le.se = merge(x, ri.se); </div><div class="line">	root = merge(le.fi, le.se); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">revers</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> FHQ;  </div><div class="line">	<span class="keyword">int</span> l, r; in(l), in(r); </div><div class="line">	droot le = split(root, l - <span class="number">1</span>); </div><div class="line">	droot ri = split(le.se, r - l + <span class="number">1</span>); </div><div class="line">	_rev(ri.fi) ; </div><div class="line">	le.se = merge(ri.fi, ri.se); </div><div class="line">	root = merge(le.fi, le.se); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">using</span> <span class="keyword">namespace</span> FHQ; </div><div class="line">	<span class="keyword">int</span> l, r, w; in(l), in(r), in(w); </div><div class="line">	droot le = split(root, l - <span class="number">1</span>); </div><div class="line">	droot ri = split(le.se, r-l+<span class="number">1</span>); </div><div class="line">	<span class="keyword">int</span> x= ri.fi; <span class="keyword">bool</span> check=<span class="number">0</span>; </div><div class="line">	dp.reset(); dp.<span class="built_in">set</span>(<span class="number">0</span>); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i) &#123;</div><div class="line">		<span class="keyword">int</span> lef = info[x].sts[i]; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= lef; j &lt;&lt;= <span class="number">1</span>) &#123;</div><div class="line">			dp |= dp &lt;&lt; (j * v[i]); </div><div class="line">			lef -= j, check |= dp.test(w); </div><div class="line">			<span class="keyword">if</span> (check) <span class="keyword">break</span>; </div><div class="line">		&#125; </div><div class="line">		<span class="keyword">if</span> (lef) dp |= dp &lt;&lt; (lef * v[i]); </div><div class="line">		check |= dp.test(w); </div><div class="line">		<span class="keyword">if</span> (check) <span class="keyword">break</span>; </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">		</div><div class="line"><span class="comment">//	cout &lt;&lt; ", " &lt;&lt; w &lt;&lt; ": "; </span></div><div class="line">	<span class="built_in">puts</span>((check) ? <span class="string">"Yes"</span> : <span class="string">"No"</span>); </div><div class="line">	le.se = merge(ri.fi, ri.se); </div><div class="line">	root = merge(le.fi, le.se); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="comment">//--- line to be a line ---- </span></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	fread(cp, <span class="number">1</span>, <span class="number">2000000</span>, <span class="built_in">stdin</span>); </div><div class="line">	in(n), in(q);</div><div class="line">	<span class="built_in">memset</span>(id, <span class="number">-1</span>, <span class="keyword">sizeof</span>(id));  </div><div class="line">	FORU(i, <span class="number">1</span>, n)  </div><div class="line">		in(_w[i]), enter(_w[i]); </div><div class="line">	srand( time(<span class="number">0</span>) + <span class="number">217</span>);   </div><div class="line">	FHQ :: build() ; </div><div class="line">	</div><div class="line">	<span class="keyword">int</span> type; </div><div class="line">	<span class="keyword">while</span> (q --) &#123;</div><div class="line">		in(type); </div><div class="line">		<span class="keyword">switch</span> (type) &#123; </div><div class="line">		<span class="keyword">case</span> <span class="number">1</span> : chang(); <span class="keyword">break</span>; </div><div class="line">		<span class="keyword">case</span> <span class="number">2</span> : revers();<span class="keyword">break</span>; </div><div class="line">		<span class="keyword">case</span> <span class="number">3</span> : query(); <span class="keyword">break</span>; </div><div class="line">		&#125; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-bwgameblack-white-board-game">【CC BWGAME】Black-white Board Game</h1>
<h2 id="题目大意-1">题目大意</h2>
<p>一个棋盘， 第<span class="math inline">\(i\)</span>行的<span class="math inline">\([l_i, r_i]\)</span>被染成黑色， 两个人Alex和Fedor， 每个人选择排列<span class="math inline">\(P_i\)</span>, 要求<span class="math inline">\([i,P_i]\)</span>为黑色， 且对Alex, <span class="math inline">\(P_i\)</span>的逆序对个数为偶数， 对Fedor， 逆序对个数为奇数， 问谁能选的排列多.</p>
<h2 id="解题报告-1">解题报告</h2>
<p>逆序对个数的奇偶？ 可以联想到行列式的一个求法 <span class="math inline">\(\sum (-1)^{\iota(P_i)} \prod_{j=1}^{n} a[j][P_i[j]]\)</span> ;</p>
<p>所以就是把棋盘看成一个O矩阵， 对其行列式求值。</p>
<p>简单的方法是高斯消元， 但是<span class="math inline">\(O(n^3)\)</span>显然过不了， 考虑矩阵中<span class="math inline">\(1\)</span>的分布的特殊性，就是每一行， <span class="math inline">\(1\)</span>的分布是一个连续的区间。</p>
<p>可以将<span class="math inline">\([l_i,r_i]\)</span>放入第<span class="math inline">\(l_i\)</span>棵左偏树， 根据<span class="math inline">\(r_i\)</span>建小根堆， 枚举到第<span class="math inline">\(i\)</span>列， 拿出第<span class="math inline">\(i\)</span>棵左偏树中<span class="math inline">\(r_i\)</span>最小的区间， 使用这个区间消元这棵树中剩余的区间， 并加入<span class="math inline">\(r_i+1\)</span>这个树 ， 并根据是否交换两行改变行列式的值。</p>
<p>这样消元， 对角线一定全是<span class="math inline">\(1\)</span>(或者有<span class="math inline">\(0\)</span>, 也就是平手的情况), 只需要判断行列式的值的正负就好。</p>
<h2 id="代码-1">代码</h2>
<p>不知道为什么CC这道题不能提交， 所以只能当过样例选手了。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>; </div><div class="line"><span class="keyword">int</span> test, n, rt[N], ans, tot, a[N]; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LTREE</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> de, ls, rs, v, id; </div><div class="line">	LTREE() &#123;de=ls=rs=v=<span class="number">0</span>;&#125;</div><div class="line">	LTREE(<span class="keyword">int</span> v, <span class="keyword">int</span> id) :v(v),id(id) &#123;</div><div class="line">		de = ls = rs = <span class="number">0</span>; </div><div class="line">	&#125; </div><div class="line">&#125; no[N]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line"> 	<span class="keyword">char</span> ch = getchar(); </div><div class="line"> 	<span class="keyword">for</span> (;ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch=getchar()); </div><div class="line"> 	<span class="keyword">for</span> (x=<span class="number">0</span>; ch&gt;=<span class="string">'0'</span> &amp;&amp; ch&lt;=<span class="string">'9'</span>; ch=getchar())</div><div class="line"> 		x = x * <span class="number">10</span> + ch - <span class="number">48</span>; </div><div class="line"> &#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">birth</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"> 	++ tot; no[tot] = LTREE(v, x); </div><div class="line"> 	<span class="keyword">return</span> tot; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line"> 	<span class="keyword">if</span> (!(a * b)) <span class="keyword">return</span> a + b; </div><div class="line"> 	<span class="keyword">if</span> (no[a].v &gt; no[b].v) swap(a, b); </div><div class="line"> 	no[a].rs = merge(no[a].rs, b); </div><div class="line"> 	<span class="keyword">if</span> (no[no[a].rs].de &gt; no[no[a].ls].de) </div><div class="line"> 		swap(no[a].ls, no[a].rs); </div><div class="line"> 	no[a].de = no[no[a].rs].de + <span class="number">1</span>; </div><div class="line"> 	<span class="keyword">return</span> a; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;rt, <span class="keyword">int</span> v, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"> 	rt = merge(rt, birth(v, x)); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">(<span class="keyword">int</span> &amp;rt)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (!rt) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">	<span class="keyword">int</span> tmp = rt; </div><div class="line">	rt = merge(no[tmp].ls, no[tmp].rs); </div><div class="line">	<span class="keyword">return</span> tmp; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("A.in", "r", stdin); </span></div><div class="line">	in(test);</div><div class="line">	<span class="keyword">while</span> (test --) &#123;</div><div class="line">	 	in(n); <span class="keyword">int</span> l, r; ans = <span class="number">1</span>; </div><div class="line">	 	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; ++i) </div><div class="line">	 		in(l), in(r), ins(rt[l], r, i), a[i] = i; </div><div class="line">	 		</div><div class="line">	 	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n; ++i) </div><div class="line">	 		<span class="keyword">if</span> (!rt[i]) &#123; ans = <span class="number">0</span>; <span class="keyword">break</span>;&#125; </div><div class="line">	 		<span class="keyword">else</span> &#123; </div><div class="line">	 			<span class="keyword">int</span> x = top(rt[i]), y = top(rt[i]); </div><div class="line"><span class="comment">//	 			cout &lt;&lt; i &lt;&lt; ", " &lt;&lt; no[x].v &lt;&lt; ": " &lt;&lt; no[x].id &lt;&lt; endl;</span></div><div class="line">	 			<span class="keyword">if</span> (no[x].v == no[y].v) &#123; </div><div class="line">	 				ans = <span class="number">0</span>; <span class="keyword">break</span>; </div><div class="line">	 			&#125; <span class="keyword">else</span> rt[i] = merge(rt[i], y); </div><div class="line">	 			<span class="keyword">if</span> (no[x].id != a[i]) </div><div class="line">	 				ans *= <span class="number">-1</span>, a[no[x].id]=a[i];</div><div class="line">	 			rt[no[x].v+<span class="number">1</span>] = merge(rt[no[x].v+<span class="number">1</span>], rt[i]); </div><div class="line">	 		&#125; </div><div class="line">	 	(ans == <span class="number">0</span>) ? <span class="built_in">puts</span>(<span class="string">"Draw"</span>)</div><div class="line">	 	: (ans == <span class="number">1</span>) ? <span class="built_in">puts</span>(<span class="string">"Alex"</span>)</div><div class="line">	 		: <span class="built_in">puts</span>(<span class="string">"Fedor"</span>); </div><div class="line">	 &#125;</div><div class="line">	 <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-cbalchef-and-balanced-strings">【CC CBAL】Chef and Balanced Strings</h1>
<h2 id="题目大意-2">题目大意</h2>
<p>区间内， 每个字符出现偶数次的子区间的个数 。</p>
<h2 id="解题报告-2">解题报告</h2>
<p>这个破玩意显然只能分块乱搞呀 …</p>
<p>首先， 字符集很小， 可以把每个字符出现的前缀奇偶性压成一个int, 离散后搞成一个状态信息.</p>
<p>大力预处理， 从第<span class="math inline">\(i\)</span>个块开始，向后到第<span class="math inline">\(j\)</span>个位置的三类答案<span class="math inline">\(fans_{1|2|3}\)</span> , 从第<span class="math inline">\(i\)</span>个块开始， 向前到第<span class="math inline">\(j\)</span>个位置的三类答案<span class="math inline">\(bans_{1|2|3}\)</span> , 这个可以通过扫的同时记录每个奇偶状态信息的出现次数， 出现位置<span class="math inline">\(i\)</span>的和， 出现次数<span class="math inline">\(i^2\)</span>的和 得到。</p>
<p>然后， 对于每个查询， 设<span class="math inline">\(l\)</span>所在的块为<span class="math inline">\(Li\)</span>, 从<span class="math inline">\(Lm\)</span>开始， <span class="math inline">\(r\)</span>所在的块为<span class="math inline">\(Ri\)</span>, 到<span class="math inline">\(Rm\)</span>结束， 可以先得到左右的零散位置和中间若干整块的答案加上整块中的答案， 就差左右零散位置之间的答案， 这部分暴力扫一遍就好.</p>
<p>时空复杂度<span class="math inline">\(O(n\sqrt{n})\)</span> .</p>
<h2 id="代码-2">代码</h2>
<p>写得真·TM爽 。</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> SN = <span class="number">250</span>; </div><div class="line"></div><div class="line"><span class="keyword">char</span> s[N];</div><div class="line"></div><div class="line"><span class="comment">// forward ans</span></div><div class="line">ll fans0[SN][N], fans1[SN][N], fans2[SN][N];</div><div class="line"></div><div class="line"><span class="comment">// backward ans</span></div><div class="line">ll bans0[SN][N], bans1[SN][N], bans2[SN][N];</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, Q, S, idx[<span class="number">1</span>&lt;&lt;<span class="number">26</span>], values[N];</div><div class="line"></div><div class="line">ll sums0[N], sums1[N], sums2[N];</div><div class="line"></div><div class="line"><span class="keyword">int</span> cnt;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_idx</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!~idx[x]) idx[x] = cnt++;</div><div class="line">    <span class="keyword">return</span> idx[x];</div><div class="line">&#125;</div><div class="line"></div><div class="line">ll ans0, ans1, ans2;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">initalize</span><span class="params">()</span> </span>&#123;</div><div class="line">    S = max(n/<span class="number">200</span>, <span class="keyword">int</span>(n/<span class="built_in">sqrt</span>(Q)));</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    idx[x = <span class="number">0</span>] = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        idx[x ^= <span class="number">1</span> &lt;&lt; s[i] - <span class="string">'a'</span>] = <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    cnt = <span class="number">0</span>;</div><div class="line">    values[<span class="number">0</span>] = get_idx(x = <span class="number">0</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">        values[i+<span class="number">1</span>] = get_idx(x^=(<span class="number">1</span>&lt;&lt;s[i]-<span class="string">'a'</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i*S &lt;= n; i++) &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i*S; j &lt;= n; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">            sums2[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ans0 = ans1 = ans2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i*S; j &lt;= n; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            fans0[i][j] = ans0 += sums0[v];</div><div class="line">            fans1[i][j] = ans1 += sums0[v]*j - sums1[v];</div><div class="line">            fans2[i][j] = ans2 += sums0[v]*j*j - sums1[v]*<span class="number">2</span>*j + sums2[v];</div><div class="line">            sums0[v]++;</div><div class="line">            sums1[v] += j;</div><div class="line">            sums2[v] += j*(ll)j;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> end = min(n, i*S + S - <span class="number">1</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = end; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">            sums2[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ans0 = ans1 = ans2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = end; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            bans0[i][j] = ans0 += sums0[v];</div><div class="line">            bans1[i][j] = ans1 += sums1[v] - sums0[v]*j;</div><div class="line">            bans2[i][j] = ans2 += sums0[v]*j*j - sums1[v]*<span class="number">2</span>*j + sums2[v];</div><div class="line">            sums0[v]++;</div><div class="line">            sums1[v] += j;</div><div class="line">            sums2[v] += j*(ll)j;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function">ll <span class="title">solve0</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    L--;</div><div class="line">    <span class="keyword">int</span> Li = (L+<span class="number">1</span>)/S, Ri = (R<span class="number">-1</span>)/S;</div><div class="line">    <span class="keyword">if</span> (Ri - Li &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// normal</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ans0 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            ans0 += sums0[v];</div><div class="line">            sums0[v]++;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> Lm = Li*S+S<span class="number">-1</span>, Rm = Ri*S;</div><div class="line">        ans0 = fans0[Li+<span class="number">1</span>][R] + bans0[Ri<span class="number">-1</span>][L] - fans0[Li+<span class="number">1</span>][Rm<span class="number">-1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= Lm; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = Rm; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= Lm; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v]++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = Rm; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            ans0 += sums0[v];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">solve1</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    L--;</div><div class="line">    <span class="keyword">int</span> Li = (L+<span class="number">1</span>)/S, Ri = (R<span class="number">-1</span>)/S;</div><div class="line">    <span class="keyword">if</span> (Ri - Li &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// normal</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ans1 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            ans1 += sums0[v]*j - sums1[v];</div><div class="line">            sums0[v]++;</div><div class="line">            sums1[v] += j;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> Lm = Li*S+S<span class="number">-1</span>, Rm = Ri*S;</div><div class="line">        ans1 = fans1[Li+<span class="number">1</span>][R] + bans1[Ri<span class="number">-1</span>][L] - fans1[Li+<span class="number">1</span>][Rm<span class="number">-1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= Lm; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = Rm; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= Lm; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v]++;</div><div class="line">            sums1[v] += j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = Rm; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            ans1 += sums0[v]*j - sums1[v];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans1;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function">ll <span class="title">solve2</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">    L--;</div><div class="line">    <span class="keyword">int</span> Li = (L+<span class="number">1</span>)/S, Ri = (R<span class="number">-1</span>)/S;</div><div class="line">    <span class="keyword">if</span> (Ri - Li &lt;= <span class="number">1</span>) &#123;</div><div class="line">        <span class="comment">// normal</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">            sums2[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        ans2 = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            ans2 += sums0[v]*j*j - sums1[v]*<span class="number">2</span>*j + sums2[v];</div><div class="line">            sums0[v]++;</div><div class="line">            sums1[v] += j;</div><div class="line">            sums2[v] += j*(ll)j;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> Lm = Li*S+S<span class="number">-1</span>, Rm = Ri*S;</div><div class="line">        ans2 = fans2[Li+<span class="number">1</span>][R] + bans2[Ri<span class="number">-1</span>][L] - fans2[Li+<span class="number">1</span>][Rm<span class="number">-1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= Lm; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">            sums2[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = Rm; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v] = <span class="number">0</span>;</div><div class="line">            sums1[v] = <span class="number">0</span>;</div><div class="line">            sums2[v] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = L; j &lt;= Lm; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            sums0[v]++;</div><div class="line">            sums1[v] += j;</div><div class="line">            sums2[v] += j*(ll)j;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = Rm; j &lt;= R; j++) &#123;</div><div class="line">            <span class="keyword">int</span> v = values[j];</div><div class="line">            ans2 += sums0[v]*j*j - sums1[v]*<span class="number">2</span>*j + sums2[v];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">decode</span><span class="params">()</span></span>&#123;</div><div class="line">    ll A = <span class="number">0</span>, B = <span class="number">0</span>, ans=<span class="number">0</span> ;</div><div class="line">    <span class="keyword">while</span>( Q -- ) &#123;</div><div class="line">        <span class="keyword">int</span> X, Y, type;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;X, &amp;Y, &amp;type);</div><div class="line">        <span class="keyword">int</span> L = ( X + A ) % n + <span class="number">1</span>; </div><div class="line">        <span class="keyword">int</span> R = ( Y + B ) % n + <span class="number">1</span>; </div><div class="line">        <span class="keyword">if</span> (L &gt; R) swap(L, R);</div><div class="line">        <span class="keyword">if</span> (type == <span class="number">0</span>) ans = solve0(L, R); </div><div class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) ans = solve1(L, R); </div><div class="line">        <span class="keyword">if</span> (type == <span class="number">2</span>) ans = solve2(L, R); </div><div class="line">        </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">        A = B, B = ans;   </div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> test;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;test);</div><div class="line">    <span class="keyword">while</span>(test--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s, &amp;Q);</div><div class="line">        n = <span class="built_in">strlen</span>(s);</div><div class="line">        initalize();</div><div class="line">        decode();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-streettathe-street">【CC STREETTA】The Street</h1>
<h2 id="题目大意-3">题目大意</h2>
<p>两个序列<span class="math inline">\(a\)</span> , <span class="math inline">\(b\)</span> ， 三个操作： 1. 对序列<span class="math inline">\(a\)</span>的区间加等差数列； 2. 对序列<span class="math inline">\(b\)</span>的区间进行等差数列取<span class="math inline">\(max\)</span> ; 3. 查询<span class="math inline">\(a_i+b_i\)</span> .</p>
<h2 id="解题报告-3">解题报告</h2>
<p>区间加等差数列是很简单的， 因为<span class="math inline">\(ax+b\)</span>中的<span class="math inline">\(a,b\)</span>分别作为一个标记， 很容易合并（我是直接把两个标记永久化了，听说常数很好？）</p>
<p>区间等差数列求<span class="math inline">\(max\)</span>?是李超线段树的裸题， 其实就是加入一个线段， 线段树的每个节点保留优势<span class="math inline">\(a,b\)</span>(就是对<span class="math inline">\(mid\)</span>位置占优的<span class="math inline">\(a,b\)</span>)，其他的下传， 同样标记永久化。</p>
<h2 id="代码-3">代码</h2>
<p>win 切 linux 的时候忘同步git了，所以暂时找不到了…</p>
<h1 id="cc-lyrcmusic-lyrics">【CC LYRC】Music &amp; Lyrics</h1>
<h2 id="题目大意-4">题目大意</h2>
<p>对于每个询问串， 查询匹配串中一共出现了多少次。</p>
<h2 id="解题报告-4">解题报告</h2>
<p>这个是裸题， 对于询问串形成的trie建立一个AC自动机， 然后每个匹配串在AC自动机上匹配， 对于每个前缀匹配的位置打一个<span class="math inline">\(+1\)</span>的标记。</p>
<p>在fail树上将标记进行子树和，每个询问串出现的次数就是对应节点的子树和。</p>
<p>时间复杂度<span class="math inline">\(O(52*length)\)</span></p>
<h2 id="代码-4">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;b;++i)</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">char</span> s[<span class="number">50010</span>]; </div><div class="line"><span class="keyword">int</span> w, n, cnt=<span class="number">1</span>, son[<span class="number">3000000</span>][<span class="number">52</span>], las[<span class="number">510</span>], fal[<span class="number">3000000</span>]; </div><div class="line">ll v[<span class="number">3000000</span>];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> x = <span class="number">1</span>, tp; </div><div class="line">	rep(i, <span class="built_in">strlen</span>(s)) &#123; </div><div class="line">		<span class="keyword">if</span> (s[i] &gt;= <span class="string">'a'</span>) tp=s[i]-<span class="string">'a'</span>; </div><div class="line">		<span class="keyword">else</span> tp = s[i]-<span class="string">'A'</span>+<span class="number">26</span>; </div><div class="line">		<span class="keyword">if</span> (!son[x][tp]) son[x][tp]=++cnt; </div><div class="line">		x = son[x][tp]; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> x; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AC_auto</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; q.push(<span class="number">1</span>); </div><div class="line">	<span class="keyword">int</span> x, y; </div><div class="line">	<span class="keyword">while</span> (!q.empty()) &#123; </div><div class="line">		x = q.front(); q.pop(); </div><div class="line">		rep(i, <span class="number">52</span>) &#123; </div><div class="line">			<span class="keyword">int</span> fa = fal[x]; </div><div class="line">			<span class="keyword">while</span> (fa &amp;&amp; !son[fa][i]) fa = fal[fa]; </div><div class="line">			<span class="keyword">if</span> (y=son[x][i]) </div><div class="line">				fal[y] = (son[fa][i]?son[fa][i]:<span class="number">1</span>), q.push(y);</div><div class="line">			<span class="keyword">else</span> son[x][i] = (son[fa][i]?son[fa][i]:<span class="number">1</span>); </div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">&#125; </div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mark</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> x = <span class="number">1</span>, tp, y; </div><div class="line">	rep(i, <span class="built_in">strlen</span>(s)) </div><div class="line">		<span class="keyword">if</span> (s[i] == <span class="string">'-'</span>) x = <span class="number">1</span>; </div><div class="line">		<span class="keyword">else</span> &#123; </div><div class="line">			<span class="keyword">if</span> (s[i] &gt;= <span class="string">'a'</span>) y=s[i]-<span class="string">'a'</span>; </div><div class="line">			<span class="keyword">else</span> y = s[i]-<span class="string">'A'</span>+<span class="number">26</span>; </div><div class="line">			<span class="keyword">while</span> (x&amp;&amp;!son[x][y]) x=fal[x]; </div><div class="line">			x = son[x][y]; </div><div class="line">			<span class="keyword">if</span> (!x) x = <span class="number">1</span>;</div><div class="line">			v[x] ++; </div><div class="line">		&#125; </div><div class="line">&#125;</div><div class="line">		</div><div class="line">main() &#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w); </div><div class="line">	rep(i, w) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s), las[i]=insert(s); </div><div class="line">	AC_auto(); </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n); </div><div class="line">	rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s), mark(s); </div><div class="line">	VEP(i, cnt, <span class="number">2</span>) v[fal[i]] += v[i]; </div><div class="line">	rep(i, w) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, v[las[i]]); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-qtree6query-on-a-tree-vi">【CC QTREE6】Query on a tree VI</h1>
<h2 id="题目大意-5">题目大意</h2>
<p>开始一棵树全都是黑色的， 每次两个操作： 1. 将一个点变色； 2. 询问和一个点颜色相同的联通块大小；</p>
<h2 id="解题报告-5">解题报告</h2>
<p>这个题是Qtree系列比较简单的?</p>
<p>对黑色和白色分别维护子树中与他单色联通的点的数量， 这个使用树链剖分+树状数组就好了， 每次修改相当于修改到根路径， 区间修改单点查询。</p>
<p>还需要得到与某个点单色联通的深度最前的祖先， 这个需要使用树链剖分+维护区间黑色数（树状数组就足够），</p>
<p>每次如果一条重链单色联通就像上跳， 否则二分单色联通的最靠上的位置。</p>
<p>时间复杂度？ <span class="math inline">\(O(n \log^2n)\)</span></p>
<h2 id="代码-5">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> VEP(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100100</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> nxt, to; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>, <span class="keyword">int</span> to=<span class="number">0</span>):nxt(nxt), to(to)&#123;&#125;</div><div class="line">&#125; e[N &lt;&lt; <span class="number">1</span>]; </div><div class="line"><span class="keyword">int</span> s0[N], s1[N], oo[N], n, m, head[N], tot, a[N]; </div><div class="line"><span class="keyword">int</span> f[N], de[N], dn[N], tp[N], sn[N], bd[N], sz[N], cnt; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch = getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span>(;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar())</div><div class="line">		<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f = <span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span>(x=<span class="number">0</span>; ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar())</div><div class="line">		x = x*<span class="number">10</span> + ch - <span class="number">48</span>; </div><div class="line">	x *= f; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	e[++tot]=edge(head[x], y), head[x]=tot; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y=<span class="number">0</span>)</span> </span>&#123; </div><div class="line">	de[x] = de[f[x]]+<span class="number">1</span>, sz[x]=<span class="number">1</span>, sn[x]=<span class="number">0</span>;  </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=e[i].nxt) </div><div class="line">		<span class="keyword">if</span> (y=e[i].to, y!=f[x]) &#123;</div><div class="line">			f[y]=x, dfs(y), sz[x] += sz[y]; </div><div class="line">			<span class="keyword">if</span> (sz[y]&gt;sz[sn[x]]) sn[x]=y; </div><div class="line">		&#125; </div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">odr</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> top)</span> </span>&#123; </div><div class="line">	tp[x]=top, dn[x]=++cnt, bd[cnt]=x; <span class="keyword">int</span> y; </div><div class="line">	<span class="keyword">if</span> (sn[x]) &#123;</div><div class="line">		odr(sn[x], top); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=e[i].nxt) </div><div class="line">			<span class="keyword">if</span> (y=e[i].to, y!=sn[x]&amp;&amp;y!=f[x])</div><div class="line">				odr(y, y); </div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ad0</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (; x &lt;= n; x += x&amp;-x) s0[x]+=v; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ad1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> (; x &lt;= n; x += x&amp;-x) s1[x]+=v; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> (; x &lt;= n; x += x&amp;-x) oo[x]+=v;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ak1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> sm=<span class="number">0</span>)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (; x; x-=x&amp;-x) sm+=s1[x]; <span class="keyword">return</span> sm; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ak0</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> sm=<span class="number">0</span>)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (; x; x-=x&amp;-x) sm+=s0[x]; <span class="keyword">return</span> sm; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> sm=<span class="number">0</span>)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (; x; x-=x&amp;-x) sm+=oo[x]; <span class="keyword">return</span> sm; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">chng</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> v, <span class="keyword">int</span> t)</span> </span>&#123; </div><div class="line"><span class="comment">//	cout &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt;  ' ' &lt;&lt; v &lt;&lt; ' ' &lt;&lt; t &lt;&lt; endl;</span></div><div class="line">	<span class="keyword">if</span> (de[x] &lt; de[y]) <span class="keyword">return</span>; </div><div class="line">	<span class="keyword">for</span> (; tp[x]!=tp[y]; x=f[tp[x]])</div><div class="line">		(t) ? (ad1(dn[tp[x]],v), ad1(dn[x]+<span class="number">1</span>,-v))</div><div class="line">		  : (ad0(dn[tp[x]],v), ad0(dn[x]+<span class="number">1</span>,-v));</div><div class="line">	t ? (ad1(dn[y], v), ad1(dn[x]+<span class="number">1</span>,-v))</div><div class="line">	  : (ad0(dn[y], v), ad0(dn[x]+<span class="number">1</span>,-v)); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dd</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> ans=r, md;</div><div class="line">	<span class="keyword">while</span> (l&lt;=r) &#123; md = (l+r) &gt;&gt; <span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (t) &#123;</div><div class="line">			<span class="keyword">if</span> (ask(r) - ask(md<span class="number">-1</span>) == r-md+<span class="number">1</span>) </div><div class="line">			 	ans = md, r = md<span class="number">-1</span>; </div><div class="line">			<span class="keyword">else</span> l = md + <span class="number">1</span>; </div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (ask(r) - ask(md<span class="number">-1</span>)) l = md+<span class="number">1</span>; </div><div class="line">			<span class="keyword">else</span> ans =md, r = md<span class="number">-1</span>;  </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> bd[ans]; </div><div class="line">&#125;</div><div class="line">			</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t)</span> </span>&#123; </div><div class="line">	<span class="keyword">while</span> (tp[x] != <span class="number">1</span>) <span class="keyword">if</span> (t) </div><div class="line">		<span class="keyword">if</span> (dn[x]-dn[tp[x]]+<span class="number">1</span>==ask(dn[x])-ask(dn[tp[x]]<span class="number">-1</span>))</div><div class="line">			<span class="keyword">if</span> (a[f[tp[x]]]) x=f[tp[x]]; <span class="keyword">else</span> <span class="keyword">return</span> tp[x]; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> dd(dn[tp[x]], dn[x], t); </div><div class="line">	<span class="keyword">else</span> </div><div class="line">		<span class="keyword">if</span> (ask(dn[x])-ask(dn[tp[x]]<span class="number">-1</span>)) <span class="keyword">return</span> dd(dn[tp[x]],dn[x],t); </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (a[f[tp[x]]]) <span class="keyword">return</span> tp[x]; <span class="keyword">else</span> x=f[tp[x]]; </div><div class="line">	<span class="keyword">return</span> dd(<span class="number">1</span>, dn[x], t); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line"><span class="comment">//	freopen("A.in", "r", stdin); </span></div><div class="line"><span class="comment">//	freopen("A.out", "w", stdout); </span></div><div class="line">	in(n); <span class="keyword">int</span> x, y; </div><div class="line">	rep(i, n<span class="number">-1</span>) in(x), in(y),link(x,y),link(y,x); </div><div class="line">	dfs(<span class="number">1</span>); odr(<span class="number">1</span>, <span class="number">1</span>); </div><div class="line">	REP(i, <span class="number">1</span>, n) &#123;</div><div class="line">		ad1(dn[i], sz[i]), ad1(dn[i]+<span class="number">1</span>,-sz[i]);</div><div class="line">		add(dn[i], <span class="number">1</span>), a[i] = <span class="number">1</span>; </div><div class="line">	&#125; </div><div class="line">	ad0(<span class="number">1</span>, <span class="number">1</span>), in(m); <span class="keyword">int</span> t; </div><div class="line">	<span class="keyword">while</span> (m--) &#123; </div><div class="line">		in(t), in(x); </div><div class="line">		<span class="keyword">if</span> (t) &#123;</div><div class="line">			a[x] ? (chng(f[x], max(<span class="number">1</span>, f[up(x,a[x])]), -ak1(dn[x]), <span class="number">1</span>),</div><div class="line">			add(dn[x], <span class="number">-1</span>), chng(f[x], max(<span class="number">1</span>, f[up(x,a[x]=<span class="number">0</span>)]),ak0(dn[x]), <span class="number">0</span>))</div><div class="line">		:	(chng(f[x], max(<span class="number">1</span>, f[up(x,a[x])]),-ak0(dn[x]), <span class="number">0</span>),</div><div class="line">			add(dn[x], <span class="number">1</span>), chng(f[x], max(<span class="number">1</span>, f[up(x,a[x]=<span class="number">1</span>)]),ak1(dn[x]),<span class="number">1</span>)); </div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (a[x]?ak1(dn[up(x,a[x])]):ak0(dn[up(x,a[x])])));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">puts</span>(<span class="string">""</span>); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-rincourse-selection">【CC RIN】Course Selection</h1>
<h2 id="题目大意-6">题目大意</h2>
<p>每个学期学一个课程会有一个收益， 每个课程有若干个前置课程， 问获得的最大收益。</p>
<h2 id="解题报告-6">解题报告</h2>
<p>这个是鸟哥(<span class="citation">@faebdc</span>)论文里的题目。</p>
<p>把每个课程在不同的学期拆点， 然后相邻的两个学期连边， <span class="math inline">\(S\)</span>连到第一个学期， 最后一个学期连到<span class="math inline">\(T\)</span>, 流量限制是与最大收益的差值；</p>
<p>如何对选课的顺序进行限制? 通过连inf边强制前置课程在前选择。</p>
<h2 id="代码-6">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1000000000</span>;</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt, to, f; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,<span class="keyword">int</span> f=<span class="number">0</span>) </div><div class="line">		:nxt(nxt), to(to), f(f) &#123;&#125;</div><div class="line">&#125; e[<span class="number">100000</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> head[<span class="number">100000</span>], X[N][N], n, m, k, S, T, tot=<span class="number">1</span>; </div><div class="line"> </div><div class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(T &amp;x, T a)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (a &gt; x) x = a; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	<span class="keyword">return</span> (x<span class="number">-1</span>) * m + y; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">	e[++tot]=edge(head[x], y, f), head[x]=tot; </div><div class="line">	e[++tot]=edge(head[y], x, <span class="number">0</span>), head[y]=tot; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> de[<span class="number">100000</span>]; </div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</div><div class="line">	q.push(S); <span class="built_in">memset</span>(de, <span class="number">0</span>, <span class="keyword">sizeof</span>(de)); </div><div class="line">	de[S] = <span class="number">1</span>; </div><div class="line">	<span class="keyword">int</span> x, y; </div><div class="line">	<span class="keyword">while</span> (!q.empty()) &#123; </div><div class="line">		x = q.front(), q.pop(); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x]; i; i=e[i].nxt) </div><div class="line">			<span class="keyword">if</span> (y = e[i].to, e[i].f&amp;&amp;!de[y])</div><div class="line">				de[y] = de[x] + <span class="number">1</span>, q.push(y); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> de[T]; </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> mx)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x == T) <span class="keyword">return</span> mx; </div><div class="line">	<span class="keyword">int</span> hv = <span class="number">0</span>, y, f;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</div><div class="line">		<span class="keyword">if</span> (y=e[i].to, e[i].f&amp;&amp;de[y]==de[x]+<span class="number">1</span>) &#123; </div><div class="line">			f = dfs(y, min(mx, e[i].f)); </div><div class="line">			e[i].f -= f, e[i^<span class="number">1</span>].f += f, hv += f; </div><div class="line">			mx -= f; <span class="keyword">if</span> (!mx) <span class="keyword">return</span> hv; </div><div class="line">		&#125; </div><div class="line">	de[x] = <span class="number">-1</span>; <span class="keyword">return</span> hv; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">MINCOST</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> rec = <span class="number">0</span>; </div><div class="line">	<span class="keyword">while</span> (bfs()) rec += dfs(S, inf); </div><div class="line">	<span class="keyword">return</span> rec; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k); </div><div class="line">	S = <span class="number">0</span>, T = n*m + <span class="number">1</span>; <span class="keyword">int</span> ans = <span class="number">0</span>;  </div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</div><div class="line">		<span class="keyword">int</span> mx = <span class="number">0</span>; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m; ++j) 			</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;X[i][j]), cmax(mx, X[i][j]); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;m; ++j) </div><div class="line">			add(id(i, j), id(i, j+<span class="number">1</span>), (X[i][j]==<span class="number">-1</span>)?inf:mx-X[i][j]); </div><div class="line">		add(id(i, m), T, (X[i][m]==<span class="number">-1</span>)?inf:mx-X[i][m]); </div><div class="line">		add(S, id(i, <span class="number">1</span>), inf), ans += mx; </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=k; ++i) &#123; </div><div class="line">		<span class="keyword">int</span> A, B; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;A, &amp;B); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=m<span class="number">-1</span>; ++j) </div><div class="line">			add(id(A, j), id(B, j+<span class="number">1</span>), inf); </div><div class="line">		add(id(A, m), T, inf); </div><div class="line">	&#125; </div><div class="line">	</div><div class="line">	ans -= MINCOST(); </div><div class="line">	</div><div class="line">	<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>, (ff)ans/(ff)n), <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-gnumgame-of-numbers">【CC GNUM】Game of Numbers</h1>
<h2 id="题目链接"><a href="https://www.codechef.com/problems/GNUM" target="_blank" rel="external">题目链接</a></h2>
<h2 id="解题报告-7">解题报告</h2>
<p>（这个人怎么懒到不想写题目大意呀）</p>
<p>把<span class="math inline">\(gcd(i,j)!=1\)</span>的点分为<span class="math inline">\(b_j &gt; a_i\)</span> 和 <span class="math inline">\(b_j &lt; a_i\)</span> 两类， 建成连<span class="math inline">\(S\)</span>  <span class="math inline">\(T\)</span> 的两排点， 把出现过的质因数建成中间的一排点。</p>
<p><span class="math inline">\((i,j)\)</span> 连 <span class="math inline">\(gcd(i,j)\)</span> 包含的质数的点， 流量是<span class="math inline">\(1\)</span>, 直接最大流。</p>
<h2 id="代码-7">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">410</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> nxt, to, f; </div><div class="line">	edge(<span class="keyword">int</span> nxt=<span class="number">0</span>, <span class="keyword">int</span> to=<span class="number">0</span>, <span class="keyword">int</span> f=<span class="number">0</span>) </div><div class="line">		:nxt(nxt), to(to), f(f) &#123;&#125;</div><div class="line">&#125; e[N*N*<span class="number">10</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> test, S, T, n, totA, totB, totp, tot;</div><div class="line"><span class="keyword">int</span> a[N], b[N], c[N], head[N*N*<span class="number">10</span>];</div><div class="line"> </div><div class="line"><span class="keyword">int</span> A[N*N], Ap[N*N][<span class="number">12</span>];</div><div class="line"><span class="keyword">int</span> B[N*N], Bp[N*N][<span class="number">12</span>];</div><div class="line"> </div><div class="line"><span class="built_in">map</span> &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; HA, HB, Hp;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">	e[++tot]=edge(head[x], y, f), head[x]=tot; </div><div class="line">	e[++tot]=edge(head[y], x, <span class="number">0</span>), head[y]=tot; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> de[<span class="number">100000</span>]; </div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</div><div class="line">	q.push(S); <span class="built_in">memset</span>(de, <span class="number">0</span>, <span class="keyword">sizeof</span>(de)); </div><div class="line">	de[S] = <span class="number">1</span>; </div><div class="line">	<span class="keyword">int</span> x, y; </div><div class="line">	<span class="keyword">while</span> (!q.empty()) &#123; </div><div class="line">		x = q.front(), q.pop(); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x]; i; i=e[i].nxt) </div><div class="line">			<span class="keyword">if</span> (y = e[i].to, e[i].f&amp;&amp;!de[y])</div><div class="line">				de[y] = de[x] + <span class="number">1</span>, q.push(y); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> de[T]; </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> mx)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x == T) <span class="keyword">return</span> mx; </div><div class="line">	<span class="keyword">int</span> hv = <span class="number">0</span>, y, f;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=e[i].nxt)</div><div class="line">		<span class="keyword">if</span> (y=e[i].to, e[i].f&amp;&amp;de[y]==de[x]+<span class="number">1</span>) &#123; </div><div class="line">			f = dfs(y, min(mx, e[i].f)); </div><div class="line">			e[i].f -= f, e[i^<span class="number">1</span>].f += f, hv += f; </div><div class="line">			mx -= f; <span class="keyword">if</span> (!mx) <span class="keyword">return</span> hv; </div><div class="line">		&#125; </div><div class="line">	de[x] = <span class="number">-1</span>; <span class="keyword">return</span> hv; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dinic</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> rc = <span class="number">0</span>; </div><div class="line">	<span class="keyword">while</span> (bfs()) rc += dfs(S, inf);</div><div class="line">	<span class="keyword">return</span> rc; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;test);</div><div class="line">	</div><div class="line">	<span class="keyword">while</span> (test --) &#123; </div><div class="line">	</div><div class="line">		HA.clear(), HB.clear(), Hp.clear();</div><div class="line">		totA = totB = totp = <span class="number">0</span>;</div><div class="line">		</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">		</div><div class="line">		<span class="keyword">int</span> u, v, k, i, j; </div><div class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b[i]);</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=n ; ++i) <span class="keyword">for</span>(j=<span class="number">1</span> ; j&lt;=n ; ++j)</div><div class="line">			<span class="keyword">if</span>(a[i] != b[j]) &#123;</div><div class="line">				u = __gcd(a[i],b[j]);</div><div class="line">				v = <span class="number">1</span>, c[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">				<span class="keyword">for</span>(k=<span class="number">2</span>; k*k &lt;= u; ++k)</div><div class="line">					<span class="keyword">if</span>(u%k == <span class="number">0</span>) &#123;</div><div class="line">						v *= k, c[++c[<span class="number">0</span>]] = k;</div><div class="line">						<span class="keyword">while</span> (u % k==<span class="number">0</span>) u/=k; </div><div class="line">					&#125;</div><div class="line">				<span class="keyword">if</span>(u!=<span class="number">1</span>) v *= u, c[++c[<span class="number">0</span>]]=u;</div><div class="line">				</div><div class="line">				<span class="keyword">if</span>(a[i] &gt; b[j]) &#123;</div><div class="line">				</div><div class="line">					<span class="keyword">if</span>(!HA[v]) &#123;</div><div class="line">						HA[v] = ++totA;</div><div class="line">						A[totA]=<span class="number">1</span>, Ap[totA][<span class="number">0</span>] = c[<span class="number">0</span>];</div><div class="line">						<span class="keyword">for</span>(k=<span class="number">1</span>; k&lt;=c[<span class="number">0</span>]; ++k) &#123;</div><div class="line">							<span class="keyword">if</span> (!Hp[c[k]]) Hp[c[k]] = ++totp;</div><div class="line">							Ap[totA][k] = Hp[c[k]];</div><div class="line">						&#125;</div><div class="line">					&#125; <span class="keyword">else</span> ++A[HA[v]];</div><div class="line">					</div><div class="line">				&#125; <span class="keyword">else</span> &#123;</div><div class="line">				</div><div class="line">					<span class="keyword">if</span>(!HB[v]) &#123;</div><div class="line">						HB[v] = ++totB;</div><div class="line">						B[totB] = <span class="number">1</span>, Bp[totB][<span class="number">0</span>] = c[<span class="number">0</span>];</div><div class="line">						<span class="keyword">for</span>(k=<span class="number">1</span>; k &lt;= c[<span class="number">0</span>]; ++k) &#123;</div><div class="line">							<span class="keyword">if</span>(!Hp[c[k]]) Hp[c[k]] = ++totp;</div><div class="line">							Bp[totB][k] = Hp[c[k]];</div><div class="line">						&#125;</div><div class="line">					&#125; <span class="keyword">else</span> ++B[HB[v]];</div><div class="line">					</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		S=<span class="number">0</span>, T=totA + totp + totB + <span class="number">1</span>;</div><div class="line">		</div><div class="line">		<span class="built_in">memset</span>(e, <span class="number">0</span>, <span class="keyword">sizeof</span>(e)); </div><div class="line">		<span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span>(head)); </div><div class="line">		tot = <span class="number">1</span>; </div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(i=<span class="number">1</span>; i &lt;= totA; ++i) &#123;</div><div class="line">			add(S, i, A[i]);</div><div class="line">			<span class="keyword">for</span>(j=<span class="number">1</span>; j &lt;= Ap[i][<span class="number">0</span>]; ++j)</div><div class="line">				add(i, totA+Ap[i][j], inf);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= totB; ++i) &#123;</div><div class="line">			<span class="keyword">for</span>(j=<span class="number">1</span>; j &lt;= Bp[i][<span class="number">0</span>]; ++j)</div><div class="line">				add(totA+Bp[i][j], totA+totp+i, inf);</div><div class="line">			add(totA+totp+i, T, B[i]);</div><div class="line">		&#125;</div><div class="line">		</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dinic());</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cc-qtree2counting-on-a-tree">【CC QTREE2】Counting on a Tree</h1>
<h2 id="题目大意-7">题目大意</h2>
<p>每次修改一个点的权值， 求路径<span class="math inline">\(gcd\)</span>为<span class="math inline">\(1\)</span>的路径条数。</p>
<h2 id="解题报告-8">解题报告</h2>
<p>设<span class="math inline">\(f(i)\)</span>表示路径<span class="math inline">\(gcd\)</span>是<span class="math inline">\(i\)</span>的倍数的路径条数， 答案是$_i (i)f(i) $ .</p>
<p>如果没有修改， 那么每条边会被作为<span class="math inline">\(2^t\)</span>个数的倍数， 其中<span class="math inline">\(t\)</span>是边权的质因子个数（因为如果幂指数不是<span class="math inline">\(1\)</span>，<span class="math inline">\(\mu\)</span>就是<span class="math inline">\(0\)</span>), 通过并查集得到<span class="math inline">\(f(i)\)</span>是十分容易的。</p>
<p>因为修改的次数很少， 所以可以把从来没有修改的边先加入并查集中， 然后对于每一个询问， 把有修改的边修改好加入并查集， 统计好答案后还原。</p>
<p>因为需要还原， 所以并查集需要用启发式合并。</p>
<p>复杂度<span class="math inline">\(O(2^t(n+Q^2)\log n)\)</span></p>
<h2 id="代码-8">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100005</span>, P = <span class="number">1000005</span>;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> n, Q, f[N], size[N], a[N], c[N];</div><div class="line">ll res, ans[N];</div><div class="line"><span class="keyword">int</span> mu[P], p[P], vis[P], t;</div><div class="line"><span class="keyword">bool</span> lock[N];</div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> <span class="keyword">int</span> u, v, w; &#125; s[N];</div><div class="line"> </div><div class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; del;</div><div class="line"><span class="built_in">vector</span>&lt; pii &gt; q[P];</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> prime[P], tot = <span class="number">0</span>;</div><div class="line">	mu[<span class="number">1</span>] = <span class="number">1</span>; ++t;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; P; ++i) &#123;</div><div class="line">		<span class="keyword">if</span>(vis[i] != t) mu[prime[++tot] = p[i] = i] = <span class="number">-1</span>;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= tot &amp;&amp; prime[j] * i &lt; P; ++j) &#123;</div><div class="line">			vis[prime[j] * i] = t;</div><div class="line">			p[prime[j] * i] = prime[j];</div><div class="line">			<span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</div><div class="line">			mu[i * prime[j]] = -mu[i];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">divide</span><span class="params">(pii op, <span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ds; ds.pb(<span class="number">1</span>);</div><div class="line">	<span class="keyword">while</span>(val != <span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">int</span> x = p[val];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i = ds.size(); i--; ) ds.pb(x * ds[i]);</div><div class="line">		<span class="keyword">while</span>(val % x == <span class="number">0</span>) val /= x;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = ds.size(); i--; ) q[ds[i]].pb(op);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ask</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; </div><div class="line">	<span class="keyword">return</span> <span class="number">1L</span>L * i * (i - <span class="number">1</span>) &gt;&gt; <span class="number">1</span>; </div><div class="line">&#125;</div><div class="line">	 </div><div class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _find(<span class="keyword">int</span> x) &#123; </div><div class="line">	<span class="keyword">return</span> f[x] == x ? x : _find(f[x]); </div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">stack</span>&lt; pii &gt; S;</div><div class="line"> </div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _union(<span class="keyword">int</span> u, <span class="keyword">int</span> v) &#123;</div><div class="line">	u = _find(u); v = _find(v);</div><div class="line">	<span class="keyword">if</span>(u == v) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span>(size[u] &lt; size[v]) swap(u, v);</div><div class="line">	res -= ask(size[u]) + ask(size[v]);</div><div class="line">	size[f[v] = u] += size[v];</div><div class="line">	res += ask(size[u]);</div><div class="line">	S.push(make_pair(u, v));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _restore() &#123;</div><div class="line">	<span class="keyword">int</span> u = S.top().fi, v = S.top().se; S.pop();</div><div class="line">	res -= ask(size[u]);</div><div class="line">	size[u] -= size[f[v] = v];</div><div class="line">	res += ask(size[u]) + ask(size[v]);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">	<span class="built_in">vector</span>&lt; pii &gt;&amp; op = q[p];</div><div class="line">	<span class="keyword">if</span>(op.empty()) <span class="keyword">return</span>;</div><div class="line">	</div><div class="line">	<span class="built_in">stack</span>&lt; pii &gt;().swap(S);</div><div class="line">	res = <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">auto</span> x : op) &#123;</div><div class="line">		<span class="keyword">int</span> u = s[x.fi].u, v = s[x.fi].v;</div><div class="line">		size[f[u] = u] = size[f[v] = v] = <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>; l &lt; op.size(); l = r) &#123;</div><div class="line">		<span class="keyword">for</span>(; r &lt; op.size() &amp;&amp; op[r].se == op[l].se; ++r)</div><div class="line">			_union(s[op[r].fi].u, s[op[r].fi].v);</div><div class="line">		<span class="keyword">if</span>(op[l].se &lt; <span class="number">0</span>) &#123;</div><div class="line">			<span class="built_in">stack</span>&lt; pii &gt;().swap(S);</div><div class="line">			++t;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &lt; op.size(); ++i) vis[op[i].se] = t;</div><div class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Q; ++i) <span class="keyword">if</span>(vis[i] != t) ans[i] += res * mu[p];</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			ans[op[l].se] += res * mu[p];</div><div class="line">			<span class="keyword">while</span>(!S.empty()) _restore();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	init();</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) </div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;s[i].u, &amp;s[i].v, &amp;s[i].w);</div><div class="line"> </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) &#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, a + i, c + i);</div><div class="line">		<span class="keyword">if</span>(!lock[a[i]]) &#123;</div><div class="line">			del.pb(a[i]);</div><div class="line">			lock[a[i]] = <span class="literal">true</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">		<span class="keyword">if</span>(!lock[i]) divide(make_pair(i, <span class="number">-1</span>), s[i].w);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</div><div class="line">		<span class="keyword">if</span>(lock[i]) divide(make_pair(i, <span class="number">0</span>), s[i].w);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) &#123;</div><div class="line">		s[a[i]].w = c[i];</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j : del) divide(make_pair(j, i), s[j].w);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; P; ++i)</div><div class="line">		<span class="keyword">if</span>(mu[i] != <span class="number">0</span>) solve(i);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Q; ++i) </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans[i] + ask(n));</div><div class="line">		</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 题目集锦 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> 树链剖分 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> DP </tag>
            
            <tag> 数论 </tag>
            
            <tag> 分块 </tag>
            
            <tag> 矩阵/行列式 </tag>
            
            <tag> bitset </tag>
            
            <tag> 网络流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[projecteuler-选做]]></title>
      <url>/pe/</url>
      <content type="html"><![CDATA[<blockquote>
<p>通过做project euler上的题目， 做一些数学方面的练习</p>
</blockquote>
<a id="more"></a>
<h1 id="project-euler-439"><a href="https://projecteuler.net/problem=439" target="_blank" rel="external">Project Euler #439</a></h1>
<h2 id="题目大意">题目大意</h2>
<p><span class="math display">\[\displaystyle S(N) = \sum_{1 \leqslant i \leqslant N} \sum_{1 \leqslant j \leqslant N} d(i * j)\]</span> <span class="math display">\[d(n) = \sum _{k|n} k\]</span> ## 解题报告 本来想新年第一天搞一发, 但是可怜的是当天没调出来; <br> 首先将式子化简: <span class="math display">\[d(i*j) = \sum \frac{j * p}{q} (p|i,q|j,(p,q)=1) \]</span> <span class="math display">\[S(n) = \sum_{i=1}^{n} \sum_{j=1}^{n}[(p,q)=1] \ p * \sum _{i*p \leqslant n} \sum_{j * q \leqslant n} j\]</span> <span class="math display">\[S(n) = \sum_{p=1}^{n} \sum_{q=1}^{n} \sum_{d|(p,q)} \mu (d)\ p * \sum_{i * p \leqslant n} \sum_{j * q \leqslant n} j\]</span> <span class="math display">\[S(n) = \sum_{d=1}^{n} \mu(d)d \sum_{pd \leqslant n} p\sum_{i * pd \leqslant n} \  \sum_{qd \leqslant n}\sum_{j * qd \leqslant n}j\]</span> 如果把式子中的 <span class="math inline">\(\lfloor \frac{n}{d} \rfloor\)</span> 设为 <span class="math inline">\(I\)</span> , 则 <span class="math display">\[S(n) = \sum_{d=1}^{n} \mu(d)d (\sum_{i}^I\sum_{d|i}d)^2\]</span> 现在就可以做了, 前半部分是我刚学习的杜教筛, 后半部分只有 <span class="math inline">\(\sqrt{n}\)</span> 个取值, 是约数和可以直接分块求;</p>
<p>预处理 <span class="math inline">\(O(n^{\frac{2}{3}})\)</span> , 总复杂度变成 <span class="math inline">\(O(n^{\frac{2}{3}})\)</span> ; 目前没有解决的是复杂度的分析证明…</p>
<h1 id="project-euler-310"><a href="https://projecteuler.net/problem=310" target="_blank" rel="external">Project Euler #310</a></h1>
<h2 id="题目大意-1">题目大意</h2>
<p>只能取完全平方数的nim游戏, 只有三堆, 问必败局面的数量; ## 解题报告 直接暴力sg函数+暴力dp = <span class="math inline">\(5s\)</span>, 跑出了答案;</p>
<p>但是发现sg函数的值非常密集, 最大的不超过在<span class="math inline">\(\sqrt{n}\)</span> 所以只需要枚举三堆的sg值, 就可以<span class="math inline">\(n^{\frac{3}{2}}\)</span>地得到答案, 这个做法秒出答案;</p>
<h2 id="代码">代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</div><div class="line"><span class="keyword">int</span> f[N];</div><div class="line">ll g[<span class="number">2</span>][<span class="number">4</span>][<span class="number">130000</span>];</div><div class="line">vi square;</div><div class="line"><span class="built_in">bitset</span>&lt;130000&gt; ap;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= <span class="number">100000</span>; ++i)</div><div class="line">        square.pb(i * i) ;</div><div class="line">    FORU(i, <span class="number">1</span>, <span class="number">100000</span>) &#123;</div><div class="line">        ap.reset();</div><div class="line">        REP(j, sz(square)) &#123;</div><div class="line">            <span class="keyword">if</span> (square[j] &gt; i) <span class="keyword">break</span>;</div><div class="line">            ap.<span class="built_in">set</span>(f[i - square[j]]);</div><div class="line">        &#125;</div><div class="line">        REP(j, i + <span class="number">1</span>) <span class="keyword">if</span> (!ap[j]) &#123;</div><div class="line">            f[i] = j; <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    mmst(g, <span class="number">-1</span>);</div><div class="line">    g[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> pre, now;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100000</span>; ++i) &#123;</div><div class="line">        now = i &amp; <span class="number">1</span>, pre = now ^ <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; ++j)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">130000</span>; ++k)</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>, tmp = <span class="number">0</span>; l &lt;= j; ++l, tmp ^= f[i])</div><div class="line">                    <span class="keyword">if</span> (g[pre][j - l][k ^ tmp] != <span class="number">-1</span>) &#123;</div><div class="line">                        <span class="keyword">if</span> (g[now][j][k] == <span class="number">-1</span>) g[now][j][k] = <span class="number">0</span>;</div><div class="line">                        g[now][j][k] += g[pre][j-l][k ^ tmp];</div><div class="line">                    &#125;</div><div class="line">        mmst(g[pre], <span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; g[<span class="number">0</span>][<span class="number">3</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="project-euler-265"><a href="https://projecteuler.net/problem=265" target="_blank" rel="external">Project Euler #265</a></h1>
<h2 id="题目大意-2">题目大意</h2>
<p>将所有长度为<span class="math inline">\(n\)</span>的二进制数放在一个环中, 使得顺时钟读取的<span class="math inline">\(2^n\)</span>个数不重不漏, 输出<span class="math inline">\(n = 5\)</span>时, 所有合法环对应十进制数值的和; ## 解题报告 不小心开启了刷水模式, 但我也不知道这个题这么简单;</p>
<p>直接枚举环上的二进制位肯定会T, 但是只要预处理出每个二进制数的后继数字(在后4位的末尾加一个0/1), 就可以有效的剪枝;</p>
<p>另一个比较优越的优化, 就是不需要深搜<span class="math inline">\(2^5\)</span>层, 只需要<span class="math inline">\(2^5-4\)</span>层就可以, 这是因为为了避免环状置换, 可以强制让第一个数为<span class="math inline">\(0\)</span>;</p>
<h2 id="代码-1">代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">34</span>;</div><div class="line"></div><div class="line">vi nxt[N], have;</div><div class="line">ll ans = <span class="number">0</span>;</div><div class="line"><span class="keyword">bool</span> vis[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">last</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    REP(i, w) tmp |= (<span class="number">1</span> &lt;&lt; i) &amp; x;</div><div class="line">    <span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">got</span><span class="params">(vi &amp; v)</span> </span>&#123;</div><div class="line">    ll x = <span class="number">0</span>;</div><div class="line">    REP(i, sz(v)) x = x &lt;&lt; <span class="number">1</span> | v[i];</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">legal</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    REP(i, <span class="number">4</span>) &#123;</div><div class="line">        x = last(x, <span class="number">4</span>) &lt;&lt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (vis[x]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pas, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; pas &lt;&lt; <span class="string">' '</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    have.pb(x &amp; <span class="number">1</span>);</div><div class="line">    vis[x] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (pas == <span class="number">27</span> &amp;&amp; legal(x)) &#123;</div><div class="line">        LOOK(have, <span class="number">0</span>, <span class="number">31</span>);</div><div class="line">        ans += got(have);</div><div class="line">    &#125; <span class="keyword">else</span></div><div class="line">        REP(i, sz(nxt[x]))</div><div class="line">            <span class="keyword">if</span> (!vis[nxt[x][i]])</div><div class="line">                dfs(pas + <span class="number">1</span>, nxt[x][i]);</div><div class="line">    have.pop_back();</div><div class="line">    vis[x] = <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    REP(i, <span class="number">32</span>) &#123;</div><div class="line">        <span class="keyword">int</span> tmp = last(i, <span class="number">4</span>) &lt;&lt; <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (tmp ^ i) nxt[i].pb(tmp);</div><div class="line">        tmp = last(i, <span class="number">4</span>) &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span> (tmp ^ i) nxt[i].pb(tmp);</div><div class="line">    &#125;</div><div class="line">    REP(i, <span class="number">4</span>) have.pb(<span class="number">0</span>);</div><div class="line">    dfs(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;  <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="project-euler-565"><a href="https://projecteuler.net/problem=565" target="_blank" rel="external">Project Euler #565</a></h1>
<h2 id="date-20161225">Date: 2016/12/25</h2>
<h2 id="题目大意-3">题目大意</h2>
<p><span class="math inline">\([1, 10^{11}]\)</span> 中， 约数和能被<span class="math inline">\(2017\)</span>整除的数的和； ## 解题报告 <span class="math display">\[\sum(n) = \prod \sum p^i = \prod \frac{1-p^{k+1}}{1-p}\]</span></p>
<p>通过打表可以发现，对于一个质数<span class="math inline">\(p\)</span>， 只有一个幂指数<span class="math inline">\(k\)</span>满足<span class="math inline">\(2017| \frac{1-p^{k+1}}{1-p}\)</span>;</p>
<p>并且，通过打表，可以发现，最小的三个<span class="math inline">\(p^k\)</span> 的乘积大于<span class="math inline">\(10^{11}\)</span>, 且<span class="math inline">\(10^{11}\)</span>内， 满足条件的<span class="math inline">\(p^k\)</span>数量很少， 只有<span class="math inline">\(10^4\)</span>左右；</p>
<p>但是问题来了，线性筛法， 不能做<span class="math inline">\(10^{11}\)</span>内的质数；</p>
<p>继续打表， 可以发现， 对于大于<span class="math inline">\(10^6\)</span>的所有合法的<span class="math inline">\(p^k\)</span>, <span class="math inline">\(k = 1\)</span>， 那么可以枚举<span class="math inline">\(10^{11}\)</span>内， <span class="math inline">\(2017\)</span>的倍数<span class="math inline">\(y\)</span>， 然后<span class="math inline">\(\sqrt{n}\)</span>检验<span class="math inline">\(y-1\)</span>是否是质数；</p>
<p>当得到所有的合法的<span class="math inline">\(p^k\)</span>, 他的所有倍数<span class="math inline">\(x(gcd(x, p^k) = p^k)\)</span>添加到答案中，再<span class="math inline">\(O(n^2)\)</span>枚举容斥， 就可以AC;</p>
<p>但问题是， 搞不懂为什么自己的程序在windows10上跑到一半就被当做<strong>病毒</strong>删了！</p>
<p>F××K</p>
<h1 id="project-euler-169"><a href="https://www.hackerrank.com/contests/projecteuler/challenges/euler169" target="_blank" rel="external">Project Euler #169</a></h1>
<h2 id="题目大意-4">题目大意</h2>
<p>一个数表示成<span class="math inline">\(2^i\)</span>形式的方案数， 每个<span class="math inline">\(2^i\)</span>可以使用两次； ## 解题报告 通过打表， 可以发现， 设方案数为<span class="math inline">\(f[x]\)</span>, 则<span class="math inline">\(f[x] = f[y] (x = 2*y-1)\)</span>, <span class="math inline">\(f[x] = f[y] + f[x-1](x = 2 * y)\)</span>;</p>
<p>简单证明: 1. 对于<span class="math inline">\(x = 2*y+1\)</span>, 可以将<span class="math inline">\(y\)</span>的方案中， 所有数全部乘二， 然后加一个单独的1，得到合法方案， 容易证明， 任何将方案中的每个<span class="math inline">\(2^i\)</span>拆解， 都会导致与另一方案重复； 2. 对于<span class="math inline">\(x = 2 * y\)</span>, 首先可以将<span class="math inline">\(y\)</span>的方案中， 所有数乘二，得到若干合法的方案。 然后考虑合法的不与其他方案重复的拆解， 发现只能就某个2拆成2个1，是不会冲突的； 那么去掉拆出的一个1， 就可以等价于f[x-1];</p>
<p>程序实现中，定义了一个30位大整数， 利用两个<code>long long</code>实现；</p>
<h2 id="update">UPDATE</h2>
<p>mrazer 大爷 轻松的搞了一个DP的做法, 比我的科学多了, 复杂度更优越, 关键是, 人家并不是打表看的规律; 链接: http://blog.csdn.net/mrazer/article/details/53898297</p>
<h2 id="代码-2">代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50</span>;</div><div class="line"><span class="keyword">const</span> ll ba = <span class="number">1000000000000000L</span>L;</div><div class="line"><span class="comment">/*</span></div><div class="line">int f[12][1000000];</div><div class="line">int main() &#123;</div><div class="line">	f[0][0] = 1;</div><div class="line">	FORU(i, 0, 10) &#123;</div><div class="line">		FORU(j, 0, 1024) f[i+1][j] = f[i][j];</div><div class="line">		FORU(j, (1&lt;&lt;i), 1024)</div><div class="line">			f[i+1][j] += f[i][j-(1&lt;&lt;i)];</div><div class="line">		FORU(j, (2 * (1&lt;&lt;i)), 1024)</div><div class="line">			f[i+1][j] += f[i][j-2*(1&lt;&lt;i)];</div><div class="line">	&#125;</div><div class="line">	FORU(i, 1, 50)</div><div class="line">		if ( !(i &amp; 1) )</div><div class="line">		cout &lt;&lt; i &lt;&lt; ": " &lt;&lt; f[11][i] &lt;&lt; endl;</div><div class="line">	return 0;</div><div class="line">&#125;</div><div class="line">*/</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bigInteger</span> &#123;</span></div><div class="line">	ll a, b;</div><div class="line">	bigInteger() &#123;a = b = <span class="number">0</span>;&#125;</div><div class="line">	bigInteger(ll a, ll b) :a(a), b(b)&#123;&#125;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> bigInteger c) <span class="keyword">const</span>&#123;</div><div class="line">		<span class="keyword">return</span> a == c.a ? b &lt; c.b: a &lt; c.a;</div><div class="line">	&#125;</div><div class="line">	<span class="function">bigInteger <span class="title">div2</span><span class="params">()</span> </span>&#123;</div><div class="line">		bigInteger c;</div><div class="line">		c.b = b / <span class="number">2</span>;</div><div class="line">		<span class="keyword">if</span> (a &amp; <span class="number">1</span>) c.b += ba/<span class="number">2</span>;</div><div class="line">		c.a = a / <span class="number">2</span>;</div><div class="line">		<span class="keyword">return</span> c;</div><div class="line">	&#125;</div><div class="line">	bigInteger <span class="keyword">operator</span> - (<span class="keyword">int</span> x) &#123;</div><div class="line">		bigInteger c = *<span class="keyword">this</span>;</div><div class="line">		c.b -= x;</div><div class="line">		<span class="keyword">if</span> (c.b &lt; <span class="number">0</span>) c.a -= <span class="number">1</span>, c.b += ba;  </div><div class="line">		<span class="keyword">return</span> c;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;;<span class="comment">// a*10e15 + b</span></div><div class="line"><span class="built_in">map</span>&lt;bigInteger, ll&gt; f;</div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(bigInteger x)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (f[x]) <span class="keyword">return</span> f[x];</div><div class="line">	<span class="keyword">if</span> (x.b&amp;<span class="number">1</span>) f[x] = dfs(x.div2());</div><div class="line">	<span class="keyword">else</span> f[x] = dfs(x.div2()) + dfs(x<span class="number">-1</span>);</div><div class="line">	<span class="keyword">return</span> f[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; s;</div><div class="line">	FORU(i, <span class="number">0</span>, (s.length()<span class="number">-1</span>)/<span class="number">2</span>)</div><div class="line">		swap(s[i], s[ s.length() - i - <span class="number">1</span>]);</div><div class="line">	ll a = <span class="number">0</span>, b = <span class="number">0</span>;</div><div class="line">	FORD(i, <span class="number">14</span>, <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (i + <span class="number">1</span> &gt; s.length()) <span class="keyword">continue</span>;</div><div class="line">		b = b * <span class="number">10</span> + s[i] - <span class="string">'0'</span>;</div><div class="line">	&#125;</div><div class="line">	FORD(i, <span class="number">28</span>, <span class="number">15</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (i + <span class="number">1</span> &gt; s.length()) <span class="keyword">continue</span>;</div><div class="line">		a =  a * <span class="number">10</span> + s[i] - <span class="string">'0'</span>;</div><div class="line">	&#125;</div><div class="line">	f[bigInteger()] = <span class="number">1</span>; 		</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; dfs(bigInteger(a, b)) &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="project-euler-168"><a href="https://www.hackerrank.com/contests/projecteuler/challenges/euler168" target="_blank" rel="external">Project Euler #168</a></h1>
<h2 id="题目大意-5">题目大意</h2>
<p>定义一个数<span class="math inline">\(x = 10 * a + b\)</span>, 一共有<span class="math inline">\(n\)</span>位，<span class="math inline">\(y=b * 10^{n-1}+a\)</span>, 如果<span class="math inline">\(\displaystyle y=kx(k \in \mathbb{N})\)</span>, 则<span class="math inline">\(x\)</span>是合法的， 求<span class="math inline">\((10, 10^m)\)</span>中，合法数的和的后五位； ## 解题报告</p>
<p>比较简单的一道题， 很容易发现， 只要固定个位数字和<span class="math inline">\(k\)</span>， 利用<span class="math inline">\(y\)</span> 和<span class="math inline">\(x\)</span>的<span class="math inline">\(k\)</span>倍关系以及错位关系， 可以得到长度为<span class="math inline">\(l (l \in [2, m])\)</span>的有可能合法的数；</p>
<p>这些数合法的条件是最高位和个位在处理完进位后满足<span class="math inline">\(k\)</span>的关系；</p>
<p>所以可以通过<span class="math inline">\(O(9 * 9 * m)\)</span>得到所有的合法数， 求和即可；</p>
<h2 id="代码-3">代码</h2>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> arr[N], m, ans[N*N], answ;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_ans</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">	FORU(i, <span class="number">1</span>, w) &#123;</div><div class="line">		ans[i] += a[i];</div><div class="line">		<span class="keyword">if</span> (ans[i] &gt;= <span class="number">10</span>) ans[i] -= <span class="number">10</span>, ans[i + <span class="number">1</span>] += <span class="number">1</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (ans[w + <span class="number">1</span>] &gt;= <span class="number">10</span>)</div><div class="line">		++ w, ans[w] -= <span class="number">10</span>, ans[w + <span class="number">1</span>] += <span class="number">1</span>;  </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; m; mmst(ans, <span class="number">0</span>);</div><div class="line">	FORU(k, <span class="number">1</span>, <span class="number">9</span>) FORU(i, <span class="number">1</span>, <span class="number">9</span>) &#123;</div><div class="line">		mmst(arr, <span class="number">0</span>); arr[<span class="number">1</span>] = i;</div><div class="line">		FORU(j,	 <span class="number">2</span>, m) &#123;</div><div class="line">			arr[j] += arr[j - <span class="number">1</span>] * k;</div><div class="line">			arr[j+<span class="number">1</span>] += arr[j] / <span class="number">10</span>;</div><div class="line">			arr[j] %= <span class="number">10</span>;</div><div class="line">			<span class="keyword">if</span> (arr[j + <span class="number">1</span>] + arr[j] * k == arr[<span class="number">1</span>] &amp;&amp; arr[j] != <span class="number">0</span>)</div><div class="line">				add_ans(arr, j);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	answ = <span class="number">5</span>;</div><div class="line">	<span class="keyword">while</span> (ans[answ] == <span class="number">0</span>) answ --;</div><div class="line">	<span class="keyword">if</span> (!answ) ++ answ;</div><div class="line">	FORD(i, answ, <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; ans[i]; <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="pe-153investigating-gaussian-integers"><a href="https://projecteuler.net/problem=153" target="_blank" rel="external">【PE 153】Investigating Gaussian Integers</a></h1>
<h2 id="题目大意-6">题目大意</h2>
<p><span class="math inline">\(\frac{n}{a+bi}\)</span> 若能表示成 <span class="math inline">\(k+bi(k, b \in \mathbb{Z})\)</span> 的形式, 则对于 <span class="math inline">\(n\)</span> , <span class="math inline">\((a, b)\)</span> 是一个合法的整数对, <span class="math inline">\(s_n = \sum a[(a, b) \ is \ legal \ for \ n]\)</span> , 求 <span class="math inline">\(\displaystyle \sum_{i=1}^{100000000} s_i\)</span> ; ## 解题报告 合法的等价条件:</p>
<p><span class="math display">\[a^2 + b^2 | gcd(a, b)n\]</span></p>
<p>如果只考虑 <span class="math inline">\(gcd(a, b) = 1\)</span> 的情况, 则 <span class="math inline">\(a^2 + b^2 | n\)</span> ;</p>
<p>如果 <span class="math inline">\(a&#39; = ak, b&#39; = bk\)</span> , 则 <span class="math inline">\(k(a^2 + b^2)|n\)</span> ;</p>
<p>也就是说, 对于 <span class="math inline">\(n\)</span>, 如果互质数对 <span class="math inline">\((a,b), a^2 + b^2 |n\)</span> 那么 <span class="math inline">\((a, b)\)</span> 可以对 <span class="math inline">\(n\)</span> , 造成贡献 <span class="math inline">\(\displaystyle \sum_{k \times (a^2 + b^2)|n}ka\)</span></p>
<p>所以, 对于 <span class="math inline">\(n\)</span> ,</p>
<p><span class="math display">\[s_n = \sum_{d|n}A(d) \times B(n/d)\]</span></p>
<p>其中, <span class="math inline">\(\displaystyle A(n) = \sum_{a^2 + b^2 = n, (a, b) = 1} a\)</span> , <span class="math inline">\(\displaystyle B(n) = \sum_{d|n} d\)</span> ;</p>
<p>求 <span class="math inline">\(B\)</span> ? 直接调和筛法, <span class="math inline">\(O(NlnN)\)</span> ;<br>
求 <span class="math inline">\(A\)</span> ? 把 <span class="math inline">\(a^2 &lt;= 10^8\)</span> 的完全平方数 <span class="math inline">\(n^2\)</span> 组合, 判断互质, 统计, <span class="math inline">\(O(NlnN)\)</span> ;<br>
求 <span class="math inline">\(s = A \times B\)</span> ? 调和筛, <span class="math inline">\(O(NlnN)\)</span> ;</p>
<p>然后 <span class="math inline">\(O(N)\)</span> , 求 <span class="math inline">\(s\)</span> 的和.</p>
<h1 id="pe-184triangles-containing-the-origin"><a href="https://projecteuler.net/problem=184" target="_blank" rel="external">【PE 184】Triangles containing the origin</a></h1>
<h2 id="题目大意-7">题目大意</h2>
<p>在半径为 <span class="math inline">\(r\)</span> 的圆中, 包含原点的整点三角形个数; ## 解题报告 考虑一个三角形 <span class="math inline">\(ABC\)</span> 包含原点的条件, 显然是, <span class="math inline">\(\overrightarrow{OA}, \  \overrightarrow{OB}, \  \overrightarrow{OC}\)</span> 同号;</p>
<p>其实就是固定原点, 按照某个顺序扫过 <span class="math inline">\(ABC\)</span> , 相邻两边转过的角度不超过 <span class="math inline">\(\pi\)</span> ; 这样就有一个 <span class="math inline">\(O(n^2logn)\)</span> 的做法, 也就是按照极角排序后, 枚举两个点, 二分第三个点的范围;</p>
<p>直接不进行排序+二分, 考虑合法三角形点的分布情况: 1. 三个点分别位于一个象限, 这样会空出一个象限: 利用圆和坐标轴的对称性, 可以固定空出的象限, 得到答案 <span class="math inline">\(* 4\)</span>, 具体的, 三个有点的象限中, 相对的两个象限的点形成的线段与第三点在原点的两侧, 可以 <span class="math inline">\(O(n^2)\)</span> 枚举相对两点 + 叉积判断; 2. 三个点有两个点在一个象限, 另一个点在相对的象限: 枚举单独在一个象限的点, 它与原点的连线将相对的象限分为两部分, 分别统计两部分的点的数量并相乘就可以得到枚举的点对答案的贡献, 同样利用对称性, 答案需要乘 <span class="math inline">\(4\)</span> , 复杂度 <span class="math inline">\(O(n^2)\)</span> ; 3. 三个点有一个在坐标轴上, 另外两个点在对侧相邻的两个象限: 这个情况最简单, 答案就是坐标轴本轴点的数量乘象限内点数量的平方, 答案需要乘 <span class="math inline">\(4\)</span> ; 4. 三个点有一个在坐标轴上, 另外两个在相对的两个象限内: 使用坐标半轴上的点的数量乘第一种情况中相对两点合法个数, 答案乘 <span class="math inline">\(8\)</span> ;</p>
<ol start="5" style="list-style-type: decimal">
<li>两个点在不同的坐标轴上, 第三点在相对的象限内: 用坐标半轴的点数乘一个象限内的点数, 答案乘 <span class="math inline">\(4\)</span> ;</li>
</ol>
<h2 id="代码-4">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10100</span>;</div><div class="line"><span class="keyword">int</span> x;</div><div class="line">ll s;</div><div class="line"><span class="built_in">vector</span>&lt; pii &gt; t;</div><div class="line">ll ans;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> n = <span class="number">105</span>;</div><div class="line">    x = n - <span class="number">1</span>;</div><div class="line">    FORU(i, <span class="number">1</span>, n - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> haf = <span class="built_in">sqrt</span>(n * n - i * i);</div><div class="line">        <span class="keyword">if</span> (haf * haf + i * i == n * n)</div><div class="line">            -- haf;</div><div class="line">        FORU(j, <span class="number">1</span>, haf) t.pb(mp(i, j));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> _x, _y, __x, __y;</div><div class="line">    REP(i, sz(t)) REP(j, sz(t)) &#123;</div><div class="line">        _x = t[i].fi, _y = t[i].se;</div><div class="line">        __x = -t[j].fi, __y = -t[j].se;</div><div class="line">        <span class="keyword">if</span> (_x * __y - __x * _y &gt; <span class="number">0</span>)</div><div class="line">            ++ s; <span class="comment">//cout &lt;&lt; _x &lt;&lt; ' ' &lt;&lt; _y &lt;&lt; ' ' &lt;&lt; __x &lt;&lt; ' ' &lt;&lt; __y &lt;&lt; endl;</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// cout &lt;&lt; s &lt;&lt; endl;</span></div><div class="line">    REP(i, sz(t)) &#123;</div><div class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</div><div class="line">        REP(j, sz(t)) &#123;</div><div class="line">            _x = t[i].fi, _y = t[i].se;</div><div class="line">            __x = -t[j].fi, __y = -t[j].se;</div><div class="line">            <span class="keyword">if</span> (_x * __y - __x * _y &gt; <span class="number">0</span>)</div><div class="line">                ++ a;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (_x * __y - __x * _y &lt; <span class="number">0</span>)</div><div class="line">                ++ b;</div><div class="line">        &#125;</div><div class="line"><span class="comment">//        cout &lt;&lt; _x &lt;&lt; ' ' &lt;&lt; _y &lt;&lt; " : " &lt;&lt; a &lt;&lt; ' ' &lt;&lt;b &lt;&lt; endl;</span></div><div class="line">        ans += a * b;</div><div class="line">    &#125;</div><div class="line">    ans = ans * <span class="number">4</span>;</div><div class="line">    ans += (s + x*x) * sz(t) * <span class="number">4</span>;</div><div class="line">    ans += <span class="number">4L</span>L * x * sz(t) * sz(t);</div><div class="line">    ans += <span class="number">8</span> * x * s;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="pe-156counting-digits"><a href="https://projecteuler.net/problem=156" target="_blank" rel="external">【PE 156】Counting Digits</a></h1>
<h2 id="题目大意-8">题目大意</h2>
<p><span class="math inline">\(f[n][d]\)</span> 表示前 <span class="math inline">\(n\)</span> 个数中， 数字 <span class="math inline">\(d\)</span> 出现的次数， 求 <span class="math inline">\(\displaystyle \sum_n \sum_{d = 1}^{9} [f[n][d] = n]\)</span> ## 解题报告 利用数位dp, 可以得到第 <span class="math inline">\(f[n][d]\)</span> , 时间复杂度是 <span class="math inline">\(O(logn)\)</span> ;<br>
但是怎么求出所有满足条件的 <span class="math inline">\((n, d)\)</span> ?<br>
对于不同的 <span class="math inline">\(d\)</span> , 寻找满足条件的 <span class="math inline">\(n\)</span> , 显然, 如果 <span class="math inline">\(n = n + 1\)</span> , <span class="math inline">\(f[n][d]\)</span> 可能不变, 最多增加 <span class="math inline">\(w\)</span> , <span class="math inline">\(w\)</span> 是 <span class="math inline">\(n\)</span> 的位数;<br>
那么如果 <span class="math inline">\(abs(n - f[n][d]) = delta\)</span> , 下一个满足条件的 <span class="math inline">\(n\)</span> 最少需要经过 <span class="math inline">\(delta/w\)</span> , 不妨令 <span class="math inline">\(w = 10\)</span> , 因为通过尝试, 发现最大的满足条件的 <span class="math inline">\(n\)</span> 在 <code>int</code> 范围内…<br>
复杂度? 不是很会证, 但可以在 <span class="math inline">\(1s\)</span> 内得到答案;</p>
<h2 id="代码-5">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>;</div><div class="line">ull ans, lim = <span class="number">1L</span>L &lt;&lt; <span class="number">50</span>, step;</div><div class="line">ull pre[N], uu[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">got</span><span class="params">(ull n, ull d)</span> </span>&#123;</div><div class="line">    vi w;</div><div class="line">    <span class="keyword">while</span> (n) w.pb(n % <span class="number">10</span>), n /= <span class="number">10</span>;</div><div class="line">    ull ca = <span class="number">0</span>, ans = <span class="number">0</span>; <span class="keyword">int</span> x;</div><div class="line">    FORD(i, sz(w) - <span class="number">1</span>, <span class="number">0</span>) &#123;</div><div class="line">        x = w[i];</div><div class="line">        ans += ca * uu[i] * x;</div><div class="line">        ans += pre[i] * x;</div><div class="line">        <span class="keyword">if</span> (x &gt; d) ans += uu[i];</div><div class="line">        <span class="keyword">if</span> (x == d) ca ++;</div><div class="line">    &#125;</div><div class="line">    ans += ca;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> ull <span class="title">query</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">    ull n = <span class="number">1</span>,  sm = <span class="number">0</span>; ll step = <span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (n &lt; lim) &#123;</div><div class="line">        ull tmp = got(n, d);</div><div class="line">        <span class="keyword">if</span> (tmp - n == <span class="number">0</span>) sm += n;<span class="comment">// cout &lt;&lt; d &lt;&lt; ": " &lt;&lt; n &lt;&lt; endl;</span></div><div class="line">        <span class="keyword">if</span> (tmp &gt; n) step = (tmp - n) / <span class="number">10</span>;</div><div class="line">        <span class="keyword">else</span> step = (n - tmp) / <span class="number">10</span>;</div><div class="line">        <span class="keyword">if</span> (!step) step = <span class="number">1</span>;</div><div class="line">        n += step;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (d == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; sm &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> sm;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ull tot = <span class="number">0</span>,  tmp = <span class="number">1</span> ;</div><div class="line">    uu[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    FORU(i, <span class="number">1</span>, <span class="number">16</span>) &#123;</div><div class="line">        tmp = tmp * <span class="number">10</span>;</div><div class="line">        pre[i] = tmp * i / <span class="number">10</span> ;</div><div class="line">        uu[i] = tmp;</div><div class="line">    &#125;</div><div class="line">    FORU(i, <span class="number">1</span>, <span class="number">9</span>) ans += query(i);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="pe-157solving-the-diophantine-equation"><a href="https://projecteuler.net/problem=157" target="_blank" rel="external">【PE 157】Solving the diophantine equation</a></h1>
<h2 id="题目大意-9">题目大意</h2>
<p>如果 <span class="math inline">\(\frac{1}{a} + \frac{1}{b} = \frac{p}{10^n}\)</span> , 其中 <span class="math inline">\(a, b, p \in \mathbb{Z}, n \in [1, 9]\)</span> , 那么 <span class="math inline">\((a, b, p, n)\)</span> 向答案贡献 <span class="math inline">\(1\)</span> , 求答案。</p>
<h2 id="解题报告">解题报告</h2>
<p>对题目中的条件进行翻译: <span class="math display">\[\frac{1}{a} + \frac{1}{b} = \frac{p}{10^n} \Leftrightarrow ab|10^n(a+b)\]</span> 如果 <span class="math inline">\((a, b) = 1\)</span> , 那么 <span class="math inline">\(ab|10^n\)</span> ;<br>
如果 <span class="math inline">\((a, b) = k\)</span> , 那么 <span class="math inline">\(kab|10^n\)</span> ;<br>
所以, 可以枚举 <span class="math inline">\((a, b) = 1\)</span> , 使得 <span class="math inline">\(ab|10^n\)</span> , 贡献是 <span class="math inline">\(\frac{10^n(a+b)}{ab}\)</span> 的约数;</p>
<p>可以发现, 能乘除 <span class="math inline">\(10^n\)</span> 的 <span class="math inline">\(a, b((a, b) = 1)\)</span> 导致两种情况: ①<span class="math inline">\(a = 1, b|10^n\)</span> ② <span class="math inline">\(a=2^l, b=5^k, ab|10^n\)</span> , 第二种情况最多 <span class="math inline">\(log_210^n\)</span> 种, 第一种情况大约 <span class="math inline">\(ln10^n\)</span> 种, 所以可以枚举;</p>
<h2 id="代码-6">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">int</span> lim = <span class="number">1e9</span>, ans;</div><div class="line">vi xy, x, y;</div><div class="line">vi w[<span class="number">1000000</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    ll _n = <span class="number">1L</span>L * n * (x[i] + y[i]) / xy[i];</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (ll j = <span class="number">2</span>; j * j &lt;= _n; ++j)</div><div class="line">        <span class="keyword">if</span> (_n % j == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">            <span class="keyword">while</span> (_n % j == <span class="number">0</span>) ++k, _n/=j;</div><div class="line">            tmp = tmp * (k + <span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">if</span> (_n &gt; <span class="number">1</span>) tmp = tmp * <span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span> (x[i] != <span class="number">1</span> &amp;&amp; y[i] != <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">int</span> _tmp = <span class="number">1</span>;</div><div class="line">        _n = <span class="number">1L</span>L * n * (<span class="number">1</span> + x[i]*y[i]) / xy[i];</div><div class="line">        <span class="keyword">for</span> (ll j = <span class="number">2</span>; j * j &lt;= _n; ++j)</div><div class="line">            <span class="keyword">if</span> (_n % j == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">                <span class="keyword">while</span> (_n % j == <span class="number">0</span>) ++k, _n/=j;</div><div class="line">                _tmp = _tmp * (k + <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        <span class="keyword">if</span> (_n &gt; <span class="number">1</span>) _tmp = _tmp * <span class="number">2</span>;</div><div class="line">        tmp += _tmp;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (xy[i] &lt; <span class="number">1000000</span>) w[xy[i]].pb(tmp);</div><div class="line">    <span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; lim; i *= <span class="number">2</span>)</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; lim; j *= <span class="number">5</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="number">1L</span>L * i * j &gt; lim) <span class="keyword">break</span>;</div><div class="line">            xy.pb(i * j), x.pb(i),  y.pb(j);</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &lt;= lim; i *= <span class="number">10</span>) &#123;</div><div class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sz(xy); ++j)</div><div class="line">            <span class="keyword">if</span> (i % xy[j] == <span class="number">0</span>)</div><div class="line">                tmp += query(i, j);</div><div class="line">        ans += tmp;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="pe-160factorial-trailing-digits"><a href="https://projecteuler.net/problem=160" target="_blank" rel="external">【PE 160】Factorial trailing digits</a></h1>
<h2 id="题目大意-10">题目大意</h2>
<p><span class="math inline">\(10^{12}!\)</span> 去零的后五位; ## 解题报告 1. 首先确定 <span class="math inline">\(10^{12}!\)</span> 次方有几个 <span class="math inline">\(0\)</span> , 其实就是 <span class="math inline">\(10^{12}!\)</span> 中 <span class="math inline">\(10\)</span> 的幂指数 <span class="math inline">\(k_{10}\)</span> , 而 <span class="math inline">\(k_{10} = min(k_{2}, k_{5}) , k_{2} &gt; k_{5}\)</span> , 所以 <span class="math inline">\(k_{10} = k_{5}\)</span> ;<br>
计算 <span class="math inline">\(k_{5}\)</span> ? 令 <span class="math inline">\(n = 10^{12}\)</span> , <span class="math inline">\(5\)</span> 的倍数会分别贡献一个 <span class="math inline">\(5\)</span> , <span class="math inline">\(25\)</span> 的倍数会额外贡献一个 <span class="math inline">\(5\)</span> …<br>
所以 <span class="math inline">\(\displaystyle k_{5} = \sum_{i} \frac{n}{5^i}\)</span><br>
记 <span class="math inline">\(k = k_5\)</span> ; 2. 确定 <span class="math inline">\(\frac{n!}{10^k}(mod \ 10^5)\)</span><br>
这个比较有难度, 因为 <span class="math inline">\(n!\)</span> 中, 有 <span class="math inline">\(5\)</span> , <span class="math inline">\(2\)</span> , 无法直接取模, 但是因为 <span class="math inline">\(n\)</span> 足够的大,所以可以得到, <span class="math inline">\(k_2 - k_5 &gt; 5\)</span> , 也就是 <span class="math inline">\(\frac{n!}{10^k}(mod \ 2^5) = 0\)</span> ,所以如果能求出 <span class="math inline">\(\frac{n!}{10^k}(mod \ 5^5)\)</span> , 使用CRT就可以得到答案(因为 <span class="math inline">\((2^5, 5^5) = 1\)</span> );<br>
将 <span class="math inline">\(n!(mod \ 5^5)\)</span> 中的 <span class="math inline">\(5\)</span> 进行递归提取, 则 <span class="math inline">\(n_i! = 5^{k_5(n_i)} A(n_i) n_{i+1}!\)</span> , 其中 <span class="math inline">\(n_{i+1} = \lfloor \frac{n_i}{5} \rfloor\)</span> . 展开递归式, <span class="math inline">\(n! = 5^{k}A(n!)A(n!/5)A(n!/25)...A(1)\)</span> , 其中 <span class="math inline">\(A(n)\)</span> 表示 <span class="math inline">\([1, n]\)</span> 中与 <span class="math inline">\(5\)</span> 互质的数的乘积, 也就是 <span class="math inline">\(A(n) = \prod_{i=1}^{n} [gcd(i, 5)=1]i\)</span> ;<br>
这个 <span class="math inline">\(A(n)\)</span> 显然存在循环节, 且 <span class="math inline">\(5^5\)</span> 是一个已知的循环节 , 那么可以预处理 <span class="math inline">\(A(1-5^5)\)</span> ;<br>
<span class="math display">\[\frac{5!}{10^k}(mod \ 5^5) = \frac{5^{k}A(n!)A(n!/5)A(n!/25)...A(1)}{5^k2^k}(mod \ 5^5) = 2^{-k}A(n!)A(n!/5)A(n!/25)...A(1)(mod \ 5^5)\]</span> 3. 使用中国剩余定理 .</p>
<p>过程中的逆元需要用拓展欧几里得求. ## 代码</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3126</span>;</div><div class="line"><span class="keyword">int</span> A[N], pre[N] ;</div><div class="line">ll n = <span class="number">1000000000000L</span>L, d;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">quick</span><span class="params">(ll x, ll k)</span> </span>&#123;</div><div class="line">     ll ans = <span class="number">1</span>;</div><div class="line">     <span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">         <span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = ans * x % <span class="number">3125</span>;</div><div class="line">         x = x * x % <span class="number">3125</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">exd_ou</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!b) x = <span class="number">1</span>, y = <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        exd_ou(b, a % b, y , x);</div><div class="line">        y -= (a/b) * x;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">inline</span> ll _A(ll n) &#123;</div><div class="line">    <span class="keyword">return</span> ((<span class="keyword">int</span>)<span class="built_in">pow</span>(<span class="number">-1</span>, n/<span class="number">3125</span>) * A[n % <span class="number">3125</span>] + <span class="number">3125</span>) % <span class="number">3125</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ll fiv = <span class="number">5</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (; fiv &lt;= n; fiv *= <span class="number">5</span>)</div><div class="line">        d += n / fiv;</div><div class="line">    A[<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i)</div><div class="line">        <span class="keyword">if</span> (i % <span class="number">5</span>) A[i] = A[i<span class="number">-1</span>] * i % <span class="number">3125</span>;</div><div class="line">        <span class="keyword">else</span> A[i] = A[i<span class="number">-1</span>];</div><div class="line">    ll two, rev, tmp ;</div><div class="line">    two = quick(<span class="number">2L</span>L,  d);</div><div class="line">    exd_ou(two, <span class="number">3125</span>, rev, tmp);</div><div class="line">    <span class="keyword">if</span> (rev &lt; <span class="number">0</span>) rev += <span class="number">3125</span>;</div><div class="line">    fiv = <span class="number">1</span>; ll _a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (; fiv &lt;= n; fiv *= <span class="number">5</span>)</div><div class="line">        _a = _a * _A(n / fiv) % <span class="number">3125</span>;</div><div class="line">    _a = rev * _a % <span class="number">3125</span>;</div><div class="line">    two = quick(<span class="number">2</span>, <span class="number">5</span>);</div><div class="line">    exd_ou(two, <span class="number">3125</span>, rev, tmp);</div><div class="line">    ll ans = _a * two * rev;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans % <span class="number">100000</span>&lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 题目集锦 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 筛法 </tag>
            
            <tag> 数论 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[codeforces-选做]]></title>
      <url>/cf/</url>
      <content type="html"><![CDATA[<blockquote>
<p>选做一些codeforces 上的<del>无脑码农题</del>。</p>
</blockquote>
<a id="more"></a>
<h1 id="cf-739calyona-and-towers">【CF 739C】Alyona and towers</h1>
<h2 id="题目链接"><a href="http://codeforces.com/contest/739/problem/C" target="_blank" rel="external">题目链接</a></h2>
<h2 id="题目大意">题目大意</h2>
<p>两个操作： 1. 区间加法； 2. 查询最长上凸单峰子串长；</p>
<h2 id="解题报告">解题报告</h2>
<p><span class="math display">\[a_l &lt; a_{l + 1} &lt; a_{l + 2} &lt; ... &lt; a_k &gt; a_{k + 1} &gt; a_{k + 2} &gt; ... &gt; a_r\]</span></p>
<p>差分之后， 这个式子等价于一串连续的正数拼一串连续的负数；</p>
<p>可以直接用<strong>线段树</strong>维护三个信息： 左侧开始最长合法串， 右侧开始最长合法串， 不限制位置的最长合法串；</p>
<p>合并的时候讨论节点处两点的正负；</p>
<p>区间加，差分后变成单点加；</p>
<h2 id="代码">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> foru(i, s, t) for (i = (int)s; i &lt;= (int) t; ++i)   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ford(i, s, t) for (i = (int)s; i ^ (int) t; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> check cout &lt;&lt; 1 &lt;&lt; endl</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> dou (<span class="meta-string">", "</span>) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mao (<span class="meta-string">": "</span>)</span></div><div class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">310000</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>; </div><div class="line"><span class="keyword">int</span> lan[N &lt;&lt; <span class="number">2</span>], ran[N &lt;&lt; <span class="number">2</span>], ans[N &lt;&lt; <span class="number">2</span>], n, m; ll a[N];</div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(T &amp;x )</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> ch = getchar(); <span class="keyword">int</span> f= <span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar())    </div><div class="line">        <span class="keyword">if</span> ( ch == <span class="string">'-'</span>) f =  <span class="number">-1</span>; </div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; ch &gt;= <span class="string">'0'</span>  &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar()) </div><div class="line">        x = x * <span class="number">10</span> + ch - <span class="number">48</span>; </div><div class="line">    x *= f; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> x, ll va)</span> </span>&#123;</div><div class="line">    lan[x] = ran[x] = ans[x] = (va != <span class="number">0</span>); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; </div><div class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>; </div><div class="line">    ans[x] = max(ans[x &lt;&lt; <span class="number">1</span>], ans[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]); </div><div class="line">    lan[x] = lan[x &lt;&lt; <span class="number">1</span>] , ran[x] = ran[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]; </div><div class="line">    <span class="keyword">if</span> (!(a[mid] &lt; <span class="number">0</span> &amp;&amp; a[mid + <span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; a[mid] &amp;&amp; a[mid + <span class="number">1</span>])  &#123;</div><div class="line">        ans[x] = max(ans[x], ran[x &lt;&lt; <span class="number">1</span>] + lan[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);     </div><div class="line">        <span class="keyword">if</span> (lan[x] == (mid - l + <span class="number">1</span>) )  lan[x] += lan[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]; </div><div class="line">        <span class="keyword">if</span> (ran[x] == (r - mid)) ran[x] += ran[x &lt;&lt; <span class="number">1</span>]; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span>; </div><div class="line">    <span class="keyword">if</span> (l == r) newnode(x, a[l]); </div><div class="line">    <span class="keyword">else</span> &#123; </div><div class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">        build(x &lt;&lt; <span class="number">1</span>, l, mid); </div><div class="line">        build(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r) ; </div><div class="line">        push_up(x, l, r); </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> go, <span class="keyword">int</span> delta)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (l &gt; r) <span class="keyword">return</span>; </div><div class="line">    <span class="keyword">if</span> (l == r) a[l] += delta, newnode(x, a[l]); </div><div class="line">    <span class="keyword">else</span> &#123; </div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; </div><div class="line">        <span class="keyword">if</span> (go &lt;= mid) add(x &lt;&lt; <span class="number">1</span>, l, mid, go, delta); </div><div class="line">        <span class="keyword">if</span> (go &gt; mid)  add(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, go, delta); </div><div class="line">        push_up(x, l, r); </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    in(n); <span class="keyword">int</span> i, j, x, y, d; </div><div class="line">    foru(i, <span class="number">1</span>, n) in(a[i]);    </div><div class="line">    foru(i, <span class="number">1</span>, n) a[i] = a[i+<span class="number">1</span>] - a[i]; </div><div class="line">    --n, build(<span class="number">1</span>, <span class="number">1</span>, n), in(m);</div><div class="line">    foru(i, <span class="number">1</span>, m) &#123; </div><div class="line">        in(x), in(y), in(d); </div><div class="line">        <span class="keyword">if</span> (x &gt; <span class="number">1</span>) add(<span class="number">1</span>, <span class="number">1</span>, n, x<span class="number">-1</span>, d);</div><div class="line">        <span class="keyword">if</span> (y &lt;= n) add(<span class="number">1</span>, <span class="number">1</span>, n, y, -d);   </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[<span class="number">1</span>] + <span class="number">1</span>); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cf-739egosha-is-hunting">【CF 739E】Gosha is hunting</h1>
<h2 id="题目链接-1"><a href="http://codeforces.com/contest/739/problem/E" target="_blank" rel="external">题目链接</a></h2>
<h2 id="题目大意-1">题目大意</h2>
<p><span class="math inline">\(n\)</span>个小精灵，<span class="math inline">\(a\)</span>个宝贝球，<span class="math inline">\(b\)</span>的大师球，每个小精灵可以用宝贝球或大师球或两个球捕捉，成功概率为<span class="math inline">\(p_i\)</span>,<span class="math inline">\(u_i\)</span>,<span class="math inline">\(p_i + u_i - p_i * u_i\)</span> 求期望最大捕捉数; （摘自<a href="http://kzoacn.xyz/index.php/archives/238" target="_blank" rel="external">zky学长的blog</a>)</p>
<h2 id="解题报告-1">解题报告</h2>
<p>首先可以写一个<span class="math inline">\(O(n^3)\)</span>的DP, 令<span class="math inline">\(f[n][a][b]\)</span>表示前<span class="math inline">\(n\)</span>个小精灵，用了<span class="math inline">\(a\)</span>个宝贝球，<span class="math inline">\(b\)</span>个大师球， 期望最大的捕捉数， 容易得到： <span class="math display">\[f[n][a][b]=max \{ f[n-1][a-1][b]+p_n, f[n-1][a][b-1]+u_n,f[n-1][a-1][b-1]+p_n+u_n-p_n*u_n \}\]</span></p>
<p>这个DP是可以AC的。。。</p>
<p>从zky学长那里学了一个很优秀的做法，和去年IOI的最后一题做法相似：</p>
<p>对于一个可以求最值的凸函数<span class="math inline">\(f(x)\)</span>, 构造<span class="math inline">\(F(x)=f(x)-kx\)</span>, 那么<span class="math inline">\(F(x)\)</span>为凸函数且可 求最值， 通过二分<span class="math inline">\(k\)</span>使得<span class="math inline">\(F(x)\)</span>的最值点左右平移， 当最值点位于<span class="math inline">\(x\)</span>， 可以得到<span class="math inline">\(f(x)=F(x)+kx\)</span>, 从而实现求<span class="math inline">\(f(x)\)</span>每个自变量对应的函数值。</p>
<p>对于这个题， 因为某些不可说的原因，<span class="math inline">\(f[i][j](k)\)</span>是一个凸函数， 利用上述方法可以通过<span class="math inline">\(O(\log^{-1}eps \times n^2)\)</span>得到答案。</p>
<h2 id="代码-1">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> foru(i, s, t) for (i = (int)s; i &lt;= (int) t; ++i)   </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ford(i, s, t) for (i = (int)s; i ^ (int) t; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></div><div class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>; </div><div class="line"><span class="keyword">const</span> ff eps = <span class="number">1e-9</span>;</div><div class="line"><span class="keyword">int</span> n, a, b; </div><div class="line">ff p[N], u[N], mix[N], f[N][N], cnt[N][N]; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;a, &amp;b); <span class="keyword">int</span> i, j; </div><div class="line">    foru(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;p[i]); </div><div class="line">    foru(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;u[i]), </div><div class="line">    mix[i] = p[i] + u[i] - p[i] * u[i]; </div><div class="line">    ff l = <span class="number">-1e3</span>, r = <span class="number">1e3</span>, k; </div><div class="line">    <span class="keyword">while</span> (l + eps &lt; r) &#123;</div><div class="line">        k = (l + r) * <span class="number">0.5</span>; </div><div class="line">        foru(i, <span class="number">0</span>, n) foru(j, <span class="number">0</span>, i) </div><div class="line">            f[i][j] = <span class="number">-1e10</span>, cnt[i][j] = <span class="number">0</span>;     </div><div class="line">        f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>; </div><div class="line">        foru(i, <span class="number">1</span>, n) foru(j, <span class="number">0</span>, i) &#123;</div><div class="line">            <span class="keyword">if</span> (j &lt; i &amp;&amp; f[i<span class="number">-1</span>][j] &gt; f[i][j]) f[i][j] = f[i<span class="number">-1</span>][j], cnt[i][j] = cnt[i<span class="number">-1</span>][j]; </div><div class="line">            <span class="keyword">if</span> (j &amp;&amp; f[i<span class="number">-1</span>][j<span class="number">-1</span>] + p[i] &gt; f[i][j]) f[i][j] = f[i<span class="number">-1</span>][j<span class="number">-1</span>] + p[i], cnt[i][j] = cnt[i<span class="number">-1</span>][j<span class="number">-1</span>]; </div><div class="line">            <span class="keyword">if</span> (j &lt; i &amp;&amp; f[i<span class="number">-1</span>][j] + u[i] + k&gt; f[i][j]) f[i][j] = f[i<span class="number">-1</span>][j] + u[i] + k, cnt[i][j] = cnt[i<span class="number">-1</span>][j] + <span class="number">1</span>; </div><div class="line">            <span class="keyword">if</span> (j &amp;&amp; f[i<span class="number">-1</span>][j<span class="number">-1</span>] + mix[i] + k&gt; f[i][j]) f[i][j] = f[i<span class="number">-1</span>][j<span class="number">-1</span>] + mix[i] + k, cnt[i][j] = cnt[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>; </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (cnt[n][a] &lt; b) l = k; <span class="keyword">else</span> r = k; </div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, f[n][a] - (l + r) * <span class="number">0.5</span> * b); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cf-736dpermutations">【CF 736D】Permutations</h1>
<h2 id="题目链接-2"><a href="http://codeforces.com/contest/736/problem/D" target="_blank" rel="external">题目链接</a></h2>
<h2 id="题目大意-2">题目大意</h2>
<p>要得到一个长度为<span class="math inline">\(n\)</span>的排列，给出<span class="math inline">\(m\)</span>个信息<span class="math inline">\((x,y)\)</span>，表示<span class="math inline">\(x\)</span>可以放置在<span class="math inline">\(y\)</span>这个位置，保证使用这<span class="math inline">\(m\)</span>个信息，方案数为奇数， 要得到对每个信息而言，如果不使用，方案数是奇数还是偶数； ## 解题报告</p>
<div class="figure">
<img src="/cf/1.jpg" alt="评论">
<p class="caption">评论</p>
</div>
<p>首先求二分图的完美匹配数， 实际上是联通矩阵的积和式的值， 在<span class="math inline">\(\pmod 2\)</span>的意义下， 与行列式等价。</p>
<p>所以问题等价于求一个行列式去掉<span class="math inline">\((i,j)\)</span>处的<span class="math inline">\(1\)</span>，剩下的行列式的值。</p>
<p>考虑将行列式沿第<span class="math inline">\(i\)</span>行展开，那么删掉<span class="math inline">\(1\)</span>造成的影响就是<span class="math inline">\(j\)</span>位置的代数余子式的值， 而又有伴随矩阵<span class="math inline">\(adj(A)=C^{T}(A)\)</span>, 其中<span class="math inline">\(C(A)\)</span>代数余子矩阵， 且<span class="math inline">\(adj(A)\)</span>可以通过<span class="math inline">\(adj(A)=A^{-1}*det(A)\)</span>快速求解， 所以利用bitset压位， 预处理复杂度是<span class="math inline">\(O(n^2\log n)\)</span>的。</p>
<h2 id="代码-2">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i, a, b) for (int i = (a), _b = (b); i &lt;= b; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = (a), _b = (b); i &gt;= b; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, _b = (b); i &lt; b; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(x) ((int)(x).size())</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vii; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2010</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, l[N * N], r[N * N]; </div><div class="line"><span class="built_in">bitset</span>&lt;N &lt;&lt; 1&gt; a[N]; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m; <span class="keyword">int</span> x, y; </div><div class="line">	FOR(i, <span class="number">1</span>, m) &#123;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y; </div><div class="line">		a[x].<span class="built_in">set</span>(y), l[i] = x, r[i] = y; </div><div class="line">	&#125;</div><div class="line">	FOR(i, <span class="number">1</span>, n) a[i].<span class="built_in">set</span>(i + n); </div><div class="line">	FOR(i, <span class="number">1</span>, n) &#123; </div><div class="line">		<span class="keyword">int</span> j = i; </div><div class="line">		<span class="keyword">while</span> (!a[j].test(i)) ++j; </div><div class="line">		swap(a[i], a[j]); </div><div class="line">		FOR(k, <span class="number">1</span>, n) <span class="keyword">if</span> ( k != i &amp;&amp; a[k].test(i)) </div><div class="line">			a[k] ^= a[i]; </div><div class="line">	&#125;</div><div class="line">	FOR(i, <span class="number">1</span>, m)</div><div class="line">		<span class="built_in">puts</span>(a[ r[i] ].test(n + l[i]) ? <span class="string">"NO"</span> : <span class="string">"YES"</span>); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cf-741carpas-overnight-party-and-mehrdads-silent-entering">【CF 741C】Arpa’s overnight party and Mehrdad’s silent entering</h1>
<h2 id="题目链接-3"><a href="http://codeforces.com/contest/741/problem/C" target="_blank" rel="external">题目链接</a></h2>
<h2 id="题目大意-3">题目大意</h2>
<p>每相邻的三个位置不能拥有相同类型的食物, 情侣不能拥有相同类型的食物;</p>
<p>构造一个合法的食物分配方法或者输出无解; ## 解题报告 显然, 如果没有相邻三个的限制, 这个题一定有解;</p>
<p>如果让第<span class="math inline">\(k* 2\)</span>和第<span class="math inline">\(k* 2+1\)</span>个类型不同, 那么相邻的三个就一定不全相同, 根据二分图染色的性质, 结合图的特殊性, 可以得到, 这个图不存在奇环, 所以一定可以构造出二分图;</p>
<p>那么就可以直接二分图染色;</p>
<h2 id="代码-3">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200100</span>;</div><div class="line"></div><div class="line">vi nxt[N];</div><div class="line"><span class="built_in">vector</span>&lt; pii &gt; par;</div><div class="line"><span class="keyword">int</span> n, ans[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a)</span> </span>&#123;</div><div class="line">	ans[x] = a;</div><div class="line">	FORU(i, <span class="number">0</span>, sz(nxt[x])<span class="number">-1</span>)</div><div class="line">		<span class="keyword">if</span> (ans[nxt[x][i]] == <span class="number">-1</span>)</div><div class="line">			dfs(nxt[x][i], a ^ <span class="number">1</span>) ;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"> 	ios :: sync_with_stdio(<span class="literal">false</span>);</div><div class="line">	<span class="keyword">int</span> x, y;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">	FORU(i, <span class="number">1</span>, n) &#123;</div><div class="line"> 		<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</div><div class="line">		nxt[x].pb(y), nxt[y].pb(x);</div><div class="line">		par.pb( mp(x, y) );</div><div class="line">	&#125;</div><div class="line">	FORU(i, <span class="number">1</span>, n) &#123;</div><div class="line">		nxt[i * <span class="number">2</span> - <span class="number">1</span>].pb(i * <span class="number">2</span>);</div><div class="line">		nxt[i * <span class="number">2</span>].pb(i * <span class="number">2</span> - <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	mmst(ans, <span class="number">-1</span>);</div><div class="line">	FORU(i, <span class="number">1</span>, n*<span class="number">2</span>)</div><div class="line">		<span class="keyword">if</span> (ans[i] == <span class="number">-1</span>)</div><div class="line">			dfs(i, <span class="number">0</span>);</div><div class="line">	FORU(i, <span class="number">0</span>, sz(par) - <span class="number">1</span>)</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; ans[par[i].fi] + <span class="number">1</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; ans[par[i].se] + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cf-741darpas-letter-marked-tree-and-mehrdads-dokhtar-kosh-paths">【CF 741D】Arpa’s letter-marked tree and Mehrdad’s Dokhtar-kosh paths</h1>
<h2 id="题目大意-4">题目大意</h2>
<p>一棵树, 每个节点有一个字符, 求出每个点的子树中, 最长的可以通过改变顺序构成回文串的链; ## 解题报告 翻译一下, 将每个字符当做一个二进制位上的一, 对链的要求实际上等价于异或和为0(长度为偶的回文串), 或者异或和的某个数位为1(长度为奇的回文串);<br> 一个链 <span class="math inline">\((u,v)\)</span> , 异或和为<span class="math inline">\(v[u] \ xor \ v[v] \ xor \ a[lca]\)</span>, 其中<span class="math inline">\(v[x]\)</span> 表示节点<span class="math inline">\(x\)</span>到根节点的异或和, <span class="math inline">\(a[x]\)</span> 表示 <span class="math inline">\(x\)</span> 节点自己的二进制数值;<br> 所以可以用一个数组将每个二进制数所表示的 <span class="math inline">\(v[x]\)</span> 对应的深度最大的 <span class="math inline">\(x\)</span> 的深度记录下来, 在 <span class="math inline">\(lca\)</span> 处通过枚举为一的数位, 用 <span class="math inline">\(O(logn)\)</span> 查询答案;<br> 关键是, 怎么用数组记录子树中的信息?<br> 显然需要使用树上的启发式合并, 具体一点, 就是“dsu on the tree”, 简单一点, 就是树链剖分;<br> 这个可以看 <a href="http://blog.csdn.net/qaq__qaq/article/details/53455462" target="_blank" rel="external">yveh的一个学习笔记</a><br> 代码很好写, 可以算是裸题;<br></p>
<h2 id="代码-4">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500010</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, toTwo[<span class="number">200</span>], sons[N], in[N], out[N], id[N];</div><div class="line"><span class="keyword">int</span> heav[N], bag[<span class="number">1</span> &lt;&lt; <span class="number">23</span>], cnt = <span class="number">0</span>, pref[N], dep[N], ans[N];</div><div class="line">vi to[N], alpha[N], tmp;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> &amp;ans, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (x &gt; ans ) ans = x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	sons[x] = <span class="number">1</span>, id[++cnt] = x, in[x] = cnt, heav[x]= <span class="number">0</span>;  </div><div class="line">	FORU(i, <span class="number">0</span>, sz(to[x]) - <span class="number">1</span>) &#123;</div><div class="line">		pref[to[x][i]] = pref[x] ^ alpha[x][i];</div><div class="line">		dep[to[x][i]] = dep[x] + <span class="number">1</span>, dfs(to[x][i]);</div><div class="line">		<span class="keyword">if</span> (sons[ to[x][i] ] &gt; sons[ heav[x] ])</div><div class="line">			heav[x] = to[x][i];</div><div class="line">		sons[x] += sons[ to[x][i] ];</div><div class="line">	&#125;</div><div class="line">	out[x] = cnt;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">got_ans</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line"><span class="comment">// type: 1-clear, 0-not</span></div><div class="line"><span class="comment">//  tmp: a stack recording vertices in the heavy subtrees;</span></div><div class="line">	ans[x] = <span class="number">0</span>;</div><div class="line">	FORU(i, <span class="number">0</span>, sz(to[x]) - <span class="number">1</span>) 	</div><div class="line">		<span class="keyword">if</span> (to[x][i] != heav[x])</div><div class="line">			got_ans(to[x][i], <span class="number">1</span>), up(ans[x], ans[to[x][i]]);</div><div class="line">	<span class="keyword">if</span> (heav[x]) 	</div><div class="line">		got_ans(heav[x], <span class="number">0</span>), up(ans[x], ans[ heav[x] ]);</div><div class="line"><span class="comment">//  information of subtrees updates ans of x;</span></div><div class="line">	<span class="keyword">int</span> y, z;</div><div class="line">	FORU(i, <span class="number">0</span>, sz(to[x]) - <span class="number">1</span>)</div><div class="line">		<span class="keyword">if</span> (to[x][i] != heav[x]) &#123;</div><div class="line">			y = to[x][i]; vi _tmp;</div><div class="line">			FORU(j, in[y], out[y]) &#123;</div><div class="line">				z = id[ j ], tmp.pb(z), _tmp.pb(z);</div><div class="line">				<span class="keyword">if</span> (bag[ pref[z] ] != <span class="number">-1</span>)</div><div class="line">					up(ans[x], bag[ pref[z] ] + dep[z] - dep[x] * <span class="number">2</span>);</div><div class="line">				FORU(k, <span class="string">'a'</span>, <span class="string">'v'</span>)</div><div class="line">					<span class="keyword">if</span> (bag[ pref[z] ^ toTwo[k] ] != <span class="number">-1</span>)</div><div class="line">						up(ans[x], bag[ pref[z] ^ toTwo[k] ] + dep[z] - dep[x] * <span class="number">2</span>); 				</div><div class="line"><span class="comment">//  update ans by forming a line with two</span></div><div class="line">			&#125;</div><div class="line">			FORU(j, <span class="number">0</span>, sz(_tmp) - <span class="number">1</span>) &#123;</div><div class="line">				z = _tmp[j];</div><div class="line">				<span class="keyword">if</span> (dep[z] &gt; bag[ pref[z] ])</div><div class="line">					bag[pref[z]] = dep[z];</div><div class="line"><span class="comment">//  update BAGS</span></div><div class="line">			&#125;				</div><div class="line">		&#125;</div><div class="line">	<span class="keyword">if</span> (bag[ pref[x] ] != <span class="number">-1</span>)</div><div class="line">		up(ans[x], bag[pref[x]] - dep[x]);</div><div class="line">	FORU(k, <span class="string">'a'</span>, <span class="string">'v'</span>)</div><div class="line">		<span class="keyword">if</span> (bag[ pref[x] ^ toTwo[k] ] != <span class="number">-1</span>)</div><div class="line">			up(ans[x], bag[ pref[x] ^ toTwo[k] ] - dep[x]);</div><div class="line">	<span class="keyword">if</span> (dep[x] &gt; bag[ pref[x] ]) bag[pref[x]] = dep[x];</div><div class="line">	tmp.pb(x);</div><div class="line"><span class="comment">// use x to update</span></div><div class="line">	<span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</div><div class="line"> 		FORU(i, <span class="number">0</span>, sz(tmp) - <span class="number">1</span>) &#123;</div><div class="line">			y = tmp[i];</div><div class="line">			<span class="keyword">if</span> (bag[ pref[y] ] != <span class="number">-1</span>)</div><div class="line">				bag[ pref[y] ] = <span class="number">-1</span>;</div><div class="line">		&#125;</div><div class="line">		tmp.clear();</div><div class="line"><span class="comment">// meet the light path and clear</span></div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	ios :: sync_with_stdio(<span class="literal">false</span>);</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n; <span class="keyword">int</span> pa; <span class="built_in">string</span> c;</div><div class="line">	FORU(i, <span class="string">'a'</span>, <span class="string">'v'</span>)</div><div class="line">		toTwo[i] = <span class="number">1</span> &lt;&lt; i - <span class="string">'a'</span>;</div><div class="line">	FORU(i, <span class="number">2</span>, n) &#123;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; pa &gt;&gt; c, to[pa].pb(i);</div><div class="line">		alpha[pa].pb(toTwo[c[<span class="number">0</span>]]);</div><div class="line">	&#125;</div><div class="line">	mmst(bag, <span class="number">-1</span>), dfs(<span class="number">1</span>), got_ans(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">	FORU(i, <span class="number">1</span>, n)</div><div class="line">		<span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; ((i == n)? <span class="string">'\n'</span> : <span class="string">' '</span>)&lt;&lt; <span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cf-750enew-year-and-old-subsequence">【CF 750E】New Year and Old Subsequence</h1>
<h2 id="题目链接-4"><a href="%22http://codeforces.com/contest/750/problem/E%22">题目链接</a></h2>
<h2 id="题目大意-5">题目大意</h2>
<p>给出一个字符串, 询问一个区间<span class="math inline">\([l, r]\)</span>中, 使子序列不存在“2016”但存在“2017”, 最少需要删除几个字符; ## 解题报告 这竟然是一道E题, 而且现场只有100个人A; <br> 一个非常有效的性质, 考虑不存在区间查询这种事情, 就求一个给出的字符串, 需要删除几个字符;<br> 那这个是一个很简单的动态规划, 令 <span class="math inline">\(f[i][j]\)</span> 表示到第 <span class="math inline">\(i\)</span> 个字符, 匹配到第 <span class="math inline">\(j\)</span> 个字符, 最少删几个, 转移显然;<br> 发现, 某个位置的字符决定这个位置对转移的影响, 也就是经过一个位置, 存在固定不变的转移;<br> 用一个<span class="math inline">\(5 * 5\)</span>的矩阵可以表示每个位置的转移, 然后查询的时候, 只需要做区间矩阵乘法, 用线段树可以解决; <br> 实际上, 题目中的矩阵可以理解为维护任意两点间的最短路, 即<span class="math inline">\(f[i][j]\)</span>表示匹配<span class="math inline">\(i\)</span>个字符到匹配<span class="math inline">\(j\)</span>个字符, 最少需要删几个字符; <br> 用了刚学习的zkw线段树, 可能哪里写得不好, 跑得竟然很慢, 但确实很短;<br> ## 代码</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200100</span>; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">minify</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> b)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (b &lt; a) a = b; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mat</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">5</span>]; </div><div class="line">    mat() &#123;mmst(a, <span class="number">127</span>/<span class="number">3</span>);&#125; </div><div class="line">    mat <span class="keyword">operator</span> *(mat b) &#123; </div><div class="line">        mat ans; </div><div class="line">        REP(i, <span class="number">5</span>) REP(j, <span class="number">5</span>) REP(k, <span class="number">5</span>) </div><div class="line">            minify(ans.a[i][k], a[i][j] + b.a[j][k]); </div><div class="line">        <span class="keyword">return</span> ans; </div><div class="line">    &#125; </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">char</span> x)</span> </span>&#123; </div><div class="line">        REP(i, <span class="number">5</span>) a[i][i] = <span class="number">0</span>; </div><div class="line">        <span class="keyword">if</span> (x == <span class="string">'6'</span>) a[<span class="number">3</span>][<span class="number">3</span>] = a[<span class="number">4</span>][<span class="number">4</span>] = <span class="number">1</span>; </div><div class="line">        <span class="built_in">string</span> s = <span class="string">"2017"</span>; </div><div class="line">        REP(i, <span class="number">4</span>) <span class="keyword">if</span> (x == s[i])</div><div class="line">            a[i][i + <span class="number">1</span>] = <span class="number">0</span>, a[i][i] = <span class="number">1</span>; </div><div class="line">    &#125;</div><div class="line">&#125; ma[N * <span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> n, q, m; </div><div class="line"><span class="built_in">string</span> s;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; q &gt;&gt; s; </div><div class="line">    <span class="keyword">for</span> (m = <span class="number">1</span>; m &lt;= n; m &lt;&lt;= <span class="number">1</span>); </div><div class="line">    FORU(i, <span class="number">1</span>, n) ma[m + i].init(s[i - <span class="number">1</span>]); </div><div class="line">    FORD(i, m<span class="number">-1</span>, <span class="number">1</span>) ma[i] = ma[i &lt;&lt; <span class="number">1</span>] * ma[i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]; </div><div class="line">    REP(i, q) &#123; </div><div class="line">        <span class="keyword">int</span> a, b; </div><div class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b; </div><div class="line">        a += m, b += m; </div><div class="line">        mat lef = ma[a], rig = ma[b]; </div><div class="line">        <span class="keyword">while</span> (a &lt; b - <span class="number">1</span>) &#123; </div><div class="line">            <span class="keyword">if</span> (!(a &amp; <span class="number">1</span>)) lef = lef * ma[a + <span class="number">1</span>]; </div><div class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>) rig = ma[b - <span class="number">1</span>] * rig; </div><div class="line">            a &gt;&gt;= <span class="number">1</span>, b &gt;&gt;= <span class="number">1</span>; </div><div class="line">        &#125; </div><div class="line">        lef = lef * rig; </div><div class="line">        <span class="keyword">if</span> (lef.a[<span class="number">0</span>][<span class="number">4</span>] &gt; N) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">cout</span> &lt;&lt; lef.a[<span class="number">0</span>][<span class="number">4</span>] &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cf-717fheroes-of-making-magic-iii">【CF 717F】Heroes of Making Magic III</h1>
<h2 id="题目链接-5"><a href="%22http://codeforces.com/contest/717/problem/F%22">题目链接</a></h2>
<h2 id="题目大意-6">题目大意</h2>
<p>主人公可以从 <span class="math inline">\(i\)</span> 走到 <span class="math inline">\(i-1\)</span> 和 <span class="math inline">\(i+1\)</span>, 给出 <span class="math inline">\(s\)</span> , <span class="math inline">\(s_i\)</span> 表示点 <span class="math inline">\(i\)</span> 需要经过的次数, 操作: 1. <code>1 a b k</code> 区间加, <span class="math inline">\(s_i += k,(i \in [a, b])\)</span>; 2. <code>2 a b</code> 区间查询, 主人公从 <span class="math inline">\(a\)</span> 出发, 在 <span class="math inline">\(b\)</span> 停止, 不能出区间, 能否找到符合 <span class="math inline">\(s_i(i \in [a,b])\)</span> 的移动方案;</p>
<h2 id="解题报告-2">解题报告</h2>
<p>稳稳地读错了题。。 NB地理解为随便从哪个点出发到随便哪个点停止, 我英死早!<br> 实际上是很简单的题…<br> 因为需要从一端到另一端, 所以先走一遍, 即<span class="math inline">\(s_i -= 1, (i \in [l, r])\)</span>. <br> 然后可以增加若干回头路, 也就是相邻的两个位置 <span class="math inline">\(s -= 1\)</span> . <br> 如果不在区间上考虑, 把这个判断是否有解的子问题看做一个完整的问题的话, 显然有一个贪心的思路, 就是从前向后, 如果第 <span class="math inline">\(i\)</span> 个位置有剩余 <span class="math inline">\(left_i\)</span> , 则 <span class="math inline">\(left_{i+1} -= left_{i}\)</span> , 中途如果有 <span class="math inline">\(left_i &lt; 0\)</span> 那么无解, 如果$ left_n != 0$ , 也就是没有消完, 那么无解;<br> 向区间上考虑, 需要维护区间<span class="math inline">\(left\)</span>的最小值和右端点的值;<br> 再考虑合并, <span class="math inline">\(a\)</span> 和 <span class="math inline">\(b\)</span> 两个区间的合并, <span class="math inline">\(a\)</span> 的右端点会对 <span class="math inline">\(b\)</span> 的奇数位置偶数位置产生不同的影响, 所以需要把区间的奇数位置, 偶数位置分别记最小值, 并且需要记录区间的大小, 从而更新右端点的值;<br> 解决区间修改的问题, 通过<span class="math inline">\(left\)</span>的计算方式, 区间修改只会影响区间中的偶位置(从0标号), 需要标记和下传; <br></p>
<h2 id="代码-5">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000007</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">800050</span>; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> </div><div class="line">    ll siz, evmn, odmn, r, tag; </div><div class="line">    node() &#123;siz = r = tag = <span class="number">0</span>, evmn = odmn = inf;&#125; </div><div class="line">    node(ll siz, ll ev, ll od, ll r, ll tag)</div><div class="line">        : siz(siz), evmn(ev), odmn(od), r(r), tag(tag)&#123;&#125; </div><div class="line">    <span class="keyword">void</span> <span class="keyword">operator</span> += (ll k) &#123; </div><div class="line">        <span class="keyword">if</span> (siz &amp; <span class="number">1</span>) r += k; </div><div class="line">        tag += k, evmn +=k;</div><div class="line">    &#125; </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; </div><div class="line">        <span class="built_in">cout</span> &lt;&lt; siz &lt;&lt; <span class="string">' '</span> &lt;&lt; evmn &lt;&lt; <span class="string">' '</span> &lt;&lt; odmn &lt;&lt; <span class="string">' '</span> &lt;&lt; r &lt;&lt;  <span class="string">' '</span> &lt;&lt; tag &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">    &#125; </div><div class="line"></div><div class="line">&#125; t[N], ans; </div><div class="line">node <span class="keyword">operator</span> +(node a, node b) &#123; </div><div class="line">    <span class="function">node <span class="title">c</span><span class="params">(a.siz + b.siz, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span>; </div><div class="line">    <span class="keyword">if</span> (a.siz &amp; <span class="number">1</span>) &#123; </div><div class="line">        c.evmn = min(a.evmn, b.odmn + a.r); </div><div class="line">        c.odmn = min(a.odmn, b.evmn - a.r); </div><div class="line">        c.r = b.r + ((b.siz &amp; <span class="number">1</span>)?<span class="number">-1</span>:<span class="number">1</span>) * a.r; </div><div class="line">    &#125; <span class="keyword">else</span> &#123; </div><div class="line">        c.evmn = min(a.evmn, b.evmn - a.r); </div><div class="line">        c.odmn = min(a.odmn, b.odmn + a.r); </div><div class="line">        c.r = b.r + ((b.siz &amp; <span class="number">1</span>)?<span class="number">-1</span>:<span class="number">1</span>) * a.r; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> c; </div><div class="line">&#125; </div><div class="line"><span class="keyword">int</span> n, q; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">    t[x] = t[x &lt;&lt; <span class="number">1</span>] + t[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (t[x].tag) &#123; </div><div class="line">        t[x &lt;&lt; <span class="number">1</span>] += t[x].tag; </div><div class="line">        t[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += t[x].tag; </div><div class="line">        t[x].tag = <span class="number">0</span>; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (l == r) &#123; </div><div class="line">        t[x].siz = <span class="number">1</span>, <span class="built_in">cin</span> &gt;&gt; t[x].evmn; </div><div class="line">        --t[x].evmn, t[x].r = t[x].evmn; </div><div class="line">        t[x].tag = <span class="number">0</span>; </div><div class="line">    &#125; <span class="keyword">else</span> &#123; </div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; </div><div class="line">        build(x &lt;&lt; <span class="number">1</span>, l, mid); </div><div class="line">        build(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r); </div><div class="line">        push_up(x); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> v)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123; </div><div class="line">        t[x] += v; </div><div class="line">    &#125; <span class="keyword">else</span> &#123; </div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; push_down(x);</div><div class="line">        <span class="keyword">if</span> (L &lt;= mid) add(x &lt;&lt; <span class="number">1</span>, l, mid, L, R, v); </div><div class="line">        <span class="keyword">if</span> (R &gt; mid) add(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, v); </div><div class="line">        push_up(x); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123; </div><div class="line">        ans = ans + t[x]; </div><div class="line">    &#125; <span class="keyword">else</span> &#123; </div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; push_down(x); </div><div class="line">        <span class="keyword">if</span> (L &lt;= mid) query(x &lt;&lt; <span class="number">1</span>, l, mid, L, R); </div><div class="line">        <span class="keyword">if</span> (R &gt; mid ) query(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R); </div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n;</div><div class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n); </div><div class="line">    <span class="keyword">int</span> type, a, b, k; </div><div class="line">    <span class="built_in">cin</span> &gt;&gt; q; </div><div class="line">    <span class="keyword">while</span> (q--) &#123; </div><div class="line">        <span class="built_in">cin</span> &gt;&gt; type; </div><div class="line">        <span class="keyword">if</span> (type == <span class="number">1</span>) &#123; </div><div class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; k; </div><div class="line">            add(<span class="number">1</span>, <span class="number">1</span>, n, a + <span class="number">1</span>, b + <span class="number">1</span>, k); </div><div class="line">        &#125; <span class="keyword">else</span> &#123; </div><div class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b ; </div><div class="line">            ans = node(<span class="number">0</span>, inf, inf, <span class="number">0</span>, <span class="number">0</span>); </div><div class="line">            query(<span class="number">1</span>, <span class="number">1</span>, n, a + <span class="number">1</span>, b + <span class="number">1</span>); </div><div class="line">            <span class="keyword">if</span> (ans.evmn &gt;= <span class="number">0</span> &amp;&amp; ans.odmn &gt;=<span class="number">0</span> &amp;&amp; ans.r == <span class="number">0</span>) </div><div class="line">                <span class="built_in">puts</span>(<span class="string">"1"</span>); </div><div class="line">            <span class="keyword">else</span> </div><div class="line">                <span class="built_in">puts</span>(<span class="string">"0"</span>); </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cf-720dslalom">【CF 720D】Slalom</h1>
<h2 id="题目链接-6"><a href="http://codeforces.com/contest/720/problem/D" target="_blank" rel="external">题目链接</a></h2>
<h2 id="题目大意-7">题目大意</h2>
<p>从 <span class="math inline">\((1, 1)\)</span> 点到 <span class="math inline">\((m, n)\)</span> 点的不同路径数, 定义两路径不同当且仅当存在一个矩形障碍物分别在这个路径的左右两侧; ## 解题报告 这个题很像TA哥模拟题中的栅栏(之后补出题解); <br> 利用差分, 令 <span class="math inline">\(f[i][j]\)</span> 表示 <span class="math inline">\((i, j)\)</span> 位置比 <span class="math inline">\((i, j-1)\)</span> 位置多出的方案数; <br> 容易得到, <span class="math inline">\(f[i][j]\)</span> 会继承到 <span class="math inline">\(f[i+1][j]\)</span> , 如果<span class="math inline">\(f[i+1][j]\)</span>没有障碍物;<br> 考虑障碍物的作用: ①将当前行列位置的差分信息清空, ②使上一行的部分差分信息汇聚到障碍物下端右侧位置;<br> 可以来个图感受一下: <img src="/cf/2.png" alt="one"> 白色的部分是障碍物, 那么红色位置的差分信息会汇聚到绿色位置; <img src="/cf/3.png" alt="two"> 同样的, 这个图中, ①位置会分别对其上方的位置和绿色位置贡献一个差分+1; <br> 总结一下, 对于当前行, 没有障碍物的位置, 继承上一行的差分, 障碍物最靠下位置差分信息清空, 右端汇聚前一行可以到达的差分信息;<br> 继承信息, 不需要进行操作, 汇聚信息, 需要区间求和和单点修改, 清空信息, 需要区间清零;<br> 所以线段树可以搞定; <br> 查上一行可以到达的左端位置, 使用平衡树(set)很轻松; <br></p>
<h1 id="代码-6">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">1000000007</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1000100</span>; </div><div class="line"></div><div class="line"><span class="built_in">vector</span> &lt;pii&gt; in[N], out[N]; </div><div class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; block; </div><div class="line"><span class="keyword">int</span> sm[N &lt;&lt; <span class="number">2</span>], n, m, k; </div><div class="line"><span class="keyword">bool</span> zero[N &lt;&lt; <span class="number">2</span>]; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">stop</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; :: iterator i; </div><div class="line">    i = block.upper_bound(x); </div><div class="line">    <span class="keyword">if</span> (i != block.begin()) &#123;</div><div class="line">        -- i; <span class="keyword">return</span> *i + <span class="number">1</span>; </div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">    zero[x] = <span class="number">1</span>, sm[x] = <span class="number">0</span>; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">    sm[x] = (sm[x &lt;&lt; <span class="number">1</span>] + sm[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]) % p; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (zero[x]) notify(x &lt;&lt; <span class="number">1</span>), notify(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>), zero[x] = <span class="number">0</span>; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (l == r) sm[x] == <span class="number">0</span>; </div><div class="line">    <span class="keyword">else</span> &#123; </div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; </div><div class="line">        build(x &lt;&lt; <span class="number">1</span>, l, mid); </div><div class="line">        build(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r); </div><div class="line">        push_up(x); </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> w, <span class="keyword">int</span> v)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (l == r) sm[x] = v; </div><div class="line">    <span class="keyword">else</span> &#123; </div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; </div><div class="line">        push_down(x); </div><div class="line">        <span class="keyword">if</span> (w &lt;= mid) change(x &lt;&lt; <span class="number">1</span>, l, mid, w, v); </div><div class="line">        <span class="keyword">else</span> change(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, w, v); </div><div class="line">        push_up(x);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) notify(x); </div><div class="line">    <span class="keyword">else</span> &#123; </div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; </div><div class="line">        push_down(x); </div><div class="line">        <span class="keyword">if</span> (L &lt;= mid) clear(x &lt;&lt; <span class="number">1</span>, l, mid, L, R); </div><div class="line">        <span class="keyword">if</span> (R &gt; mid) clear(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid +<span class="number">1</span>, r, L, R); </div><div class="line">        push_up(x); </div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> sm[x]; </div><div class="line">    <span class="keyword">else</span> &#123; </div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, ans = <span class="number">0</span>; </div><div class="line">        push_down(x); </div><div class="line">        <span class="keyword">if</span> (L &lt;= mid) (ans += query(x &lt;&lt; <span class="number">1</span>, l, mid , L, R)) %= p; </div><div class="line">        <span class="keyword">if</span> (R &gt; mid) (ans += query(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R)) %= p; </div><div class="line">        <span class="keyword">return</span> ans; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k; </div><div class="line">    <span class="keyword">int</span> x, y, _x, _y; </div><div class="line">    REP(i, k) &#123; </div><div class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; _x &gt;&gt; _y; </div><div class="line">        in[y].pb( mp(x, _x) ); </div><div class="line">        out[_y + <span class="number">1</span>].pb( mp(x, _x) ); </div><div class="line">    &#125; </div><div class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n); </div><div class="line">    change(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, <span class="number">1</span>); </div><div class="line">    REP(i, sz(in[<span class="number">1</span>])) &#123;</div><div class="line">        block.insert(in[<span class="number">1</span>][i].fi); </div><div class="line">        block.insert(in[<span class="number">1</span>][i].se); </div><div class="line">    &#125; </div><div class="line">    FORU(i, <span class="number">2</span>, m) &#123; </div><div class="line">        vi delta; </div><div class="line">        REP(j, sz(in[i])) &#123; </div><div class="line">            <span class="keyword">int</span> r = in[i][j].se + <span class="number">1</span>; </div><div class="line">            <span class="keyword">int</span> l = stop(r); </div><div class="line">            <span class="keyword">if</span> (l &lt;= r &amp;&amp; r &lt;= n)</div><div class="line">                delta.pb(query(<span class="number">1</span>, <span class="number">1</span>, n, l, r)); </div><div class="line">            <span class="keyword">else</span> delta.pb(<span class="number">0</span>);</div><div class="line">        &#125; </div><div class="line">        REP(j, sz(in[i])) &#123; </div><div class="line">            <span class="keyword">int</span> r = in[i][j].se + <span class="number">1</span>; </div><div class="line">            <span class="keyword">if</span> (r &lt;= n) </div><div class="line">                change(<span class="number">1</span>, <span class="number">1</span>, n, r, delta[j]); </div><div class="line">        &#125;</div><div class="line">        REP(j, sz(in[i])) &#123;</div><div class="line">            clear(<span class="number">1</span>, <span class="number">1</span>, n, in[i][j].fi, in[i][j].se); </div><div class="line">            block.insert(in[i][j].fi); </div><div class="line">            block.insert(in[i][j].se); </div><div class="line">        &#125; </div><div class="line">        REP(j, sz(out[i])) &#123; </div><div class="line">            block.erase(block.find(out[i][j].fi)); </div><div class="line">            block.erase(block.find(out[i][j].se)); </div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> l = stop(n); </div><div class="line">    <span class="keyword">int</span> ans = query(<span class="number">1</span>, <span class="number">1</span>, n, l, n); </div><div class="line">    <span class="keyword">return</span> <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>, <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cf-750gnew-year-and-binary-tree-paths">【CF 750G】New Year and Binary Tree Paths</h1>
<h2 id="原题链接"><a href="http://codeforces.com/contest/750/problem/G" target="_blank" rel="external">原题链接</a></h2>
<h2 id="题目大意-8">题目大意</h2>
<p>无限大的一棵完全二叉树上, 节点编号和等于 <span class="math inline">\(k\)</span> 的路径条数;</p>
<h2 id="解题报告-3">解题报告</h2>
<p>考虑路径的 <span class="math inline">\(LCA\)</span> 为 <span class="math inline">\(x\)</span> , 左右两条路径长度(不包括 <span class="math inline">\(x\)</span> )为 <span class="math inline">\(len_a\)</span> , <span class="math inline">\(len_b\)</span> , 路径编号和 <span class="math inline">\(S\)</span> 是多少; <br> <span class="math display">\[S = x * (2^{len_a+1} + 2^{len_b+1} - 3) + 2^{len_b} - 1 + bonus_a + bonus_b\]</span></p>
<p>一条自上而下的路径, 如果一个位置增加 <span class="math inline">\(x\)</span> , 从这个位置开始的长度为 <span class="math inline">\(n\)</span> , 那么增加 <span class="math inline">\(x\)</span> 的收益是 <span class="math inline">\(x * (2^n - 1)\)</span> ;<br> 所以 <span class="math inline">\(S\)</span> 的计算公式中的 <span class="math inline">\(bonus_a\)</span> 和 <span class="math inline">\(bonus_b\)</span> 代表左右两条长度分别为 <span class="math inline">\(len_a - 1\)</span> 和 <span class="math inline">\(len_b - 1\)</span> 的路径通过向右下方移动得到的收益;<br> 计算 <span class="math inline">\(bonus\)</span> 的时候, 因为<span class="math inline">\(2^n -1\)</span>的形式不好统计方案, 而对每一个为一的二进制位获得的收益加一, 再对总收益/2, 正好可以得到向左移动为0, 向右移动为1对应的二进制数;<br> 所以得到 <span class="math inline">\(bonus_a = a * 2 - ones_a\)</span> ,其中 <span class="math inline">\(a\)</span> 表示左右移动得到的二进制数, <span class="math inline">\(bonus_b\)</span> 同理; <br> 一个有效的性质是, <br> <span class="math display">\[bonus_a + bonus_b +2^{len_b} - 1 &lt; 2^{len_a} - 2 + 2^{len_b  + 1} - 3 &lt; 2^{len_a+1} + 2^{len_b+1} - 3\]</span></p>
<p>所以, 如果确定 <span class="math inline">\(len_a\)</span> 和 <span class="math inline">\(len_b\)</span> , 就可以直接计算 <span class="math inline">\(LCA\)</span> ;<br> 然后可以枚举 <span class="math inline">\(ones_a\)</span> 和 <span class="math inline">\(ones_b\)</span> , 将问题转化成, 两个二进制数, 分别有 <span class="math inline">\(len_a - 1\)</span> 和 <span class="math inline">\(len_b - 1\)</span> 位, <span class="math inline">\(1\)</span> 的个数分别为 <span class="math inline">\(ones_a\)</span> , <span class="math inline">\(ones_b\)</span> , 和为 <span class="math inline">\((bonus_a + bonus_b - ones_a - ones_b)/2\)</span> 的方案数, 数位 <span class="math inline">\(dp\)</span> ; <br></p>
<p>时间复杂度 <span class="math inline">\(O(log^6S)\)</span> ;</p>
<h2 id="代码-7">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> Tgetw(a, w) ((a &gt;&gt; w) &amp; 1)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">150</span>;</div><div class="line"></div><div class="line">ll s, ans;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">dp</span><span class="params">(<span class="keyword">int</span> ot, <span class="keyword">int</span> la, <span class="keyword">int</span> lb, ll sm)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> ll f[N][<span class="number">2</span>], las[N][<span class="number">2</span>];</div><div class="line">    REP(a, ot + <span class="number">1</span>) REP(re, <span class="number">2</span>) f[a][re] = <span class="number">0</span>;</div><div class="line">    f[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="number">1L</span>L &lt;&lt; i) &lt;= sm; ++i) &#123;</div><div class="line">        REP(a, ot + <span class="number">1</span>) REP(re, <span class="number">2</span>) &#123;</div><div class="line">            las[a][re] = f[a][re];</div><div class="line">            f[a][re] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        REP(ca, <span class="number">2</span>) <span class="keyword">if</span> (i &lt; la || ca == <span class="number">0</span>)</div><div class="line">            REP(cb, <span class="number">2</span>) <span class="keyword">if</span> (i &lt; lb || cb == <span class="number">0</span>) &#123;</div><div class="line">                REP(re, <span class="number">2</span>) &#123;</div><div class="line">                    <span class="keyword">int</span> dg = ca + cb + re;</div><div class="line">                    <span class="keyword">if</span> ((dg &amp; <span class="number">1</span>) != Tgetw(sm, i))</div><div class="line">                        <span class="keyword">continue</span>;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> al = <span class="number">0</span>; al + ca + cb &lt;= ot; ++al)</div><div class="line">                        f[al + ca + cb][dg / <span class="number">2</span>] += las[al][re];</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> f[ot][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; s, ans = <span class="number">0</span>;</div><div class="line">    REP(a, <span class="number">59</span>) REP(b, <span class="number">59</span>) &#123;</div><div class="line">        ll mul = (<span class="number">1L</span>L &lt;&lt; a + <span class="number">1</span>) + (<span class="number">1L</span>L &lt;&lt; b + <span class="number">1</span>) - <span class="number">3</span>;</div><div class="line">        ll lca = s / mul ; <span class="keyword">if</span> (!lca) <span class="keyword">continue</span>;</div><div class="line">        ll res = s - lca * mul - ( (<span class="number">1L</span>L &lt;&lt; b) - <span class="number">1</span>);</div><div class="line">        REP(ones, a + b + <span class="number">1</span>) &#123;</div><div class="line">            ll aandb = res + ones;</div><div class="line">            <span class="keyword">if</span> (aandb &lt; <span class="number">0</span> || aandb % <span class="number">2</span> == <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">            aandb /= <span class="number">2</span>;</div><div class="line">            ans += dp(ones, max(a<span class="number">-1</span>, <span class="number">0</span>), max(b<span class="number">-1</span>, <span class="number">0</span>), aandb);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cf-702ft-shirt">【CF 702F】T-shirt</h1>
<h2 id="原题链接-1"><a href="http://codeforces.com/contest/702/problem/F" target="_blank" rel="external">原题链接</a></h2>
<h2 id="题目大意-9">题目大意</h2>
<p>每个人会先买质量高的东西, 质量相同会先买便宜的东西, 给出 <span class="math inline">\(n\)</span> 个物品各自的质量和价格, 给出 <span class="math inline">\(k\)</span> 个人每个人带的钱, 问每个人能卖几个东西; ## 解题报告</p>
<p>这个裸数据结构题场上没人A, 你逗我?<br> 首先, 针对每个人, 计算他可以买哪些东西真是搞不了, 咋想都别扭. <br> 古人有句话说得好… 正难则反易.<br> 所以考虑每个东西被哪个人买好了..<br> 把人按照剩下的钱排个平衡树, 然后, 物品按照双关键字排序后, 从前向后扫, 对大于当前物品价格的平衡树上的区间, 做答案 <span class="math inline">\(+1\)</span> , 剩余钱数 <span class="math inline">\(-price_i\)</span> 的操作; <br> 有一个问题, 就是做完区间减法后, 平衡树的性质可能被破坏, 那么需要把操作后, 剩余钱数 <span class="math inline">\(&lt;price_i\)</span> 的节点重新插入平衡树的合适位置;<br> 这样不会 <span class="math inline">\(T\)</span> 成狗 ? <br> 好像不会, 证明下: 1. 一个节点被重新加入平衡树的条件是 <span class="math inline">\(price_i &lt; money &lt; 2price_i\)</span>; 2. 这个节点进行完重构操作后, <span class="math inline">\(money&#39; &lt; price_i\)</span> ; 3. <span class="math inline">\(delta_{money} &gt; money * \frac{1}{2}\)</span> , 也就是每个节点最多进行 <span class="math inline">\(log \ money\)</span> 次操作; 4. 时间复杂度是 <span class="math inline">\(O(nlog^2n)\)</span> ; <br></p>
<p>写的是 <code>FHQ Treap</code>, 仍然经历了痛苦的打残-&gt;调试的过程; <br></p>
<h2 id="代码-8">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> RAND (rand() &lt;&lt; 15 | rand())</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200100</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> n, c[N], q[N], lin[N], k, b[N], usr[N];</div><div class="line"><span class="keyword">int</span> ans[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> l, r, at, bt, sz, a, b, id, key;</div><div class="line">	node()&#123;&#125;</div><div class="line">	node(<span class="keyword">int</span> b, <span class="keyword">int</span> id, <span class="keyword">int</span> key)</div><div class="line">		: b(b), id(id), key(key)&#123;</div><div class="line">			l = r = at = bt = a = <span class="number">0</span>, sz = <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">&#125; t[N];</div><div class="line"><span class="keyword">int</span> root;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> ch = getchar(); <span class="keyword">int</span> f= <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar())</div><div class="line">		<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span> (x = <span class="number">0</span>; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar())</div><div class="line">		x = x * <span class="number">10</span> + ch - <span class="number">48</span>;</div><div class="line">	x *= f ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> q[x] == q[y] ? c[x] &lt; c[y] : q[x] &gt; q[y];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> b[x] &lt; b[y];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_a</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	t[x].a += v, t[x].at += v;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_b</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	t[x].b += v, t[x].bt += v;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	t[x].sz = <span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (t[x].l) t[x].sz += t[t[x].l].sz;</div><div class="line">	<span class="keyword">if</span> (t[x].r) t[x].sz += t[t[x].r].sz;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (t[x].at) &#123;</div><div class="line">		<span class="keyword">if</span> (t[x].l) add_a(t[x].l, t[x].at);</div><div class="line">		<span class="keyword">if</span> (t[x].r) add_a(t[x].r, t[x].at);</div><div class="line">		t[x].at  = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (t[x].bt) &#123;</div><div class="line">		<span class="keyword">if</span> (t[x].l) add_b(t[x].l, t[x].bt);</div><div class="line">		<span class="keyword">if</span> (t[x].r) add_b(t[x].r, t[x].bt);</div><div class="line">		t[x].bt = <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> *lis)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> x ;</div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> <span class="built_in">stack</span>[N], top, last;</div><div class="line">	FORU(i, <span class="number">1</span>, k) &#123;</div><div class="line">		x = lis[i], last = <span class="number">0</span>;</div><div class="line">		t[i] = node(b[x], x, RAND);</div><div class="line">		<span class="keyword">while</span> (top &amp;&amp; t[<span class="built_in">stack</span>[top]].key &gt; t[i].key) &#123;</div><div class="line">			last = <span class="built_in">stack</span>[top], push_up(<span class="built_in">stack</span>[top]);</div><div class="line">			<span class="built_in">stack</span>[top--] = <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (top) t[<span class="built_in">stack</span>[top]].r = i;</div><div class="line">		<span class="built_in">stack</span>[++top] = i, t[i].l = last;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">while</span> (top) push_up(<span class="built_in">stack</span>[top--]);</div><div class="line">	<span class="keyword">return</span> <span class="built_in">stack</span>[<span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function">pii <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> mp(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    push_down(x); pii y;</div><div class="line">	<span class="keyword">if</span> (k == <span class="number">0</span>) <span class="keyword">return</span> mp(<span class="number">0</span>, x);</div><div class="line">	<span class="keyword">int</span> lsize = t[t[x].l].sz;</div><div class="line">	<span class="keyword">if</span> (lsize &gt;= k) &#123;</div><div class="line">		y = split(t[x].l, k);</div><div class="line">		t[x].l = y.se, push_up(x);</div><div class="line">		y.se = x;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		y = split(t[x].r, k - lsize  - <span class="number">1</span>);</div><div class="line">		t[x].r = y.fi, push_up(x);</div><div class="line">		y.fi = x;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> y;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (a * b == <span class="number">0</span>) <span class="keyword">return</span> a + b;</div><div class="line">	push_down(a), push_down(b);</div><div class="line">	<span class="keyword">if</span> (t[a].key &lt; t[b].key) &#123;</div><div class="line">		t[a].r = merge(t[a].r, b);</div><div class="line">		push_up(a); <span class="keyword">return</span> a;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		t[b].l = merge(a, t[b].l);</div><div class="line">		push_up(b); <span class="keyword">return</span> b;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lower</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> x = rt, tmp = <span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (x) &#123;</div><div class="line">        push_down(x);</div><div class="line">		<span class="keyword">if</span> (t[x].b &lt; v) &#123;</div><div class="line">			tmp += t[t[x].l].sz + <span class="number">1</span>;</div><div class="line">			x = t[x].r;</div><div class="line">		&#125; <span class="keyword">else</span> x = t[x].l;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> &amp;rt)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> k = lower(rt, t[x].b);</div><div class="line">	pii droot = split(rt, k);</div><div class="line">	droot.se = merge(x, droot.se);</div><div class="line">	rt = merge(droot.fi, droot.se);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> &amp;to)</span> </span>&#123;</div><div class="line">	push_down(x);</div><div class="line">	<span class="keyword">if</span> (t[x].l) del(t[x].l, to);</div><div class="line">	<span class="keyword">if</span> (t[x].r) del(t[x].r, to);</div><div class="line">	t[x].l = t[x].r = <span class="number">0</span>;</div><div class="line">    insert(x, to);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> k = lower(root, price);</div><div class="line">	pii droot = split(root, k);</div><div class="line">	add_b(droot.se, -price);</div><div class="line">	add_a(droot.se, <span class="number">1</span>);</div><div class="line">	<span class="keyword">int</span> _k = lower(droot.se, price);</div><div class="line">	pii dright = split(droot.se, _k) ;</div><div class="line">	del(dright.fi, droot.fi);</div><div class="line">	root = merge(droot.fi, dright.se);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	ans[ t[x].id ] = t[x].a;</div><div class="line">	push_down(x);</div><div class="line">	<span class="keyword">if</span> (t[x].l) query(t[x].l);</div><div class="line">	<span class="keyword">if</span> (t[x].r) query(t[x].r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">itera</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    push_down(x);</div><div class="line">    <span class="keyword">if</span> (t[x].l) itera(t[x].l);</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" , "</span> &lt;&lt; t[x].id &lt;&lt; <span class="string">" : "</span> &lt;&lt; t[x].a &lt;&lt; <span class="string">" , "</span> &lt;&lt; t[x].b &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">if</span> (t[x].r) itera(t[x].r);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	srand(time(<span class="number">0</span>) + <span class="number">217</span>);</div><div class="line">	in(n);</div><div class="line">	FORU(i, <span class="number">1</span>, n) in(c[i]), in(q[i]), lin[i] = i;</div><div class="line">	in(k);</div><div class="line">	FORU(i, <span class="number">1</span>, k) in(b[i]), usr[i] = i;</div><div class="line">	sort(lin + <span class="number">1</span>, lin + <span class="number">1</span> + n, cmp1);</div><div class="line">	sort(usr + <span class="number">1</span>, usr + <span class="number">1</span> + k, cmp2);</div><div class="line">	root = build(usr);</div><div class="line"><span class="comment">//    itera(root);</span></div><div class="line">	FORU(i, <span class="number">1</span>, n) buy(c[lin[i]]);<span class="comment">// itera(root);</span></div><div class="line">	query(root);</div><div class="line">	FORU(i, <span class="number">1</span>, k)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], (i == k)?<span class="string">'\n'</span>:<span class="string">' '</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cf-678dlena-and-queries">【CF 678D】Lena and Queries</h1>
<h2 id="原题链接-2"><a href="http://codeforces.com/contest/678/problem/F" target="_blank" rel="external">原题链接</a></h2>
<h2 id="题目大意-10">题目大意</h2>
<p>三个操作： 1. 加入一个有序数对<span class="math inline">\((a, b)\)</span>; 2. 查询对于给出的<span class="math inline">\(x\)</span>, <span class="math inline">\(ax+b\)</span>的最大值; 3. 取消<span class="math inline">\(i\)</span>号插入操作;</p>
<h2 id="解题报告-4">解题报告</h2>
<p>开始想的是时间分治, 离线后, 每个插入相当于对一个区间有效;<br> 每次将完全包含当前区间的插入点做成一个凸包, 对区间内的询问点进行查询;<br> 算一下这样的时间复杂度, 每个区间可以表示成 <span class="math inline">\(logn\)</span> 的分治区间, 也就是被插入 <span class="math inline">\(logn\)</span> 次凸包; 询问需要在凸包上三分, 每个询问需要三分 <span class="math inline">\(logn\)</span> 次, 令三分的复杂度是 <span class="math inline">\(T\)</span> , 那么时间复杂度为 <span class="math inline">\(O(nTlogn)\)</span> ; <br> 对于三分复杂度这个问题, 我用的是三等分的做法, 没有去借鉴网上的 <span class="math inline">\(O(3log_{3}n)\)</span> 的说法, 鉴于每次问题规模缩为原问题的 <span class="math inline">\(\frac{2}{3}\)</span>, 每次需要运算两个点的值, 所以我把复杂度写成 <span class="math inline">\(O(2log_{\frac{3}{2}}n)\)</span> , 这样看就是比二分慢不少, 貌似挺科学?<br> 所以这样做的复杂度就是 <span class="math inline">\(O(nlognlog_{\frac{3}{2}}n)\)</span> ; <br> 要写的时候, 突然想到向量集那个题, 受到一些启发, 干脆把时间建成线段树, 然后把点放到线段树上去, 在线段树上查询;<br> 使用标记永久化, 每个点会加入 <span class="math inline">\(logn\)</span> 次, 复杂度是不变的; <br> 这样空间翻倍了, 但写得更板子…<br> A了之后看了眼题解, woc, 这个分块有点科学呀, 而且复杂度根本不差!!!<br> 所以还是应该继续思考…<br></p>
<h2 id="代码-9">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">301000</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp; x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();<span class="keyword">int</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar())</div><div class="line">    <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar())</div><div class="line">    x = x * <span class="number">10</span> + ch - <span class="number">48</span>;</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">cross</span><span class="params">(pll a, pll b, pll c)</span> </span>&#123;</div><div class="line">    ll x = a.fi - b.fi, y = a.se - b.se;</div><div class="line">    ll _x = b.fi - c.fi, _y = b.se - c.se;</div><div class="line">    <span class="keyword">return</span> x * _y - y * _x;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">val</span><span class="params">(pll a, ll x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x * a.fi + a.se;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">convex</span> &#123;</span></div><div class="line">    <span class="built_in">vector</span>&lt; pll &gt; po;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pll x)</span> </span>&#123;po.pb(x);&#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="built_in">vector</span>&lt; pll &gt; tp; tp = po;</div><div class="line">        po.clear();</div><div class="line">        sort(tp.begin(), tp.end());</div><div class="line">        REP(i, sz(tp)) &#123;</div><div class="line">            <span class="keyword">while</span> (sz(po) &gt;= <span class="number">2</span> &amp;&amp; cross(tp[i], po.back(), po[sz(po)<span class="number">-2</span>]) &lt;= <span class="number">0</span>)</div><div class="line">                po.pop_back();</div><div class="line">            po.pb(tp[i]);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="function">ll <span class="title">query</span><span class="params">(ll x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = sz(po) <span class="number">-1</span>;</div><div class="line">        ll ans = LLONG_MIN;</div><div class="line">        <span class="keyword">while</span> (l + <span class="number">2</span> &lt; r) &#123;</div><div class="line">            <span class="keyword">int</span> _l = l + (r - l + <span class="number">1</span>) / <span class="number">3</span>;</div><div class="line">            <span class="keyword">int</span> _r = r - (r - l + <span class="number">1</span>) / <span class="number">3</span>;</div><div class="line">            <span class="keyword">if</span> (val(po[_l], x) &gt; val(po[_r], x))</div><div class="line">                r = _r;</div><div class="line">            <span class="keyword">else</span> l = _l;</div><div class="line">        &#125;</div><div class="line">        FORU(i, l, r) ans = max(ans, val(po[i], x));</div><div class="line">        <span class="keyword">return</span> ans;</div><div class="line">    &#125;</div><div class="line">&#125; c[N &lt;&lt; <span class="number">2</span>];</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">int</span> t[N], l[N], r[N], q[N], n;</div><div class="line">pll poi[N];</div><div class="line">ll ans;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> _l, <span class="keyword">int</span> _r, pll p)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (_l &lt;= l &amp;&amp; r &lt;= _r) &#123;</div><div class="line">        <span class="comment">// cout &lt;&lt; l &lt;&lt; ' ' &lt;&lt; r &lt;&lt; ' '&lt;&lt; _l &lt;&lt; ' '&lt;&lt; _r &lt;&lt; endl;</span></div><div class="line">        c[x].add(p); <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (_l &lt;= mid) add(x &lt;&lt; <span class="number">1</span>, l, mid, _l, _r, p);</div><div class="line">    <span class="keyword">if</span> (_r &gt; mid) add(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, _l, _r, p);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">     c[x].build();</div><div class="line">     <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</div><div class="line">     <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</div><div class="line">     build(x &lt;&lt; <span class="number">1</span>, l, mid);</div><div class="line">     build(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</div><div class="line"> &#125;</div><div class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, ll _x)</span> </span>&#123;</div><div class="line">    ll ans = LLONG_MIN;</div><div class="line">    ans = max(ans, c[x].query(_x));</div><div class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> ans;</div><div class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> (p &lt;= mid)</div><div class="line">        ans = max(ans, query(x &lt;&lt; <span class="number">1</span>, l, mid, p, _x));</div><div class="line">    <span class="keyword">else</span></div><div class="line">        ans = max(ans, query(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, p, _x));</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    in(n); <span class="keyword">int</span> x, y;</div><div class="line">    FORU(i, <span class="number">1</span>, n) &#123;</div><div class="line">        in(t[i]);</div><div class="line">        <span class="keyword">if</span> (t[i] == <span class="number">1</span>) &#123;</div><div class="line">            in(x), in(y), poi[i] = mp(x, y);</div><div class="line">            l[i] = i, r[i] = n;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t[i] == <span class="number">2</span>)</div><div class="line">                in(x), r[x] = i;</div><div class="line">            <span class="keyword">else</span> in(q[i]);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// cout &lt;&lt; endl;</span></div><div class="line">    FORU(i, <span class="number">1</span>, n) <span class="keyword">if</span> (t[i] == <span class="number">1</span>) &#123;</div><div class="line"><span class="comment">//        cout &lt;&lt; i &lt;&lt; ": " &lt;&lt;  l[i] &lt;&lt; ' ' &lt;&lt; r[i] &lt;&lt; endl;</span></div><div class="line">        add(<span class="number">1</span>, <span class="number">1</span>, n, l[i], r[i], poi[i]);</div><div class="line">    &#125;</div><div class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    FORU(i, <span class="number">1</span>, n) <span class="keyword">if</span> (t[i] == <span class="number">3</span>) &#123;</div><div class="line">        ans = query(<span class="number">1</span>, <span class="number">1</span>, n, i, q[i]);</div><div class="line">        <span class="keyword">if</span> (ans == LLONG_MIN) <span class="built_in">puts</span>(<span class="string">"EMPTY SET"</span>);</div><div class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cf-700d-huffman-coding-on-segment">【CF 700D】 Huffman Coding on Segment</h1>
<h2 id="原题链接-3"><a href="http://codeforces.com/contest/700/problem/D" target="_blank" rel="external">原题链接:</a></h2>
<h2 id="题目大意-11">题目大意</h2>
<p>区间查询huffman编码 ## 解题报告 学习huffman编码/树的美好童年时光QWQ.<img src="/cf/4.jpg" alt="简直一派胡言" width="80" height="80"></p>
<p>利用huffman编码的定义, 每次最后一个0/1位相当于把两个数合并, 类似于果子合并中的合并; <br> 显然, 出现次数小的应该先进行合并, 这样可以减小总的编码长度, 答案是所有数的huffman编码长度和, 也就是编码过程中huffman树的每个点的深度和;<br> 所以问题实际上是对一个区间内, 每个数的出现次数为权值构建huffman树…(<del>怎么神犇根本不需要想就知道呀…</del>)<br> 但是一个直接每个区间构建huffman树是 <span class="math inline">\(O(n^2logn)\)</span> 的…<img src="/cf/5.jpg" width="80" height="70"></p>
<p>考虑优化, 貌似出现次数相同的果子(…)可以一起处理, 也就是如果出现次数是 <span class="math inline">\(times\)</span> 的果子一共有 <span class="math inline">\(k\)</span> 个, 那么如果当前最小出现次数果子的出现次数就是 <span class="math inline">\(times\)</span> , 就可以直接合并出 <span class="math inline">\(\lfloor k/2 \rfloor\)</span> 个 <span class="math inline">\(times * 2\)</span>, 如果还剩下一个果子, 就向后面寻找配对的果子…<br> 这个复杂度就很科学了! 因为不同的出现次数只有 <span class="math inline">\(\sqrt{n}\)</span> 种, 而类似桶排, 可以对 <span class="math inline">\(times &lt;= O(sqrt{n})\)</span> 做这样的处理, 使得剩下的果子出现次数 <span class="math inline">\(times &gt; \sqrt{n}\)</span> … 而这样的果子最多 <span class="math inline">\(n / \sqrt{n}\)</span> 个… <img src="/cf/6.gif"></p>
<p>现在的问题是, 怎样统计区间内每个数出现的次数和出现相应次数的有几个数, 连我这个蒟蒻都会的莫队算法可以搞呀..<br> 妙! 复杂度是 <span class="math inline">\(O(n \sqrt{n} + n \sqrt{n} + n \sqrt{n}log \sqrt{n})\)</span> <br></p>
<h2 id="代码-10">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100100</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> car[N], tim[N], n, q, a[N];</div><div class="line"><span class="keyword">int</span> id[N], B, blo[N], l[N], r[N] ;</div><div class="line">ll ans[N];</div><div class="line">vi large;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> blo[l[a]] == blo[l[b]] ? r[a] &lt; r[b]</div><div class="line">        : blo[l[a]] &lt; blo[l[b]];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">colorify</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">    tim[car[w]] --, car[w] += v, tim[car[w]] ++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">got_ans</span><span class="params">(ll &amp;ans)</span> </span>&#123;</div><div class="line">    ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> tis[N];</div><div class="line">    FORU(i, <span class="number">1</span>, B * <span class="number">2</span>) tis[i] = tim[i];</div><div class="line">    FORU(i, <span class="number">1</span>, B) &#123;</div><div class="line">        ans += tis[i] / <span class="number">2</span> * <span class="number">2</span> * i;</div><div class="line">        tis[i * <span class="number">2</span>] += tis[i] / <span class="number">2</span>;</div><div class="line">        tis[i] = tis[i] % <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (tis[i]) FORU(j, i + <span class="number">1</span>, B) &#123;</div><div class="line">            <span class="keyword">if</span> (tis[j]) &#123;</div><div class="line">                ans += i + j;</div><div class="line">                tis[i] --, tis[j]--;</div><div class="line">                tis[i + j] ++;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    priority_queue&lt;<span class="keyword">int</span>, vi, greater&lt;<span class="keyword">int</span>&gt; &gt; q;</div><div class="line">    FORU(i, <span class="number">1</span>, B * <span class="number">2</span>) REP(j, tis[i]) q.push(i);</div><div class="line">    REP(i, sz(large))</div><div class="line">        <span class="keyword">if</span> (car[large[i]] &gt; B * <span class="number">2</span>)</div><div class="line">            q.push(car[large[i]]);</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line">    <span class="keyword">while</span> (q.size() &gt;= <span class="number">2</span>) &#123;</div><div class="line">        x = q.top(), q.pop();</div><div class="line">        y = q.top(), q.pop();</div><div class="line">        ans += x + y;</div><div class="line">        q.push(x + y);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ios :: sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; n , B = <span class="built_in">pow</span>(<span class="number">2</span> * n, <span class="number">0.5</span>);</div><div class="line">    FORU(i, <span class="number">1</span>, n) <span class="built_in">cin</span> &gt;&gt; a[i], ++car[a[i]];</div><div class="line">    FORU(i, <span class="number">1</span>, <span class="number">100000</span>) <span class="keyword">if</span> (car[i] &gt; B * <span class="number">2</span>) large.pb(i);</div><div class="line">    mmst(car, <span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</div><div class="line">    FORU(i, <span class="number">1</span>, n) <span class="keyword">if</span> (i % B == <span class="number">0</span>)</div><div class="line">        blo[i] = tmp ++;</div><div class="line">    <span class="keyword">else</span> blo[i] = tmp;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; q;</div><div class="line">    FORU(i, <span class="number">1</span>, q) id[i] = i;</div><div class="line">    FORU(i, <span class="number">1</span>, q) <span class="built_in">cin</span> &gt;&gt; l[i] &gt;&gt; r[i];</div><div class="line">    sort(id + <span class="number">1</span>, id + <span class="number">1</span> + q, cmp);</div><div class="line">    <span class="keyword">int</span> _l = <span class="number">1</span>, _r = <span class="number">0</span>, __l, __r, x;</div><div class="line">    FORU(i, <span class="number">1</span>, q) &#123;</div><div class="line">        x = id[i], __l = l[x], __r = r[x];</div><div class="line">        <span class="keyword">while</span> (_r &lt; __r)</div><div class="line">            ++_r, colorify(a[_r], <span class="number">1</span>);</div><div class="line">        <span class="keyword">while</span> (_l &gt; __l)</div><div class="line">            --_l, colorify(a[_l], <span class="number">1</span>);</div><div class="line">        <span class="keyword">while</span> (_r &gt; __r)</div><div class="line">            colorify(a[_r], <span class="number">-1</span>), --_r;</div><div class="line">        <span class="keyword">while</span> (_l &lt; __l)</div><div class="line">            colorify(a[_l], <span class="number">-1</span>), ++_l;</div><div class="line">        got_ans(ans[x]);</div><div class="line">    &#125;</div><div class="line">    FORU(i, <span class="number">1</span>, q) <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="cf-755gpolandball-and-many-other-balls">【CF 755G】PolandBall and Many Other Balls</h1>
<h2 id="题目链接-7"><a href="http://codeforces.com/contest/755/problem/G" target="_blank" rel="external">题目链接</a></h2>
<h2 id="题目大意-12">题目大意</h2>
<p>一排石子, 相邻的一块, 问<span class="math inline">\(n\)</span>个石子, 圈出<span class="math inline">\(k\)</span>个单位的方案数.</p>
<h2 id="解题报告-5">解题报告</h2>
<p>很容易想到<strong>倍增</strong>, 分为两种情况考虑 :</p>
<ol style="list-style-type: decimal">
<li>当前石子数<span class="math inline">\(x\)</span>, 变为<span class="math inline">\(2x\)</span> , 对于选出<span class="math inline">\(k\)</span>个单位的方案, 显然可以分成左边选<span class="math inline">\(j\)</span>个, 右边选<span class="math inline">\(k-j\)</span>个两部分. 但是有一种特殊的情况, 就是就是将第<span class="math inline">\(x\)</span>块和第<span class="math inline">\(x+1\)</span>块圈成一块, 那么方案数还需要加上在左边<span class="math inline">\((x-1)\)</span>块中选<span class="math inline">\(j\)</span>, 右边<span class="math inline">\((x-1)\)</span>块中选<span class="math inline">\(k-j\)</span>这种情况.</li>
<li>当前石子数为<span class="math inline">\(x\)</span>, 变为<span class="math inline">\(x+1\)</span>, 这个是简单的dp, <span class="math inline">\(f[x][k] = f[x-1][k]+f[x-1][k-1]+f[x-2][k-1]\)</span> 使用当前的<span class="math inline">\(x\)</span>和<span class="math inline">\(x-1\)</span>的信息尽可以转移.</li>
</ol>
<p>上面的两种情况有一个问题, 就是当<span class="math inline">\(x-&gt;2x\)</span> , 没有统计出<span class="math inline">\(2x-1\)</span>的信息.</p>
<p>考虑<span class="math inline">\(2x-1 = x+x-1\)</span> , 也就是左边<span class="math inline">\(x\)</span>和右边<span class="math inline">\(x-1\)</span>或者左边<span class="math inline">\(x-1\)</span>右边<span class="math inline">\(x\)</span> . 但是这两个情况又有重叠, 其实就是第一种情况左边的<span class="math inline">\(x\)</span>将最后一个位置单独圈成一个单位, 和第二种情况右边的<span class="math inline">\(x\)</span>将第一个位置单独圈成一个单位后, 得到的答案是重复的, 所以需要减去重复的答案.</p>
<p>整理一下, 可以得到完整的转移: <span class="math display">\[
\left.
\begin{array}{l}
&amp;f[x][k]=f[x-1][k]+f[x-1][k-1]+f[x-2][k-1]\\
&amp;f[2x] (k) = (f[x] \otimes f[x])(k) + (f[x-1] \otimes f[x-1])(k-1)\\
&amp;f[2x-1] (k) = 2(f[x] \otimes f[x-1])(k) - (f[x-1] \otimes f[x-1])(k-1)
\end{array}
\right.
\]</span></p>
<p>NTT, 大力优化一波卷积.</p>
<h2 id="代码-11">代码</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> K = <span class="number">1</span> &lt;&lt; <span class="number">16</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">998244353</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> n, k, _n, re[K]; </div><div class="line">ll f[K], g[K]; </div><div class="line"></div><div class="line"><span class="keyword">inline</span> ll _fast(ll x, <span class="keyword">int</span> k) &#123;</div><div class="line">	ll ans = <span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>) &#123; </div><div class="line">		<span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = ans * x % p; </div><div class="line">		x = x * x % p ; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> ans; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">ad</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"> 	<span class="keyword">if</span> (x &gt;= p) x -= p ; </div><div class="line"> 	<span class="keyword">if</span> (x &lt; <span class="number">0</span>) x += p; </div><div class="line"> 	<span class="keyword">return</span> x; </div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fft</span><span class="params">(ll *a, <span class="keyword">int</span> f = <span class="number">1</span>)</span> </span>&#123;</div><div class="line"> 	REP(i, _n) <span class="keyword">if</span> (i &lt; re[i]) </div><div class="line"> 		swap(a[i], a[ re[i] ]); </div><div class="line"> 	ll G = (f == <span class="number">1</span>) ? <span class="number">3</span> : _fast(<span class="number">3</span>, p<span class="number">-2</span>); </div><div class="line"> 	<span class="keyword">for</span> (<span class="keyword">int</span> m=<span class="number">1</span>; m &lt; _n; m &lt;&lt;= <span class="number">1</span>) &#123; </div><div class="line"> 		ll wn = _fast(G, (p<span class="number">-1</span>) / m / <span class="number">2</span>); </div><div class="line"> 		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; _n; i += m &lt;&lt; <span class="number">1</span>) &#123; </div><div class="line"> 			ll w = <span class="number">1</span>; </div><div class="line"> 			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j &lt; m; ++j) &#123;</div><div class="line"> 				ll x = a[i+j], y = a[i+j+m] * w % p; </div><div class="line"> 				a[i+j] = ad(x + y), a[i+j+m] = ad(x - y); </div><div class="line"> 				w = w * wn % p;</div><div class="line"> 			&#125; </div><div class="line"> 		&#125; </div><div class="line"> 	&#125; </div><div class="line"> 	<span class="keyword">if</span> (f == <span class="number">-1</span>) &#123; </div><div class="line">	 	ll po = _fast(_n, p<span class="number">-2</span>); </div><div class="line">	 	REP(i, _n) a[i] = a[i] * po % p; </div><div class="line">	&#125;</div><div class="line"> 	</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">one</span><span class="params">()</span> </span>&#123;</div><div class="line"> 	FORD(i, k, <span class="number">1</span>) &#123;</div><div class="line"> 	 	g[i] = f[i]; </div><div class="line"> 	 	f[i] = ad(ad(f[i] + f[i<span class="number">-1</span>]) + g[i<span class="number">-1</span>]); </div><div class="line"> 	&#125;</div><div class="line"> 	g[<span class="number">0</span>] = f[<span class="number">0</span>]; </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">two</span><span class="params">()</span> </span>&#123;</div><div class="line"> 	fft(f), fft(g); </div><div class="line"> 	ll w = <span class="number">1</span>, wn = _fast(<span class="number">3</span>, (p<span class="number">-1</span>)/_n), _f, _g; </div><div class="line"> 	REP(i, _n) &#123; </div><div class="line"> 		_f = (f[i] * f[i] + g[i] * g[i] % p * w) % p; </div><div class="line"> 		_g = (f[i] * g[i] * <span class="number">2</span> - (g[i] * g[i]) % p * (w + <span class="number">1</span>)) % p; </div><div class="line"> 		f[i] = _f, g[i] = ad(_g), w = w * wn % p; </div><div class="line"> 	&#125; </div><div class="line"> 	fft(f, <span class="number">-1</span>), fft(g, <span class="number">-1</span>); </div><div class="line"> 	FORU(i, k + <span class="number">1</span>, _n - <span class="number">1</span>) f[i] = g[i] = <span class="number">0</span>; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"> 	</div><div class="line"> 	ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;  </div><div class="line">	<span class="keyword">for</span> (_n = <span class="number">1</span>; _n &lt; k * <span class="number">2</span>; _n &lt;&lt;= <span class="number">1</span>); </div><div class="line"></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; _n; ++i) &#123;</div><div class="line"> 		re[i] = j; </div><div class="line"> 		<span class="keyword">for</span> (<span class="keyword">int</span> _k = _n&gt;&gt;<span class="number">1</span>; (j^=_k) &lt; _k; _k &gt;&gt;= <span class="number">1</span>); </div><div class="line"></div><div class="line"> 	&#125; </div><div class="line"> 	</div><div class="line">	f[<span class="number">0</span>] = <span class="number">1</span>; 	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>&lt;&lt;<span class="number">29</span>, s=<span class="number">0</span>; i; i &gt;&gt;= <span class="number">1</span>) &#123;</div><div class="line">	 	<span class="keyword">if</span> (s) two() , s &lt;&lt;= <span class="number">1</span>; </div><div class="line">	 	<span class="keyword">if</span> (n &amp; i) one(), ++ s; </div><div class="line">	&#125; </div><div class="line">	FORU(i, <span class="number">1</span>, k) </div><div class="line">		<span class="built_in">cout</span> &lt;&lt; f[i] &lt;&lt;( (i==k)?<span class="string">'\n'</span>:<span class="string">' '</span>); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 题目集锦 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 倍增 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> STL </tag>
            
            <tag> DP </tag>
            
            <tag> 构造 </tag>
            
            <tag> FFT </tag>
            
            <tag> 贪心 </tag>
            
            <tag> codeforces </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【HDU-5322】Hope]]></title>
      <url>/hdu5322/</url>
      <content type="html"><![CDATA[<blockquote>
<p>明明是一个代码超短，啥高级东西都不需要的化式子题，硬生生地上了分治FFT</p>
</blockquote>
<a id="more"></a>
<h1 id="题目大意">题目大意</h1>
<p>对于一个排列<span class="math inline">\(P\)</span> , 如果存在最小的<span class="math inline">\(j, j&gt;i, p[j]&gt;p[i]\)</span> , 那么从<span class="math inline">\(i\)</span>向<span class="math inline">\(j\)</span>连一条边, 每个联通分量对答案的贡献是<span class="math inline">\(sz^2\)</span> , 问长度为<span class="math inline">\(n\)</span>的所有排列的总贡献 。</p>
<h1 id="解题报告">解题报告</h1>
<p>从<span class="math inline">\(1\)</span>到<span class="math inline">\(n\)</span>枚举<span class="math inline">\(i\)</span>, 枚举<span class="math inline">\(i\)</span>插入的位置， 显然<span class="math inline">\(i\)</span>会将排列形成的连通图分成前后两部分, 所以可以得到:</p>
<p><span class="math display">\[f[i] = \sum_{j=1}^i C_{i-1}^{j-1} * (j-1)! * j^2 * f[i-j]\]</span></p>
<p>再化一次,</p>
<p><span class="math display">\[f[i] = (i-1)! \sum_{j=1}^{i}j^2 * \frac{f[i-j]}{(i-j)！}\]</span></p>
<p>这样就可以分治fft做了, 但是好像可以继续化简.</p>
<p><span class="math display">\[f[i] = (i-1)! * \sum_{k=1}^{i} \frac{f[k]}{k!} * (i-k)^2\]</span> <span class="math display">\[= (i-1)! * \sum_{k=1}^{i} \frac{f[k]}{k!} * (i^2 - 2k * i +k^2)\]</span></p>
<p>令 <span class="math inline">\(A[k]=\frac{f[k]}{k!}, B[k] = \frac{f[k]*k}{k!}, C[k] = \frac{f[k]*k^2}{k!}\)</span> , 就可以<span class="math inline">\(O(1)\)</span>得到<span class="math inline">\(f[i]\)</span> .</p>
<p>显然， <span class="math inline">\(A, B, C\)</span>可以通过<span class="math inline">\(O(1)\)</span>的递推得到。</p>
<p>所以复杂度是<span class="math inline">\(O(n)\)</span> .</p>
<h1 id="代码">代码</h1>
<ul>
<li>FFT</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100001</span>,p=<span class="number">998244353</span>;</div><div class="line"><span class="keyword">int</span> dp[N], fac[N], inv[N], n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fast</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(; k; k &gt;&gt;= <span class="number">1</span>, x = <span class="number">1L</span>L*x*x%p)</div><div class="line">		<span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = <span class="number">1L</span>L*ans*x%p;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">	fac[<span class="number">0</span>] = inv[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt; N; ++i)</div><div class="line">		fac[i] = <span class="number">1L</span>L * fac[i<span class="number">-1</span>] * i % p;</div><div class="line">	inv[N<span class="number">-1</span>] = fast(fac[N<span class="number">-1</span>], p<span class="number">-2</span>); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=N<span class="number">-2</span>; i; --i) </div><div class="line">		inv[i] = <span class="number">1L</span>L * inv[i+<span class="number">1</span>] * (i+<span class="number">1</span>) % p; </div><div class="line">	<span class="keyword">int</span> sum1=<span class="number">0</span>, sum2=<span class="number">0</span>, sum3=<span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;N; ++i)&#123;</div><div class="line">		<span class="keyword">if</span>(!i)	dp[i]=<span class="number">1</span>;</div><div class="line">		<span class="keyword">else</span> dp[i]=<span class="number">1L</span>L*fac[i<span class="number">-1</span>]*((<span class="number">1L</span>L*i*i%p*sum1%p - <span class="number">2l</span>l*i*sum2%p + sum3)%p+p)%p;</div><div class="line">		sum1 = (sum1 + <span class="number">1L</span>L*dp[i]*inv[i])%p;</div><div class="line">		sum2 = (sum2 + <span class="number">1L</span>L*i*dp[i]%p*inv[i])%p;</div><div class="line">		sum3 = (sum3 + <span class="number">1L</span>L*i*i%p*dp[i]%p*inv[i])%p;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	solve();</div><div class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n]);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>更好的做法</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100001</span>,p=<span class="number">998244353</span>;</div><div class="line"><span class="keyword">int</span> dp[N], fac[N], inv[N], n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fast</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(; k; k &gt;&gt;= <span class="number">1</span>, x = <span class="number">1L</span>L*x*x%p)</div><div class="line">		<span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = <span class="number">1L</span>L*ans*x%p;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">	fac[<span class="number">0</span>] = inv[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i &lt; N; ++i)</div><div class="line">		fac[i] = <span class="number">1L</span>L * fac[i<span class="number">-1</span>] * i % p;</div><div class="line">	inv[N<span class="number">-1</span>] = fast(fac[N<span class="number">-1</span>], p<span class="number">-2</span>); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=N<span class="number">-2</span>; i; --i) </div><div class="line">		inv[i] = <span class="number">1L</span>L * inv[i+<span class="number">1</span>] * (i+<span class="number">1</span>) % p; </div><div class="line">	<span class="keyword">int</span> sum1=<span class="number">0</span>, sum2=<span class="number">0</span>, sum3=<span class="number">0</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;N; ++i)&#123;</div><div class="line">		<span class="keyword">if</span>(!i)	dp[i]=<span class="number">1</span>;</div><div class="line">		<span class="keyword">else</span> dp[i]=<span class="number">1L</span>L*fac[i<span class="number">-1</span>]*((<span class="number">1L</span>L*i*i%p*sum1%p - <span class="number">2l</span>l*i*sum2%p + sum3)%p+p)%p;</div><div class="line">		sum1 = (sum1 + <span class="number">1L</span>L*dp[i]*inv[i])%p;</div><div class="line">		sum2 = (sum2 + <span class="number">1L</span>L*i*dp[i]%p*inv[i])%p;</div><div class="line">		sum3 = (sum3 + <span class="number">1L</span>L*i*i%p*dp[i]%p*inv[i])%p;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	solve();</div><div class="line">	<span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[n]);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FFT </tag>
            
            <tag> 递推 </tag>
            
            <tag> CDQ分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【HDU 5730】Shell Necklace]]></title>
      <url>/hdu5730/</url>
      <content type="html"><![CDATA[<blockquote>
<p>做一道分治FFT的板子题。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目大意">题目大意</h1>
<p>将 <span class="math inline">\(n\)</span> 个数的序列分成若干个部分, 已知连续的长度为 <span class="math inline">\(i\)</span> 的部分, 方案数是 <span class="math inline">\(a[i]\)</span> , 问总方案数.</p>
<h1 id="解题报告">解题报告</h1>
<p>设长度为 <span class="math inline">\(n\)</span> 的方案数为 <span class="math inline">\(f[n]\)</span> , 那么 <span class="math inline">\(f[i] = \sum f[j] * a[i-j]\)</span> ,</p>
<p>这个是个裸题, 分治FFT, 应该说是CDQ + FFT, 因为 <span class="math inline">\(f_j,(j &lt; i)\)</span> 对 <span class="math inline">\(i\)</span> 有等价的贡献;</p>
<p>在处理区间 <span class="math inline">\([l, r]\)</span> 时, 先递归处理<span class="math inline">\([l, mid]\)</span>, 得到 <span class="math inline">\(f[l...mid]\)</span> ;</p>
<p>令 <span class="math inline">\(A(i) = a(i)\)</span> , <span class="math inline">\(B(i) = f[i+l]\)</span> , 做长度为 <span class="math inline">\(r-l+1\)</span> 的卷积.</p>
<p>实际上应该做 <span class="math inline">\(r-l+1 + mid-l + 1\)</span> 的卷积, 因为需要得到的<span class="math inline">\(f[mid+1...r]\)</span> 对应 <span class="math inline">\(F[mid -l + 1...r-l+1]\)</span> 这部分的结果不会受到多项式乘法溢出结果的影响.</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (register int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (register int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; x &lt;&lt; endl; </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200100</span>; </div><div class="line"><span class="keyword">const</span> ff pi = <span class="built_in">acos</span>(<span class="number">-1</span>); </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">313</span>; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmx</span> &#123;</span> </div><div class="line">	ff x, y; </div><div class="line">	cmx(ff x = <span class="number">0</span>, ff y = <span class="number">0</span>) </div><div class="line">		:x(x), y(y) &#123;&#125;</div><div class="line">	cmx <span class="keyword">operator</span> + (<span class="keyword">const</span> cmx &amp; b) <span class="keyword">const</span> &#123; </div><div class="line">		<span class="keyword">return</span> cmx(x + b.x, y + b.y); </div><div class="line">	&#125; </div><div class="line">	cmx <span class="keyword">operator</span> - (<span class="keyword">const</span> cmx &amp; b) <span class="keyword">const</span> &#123; </div><div class="line">		<span class="keyword">return</span> cmx(x - b.x, y - b.y); </div><div class="line">	&#125; </div><div class="line">	cmx <span class="keyword">operator</span> * (<span class="keyword">const</span> cmx &amp; b) <span class="keyword">const</span> &#123; </div><div class="line">		<span class="keyword">return</span> cmx(x*b.x - y * b.y, x*b.y + y*b.x);</div><div class="line">	&#125;</div><div class="line">&#125; _[N], __[N]; </div><div class="line"></div><div class="line"><span class="keyword">int</span> n, a[N], _n, dp[N], re[N]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dft</span><span class="params">(cmx *a, <span class="keyword">int</span> f = <span class="number">1</span>)</span> </span>&#123;</div><div class="line"> 	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i =<span class="number">0</span> ; i &lt; _n; ++i) </div><div class="line"> 		<span class="keyword">if</span> (i &lt; re[i]) swap(a[i], a[re[i]]); </div><div class="line"> 	cmx x, y; </div><div class="line"> 	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> m = <span class="number">1</span>; m &lt; _n; m &lt;&lt;= <span class="number">1</span>) &#123;</div><div class="line"> 	 	cmx wn = cmx(<span class="built_in">cos</span>(pi/m), f * <span class="built_in">sin</span>(pi/m)); </div><div class="line"> 	 	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _n; i += m &lt;&lt; <span class="number">1</span>) &#123; </div><div class="line"> 	 		cmx w = cmx(<span class="number">1</span>, <span class="number">0</span>); </div><div class="line"> 	 		<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123; </div><div class="line"> 	 			x = a[i+j], y = w*a[i+j+m]; </div><div class="line"> 	 			a[i+j]=x+y, a[i+j+m]=x-y; </div><div class="line"> 	 			w = w * wn; </div><div class="line"> 	 		&#125; </div><div class="line"> 	 	&#125;</div><div class="line"> 	&#125; </div><div class="line"> 	</div><div class="line"> 	<span class="keyword">if</span> (f == <span class="number">-1</span>) &#123; </div><div class="line"> 		REP(i, _n) a[i].x /= (ff)_n; </div><div class="line"> 	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (l == r) <span class="keyword">return</span>; </div><div class="line">	<span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; </div><div class="line">	</div><div class="line">	solve(l, mid); </div><div class="line">	</div><div class="line">	<span class="keyword">int</span> len = r - l + <span class="number">1</span>; </div><div class="line">	_n = <span class="number">1</span>; <span class="keyword">for</span> (;_n &lt;= (len); _n &lt;&lt;= <span class="number">1</span>); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i &lt; _n; ++i) &#123; </div><div class="line">		re[i] = j; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> k = _n&gt;&gt;<span class="number">1</span>; (j^=k) &lt; k; k&gt;&gt;=<span class="number">1</span>);</div><div class="line">	&#125; </div><div class="line"><span class="comment">//	DEBUG(_n);</span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;_n; ++i) </div><div class="line">		_[i] = __[i] = cmx(<span class="number">0</span>, <span class="number">0</span>); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=l; i&lt;=mid; ++i) </div><div class="line">		_[i-l] = cmx(dp[i], <span class="number">0</span>); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>; i &lt; len; ++i) </div><div class="line">		__[i] = cmx(a[i], <span class="number">0</span>);</div><div class="line"><span class="comment">//	DEBUG(_[0].x);   DEBUG(__[0].x); </span></div><div class="line">	dft(_, <span class="number">1</span>), dft(__, <span class="number">1</span>); </div><div class="line">	REP(i, _n) _[i] = _[i] * __[i]; </div><div class="line">	dft(_, <span class="number">-1</span>); </div><div class="line"><span class="comment">//	DEBUG(_[1].x); </span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = mid+<span class="number">1</span>; i &lt;= r; ++i) &#123;</div><div class="line">		dp[i] += (<span class="keyword">int</span>)(_[i-l].x + <span class="number">0.5</span>); </div><div class="line">		dp[i] %= p; </div><div class="line">	&#125; </div><div class="line"><span class="comment">//	DEBUG(dp[1]); </span></div><div class="line">	solve(mid + <span class="number">1</span>, r); </div><div class="line">&#125; </div><div class="line">	 </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</div><div class="line">	 	<span class="keyword">if</span> (!n) <span class="keyword">break</span>; </div><div class="line">	 	<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a)); </div><div class="line">	 	<span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp)); </div><div class="line">	 	FORU(i, <span class="number">1</span>, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]), a[i] %= p; </div><div class="line">	 	dp[<span class="number">0</span>] = <span class="number">1</span>; </div><div class="line">	 	solve(<span class="number">0</span>, n);</div><div class="line">	 	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,  dp[n]); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FFT </tag>
            
            <tag> CDQ分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【UVA 12633】Super Rooks on Chessboard]]></title>
      <url>/uva12633/</url>
      <content type="html"><![CDATA[<blockquote>
<p>好像没怎么在UVA上做过题。。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目大意">题目大意</h1>
<p>每个黑点可以使所在的行列左上右下对角线不可用…问剩下多少点可用.</p>
<h1 id="解题报告">解题报告</h1>
<p>首先, 可以光看行列, 得到剩下哪些行列可用. 因为左上右下对角线可以通过 <span class="math inline">\(x+y\)</span> 表示一发, 所以记录每个 <span class="math inline">\(x+y\)</span> 有多少暂时合法的行列组合.</p>
<p>因为<span class="math inline">\(f[x+y] = \sum f[x]*f[y]\)</span> , 所以用FFT大力跑一些, 然后把合法的<span class="math inline">\(x+y\)</span>对应的方案数求和, 就得到答案了.</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; (#x)  &lt;&lt; <span class="meta-string">' '</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200100</span>; </div><div class="line"><span class="keyword">const</span> ff pi = <span class="built_in">acos</span>(<span class="number">-1</span>); </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmx</span> &#123;</span></div><div class="line"> 	ff x, y; </div><div class="line"> 	cmx(ff x = <span class="number">0</span>, ff y = <span class="number">0</span>) </div><div class="line"> 		:x(x), y(y) &#123;&#125;</div><div class="line"> 	cmx <span class="keyword">operator</span> + (<span class="keyword">const</span> cmx &amp;b) <span class="keyword">const</span> &#123;</div><div class="line"> 	 	<span class="keyword">return</span> cmx(x + b.x, y + b.y); </div><div class="line"> 	&#125;</div><div class="line"> 	cmx <span class="keyword">operator</span> - (<span class="keyword">const</span> cmx &amp;b) <span class="keyword">const</span> &#123; </div><div class="line"> 		<span class="keyword">return</span> cmx(x - b.x, y - b.y); </div><div class="line"> 	&#125;</div><div class="line"> 	cmx <span class="keyword">operator</span> * (<span class="keyword">const</span> cmx &amp;b) <span class="keyword">const</span> &#123; </div><div class="line"> 		<span class="keyword">return</span> cmx(x*b.x - y*b.y, x*b.y + y*b.x);</div><div class="line"> 	&#125; </div><div class="line">&#125; A[N], B[N]; </div><div class="line"> </div><div class="line"> 		 </div><div class="line"><span class="keyword">int</span> r, c, n, re[N], T, _n; </div><div class="line"><span class="keyword">bool</span> ro[N], co[N], xy[N]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch = getchar(); </div><div class="line">	<span class="keyword">for</span> (;ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar()); </div><div class="line">	<span class="keyword">for</span> (x = <span class="number">0</span>; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar())</div><div class="line">	 	x = x * <span class="number">10</span> + ch - <span class="number">48</span>;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(cmx *a, <span class="keyword">int</span> f = <span class="number">1</span>)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _n; ++i) </div><div class="line">		<span class="keyword">if</span> (i &lt; re[i]) swap(a[i], a[re[i]]); </div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt; _n; m &lt;&lt;= <span class="number">1</span>) &#123;</div><div class="line">		cmx wn = cmx(<span class="built_in">cos</span>(pi / m), f * <span class="built_in">sin</span>(pi/m)); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _n; i += m &lt;&lt; <span class="number">1</span>) &#123; </div><div class="line">			cmx w = cmx(<span class="number">1</span>, <span class="number">0</span>); </div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123; </div><div class="line">				cmx x = a[i+j], y = a[i+j+m]*w; </div><div class="line">				a[i+j]=x+y, a[i+j+m]=x-y; </div><div class="line">				w = w * wn; </div><div class="line">			&#125; </div><div class="line">		&#125; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (f == <span class="number">-1</span>) </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _n; ++i) </div><div class="line">			a[i].x /= (ff)_n; </div><div class="line">&#125; </div><div class="line"></div><div class="line">			</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> test)</span> </span>&#123; </div><div class="line">	<span class="built_in">memset</span>(A, <span class="number">0</span>, <span class="keyword">sizeof</span>(A)); </div><div class="line">	<span class="built_in">memset</span>(B, <span class="number">0</span>, <span class="keyword">sizeof</span>(B)); </div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r; ++i) </div><div class="line">		<span class="keyword">if</span> (!ro[i]) A[i].x = <span class="number">1</span>;<span class="comment">// cout &lt;&lt; i &lt;&lt; ' ';</span></div><div class="line"><span class="comment">//	cout &lt;&lt; endl;  </span></div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; ++i) 	</div><div class="line">		<span class="keyword">if</span> (!co[i]) B[i].x = <span class="number">1</span>;<span class="comment">// cout &lt;&lt; i &lt;&lt; ' ';</span></div><div class="line"><span class="comment">//	cout &lt;&lt; endl; </span></div><div class="line">	 </div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (_n = <span class="number">1</span>; _n &lt; (r+c); _n &lt;&lt;= <span class="number">1</span>); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i &lt; _n; ++i) &#123; </div><div class="line">		re[i] = j; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k=_n&gt;&gt;<span class="number">1</span>; (j ^= k) &lt; k; k&gt;&gt;=<span class="number">1</span>);</div><div class="line">	&#125; </div><div class="line">	</div><div class="line"><span class="comment">//	DEBUG(_n); </span></div><div class="line">	fft(A, <span class="number">1</span>), fft(B, <span class="number">1</span>); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; _n; ++i) </div><div class="line">		A[i] = A[i] * B[i]; </div><div class="line">	fft(A, <span class="number">-1</span>); </div><div class="line">	</div><div class="line">	ll ans = <span class="number">0</span>; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; _n; ++i) </div><div class="line">		<span class="keyword">if</span> (!xy[i]) ans += (ll)(A[i].x + <span class="number">0.5</span>); </div><div class="line">	</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"Case %d: %lld\n"</span>, test, ans); </div><div class="line">&#125; </div><div class="line"></div><div class="line">			</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	in(T); </div><div class="line">	FORU(I, <span class="number">1</span>, T) &#123;</div><div class="line"> 		<span class="built_in">memset</span>(ro, <span class="number">0</span>, <span class="keyword">sizeof</span>(ro)); </div><div class="line"> 		<span class="built_in">memset</span>(co, <span class="number">0</span>, <span class="keyword">sizeof</span>(co)); </div><div class="line"> 		<span class="built_in">memset</span>(xy, <span class="number">0</span>, <span class="keyword">sizeof</span>(xy)); </div><div class="line"> 		in(r), in(c), in(n); 	</div><div class="line"> 		<span class="keyword">int</span> x, y; </div><div class="line"></div><div class="line"> 		REP(i, n) &#123; </div><div class="line"> 			in(x), in(y), --x, y = c-y; </div><div class="line"> 			ro[x] = <span class="number">1</span>, co[y] = <span class="number">1</span>, xy[x+y] = <span class="number">1</span>; </div><div class="line"> 		&#125;</div><div class="line"> 		</div><div class="line"> 		solve(I); </div><div class="line"> 	&#125; </div><div class="line"> 	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FFT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj3992】[SDOI2015]序列统计]]></title>
      <url>/bzoj3992/</url>
      <content type="html"><![CDATA[<blockquote>
<p>原根与NTT在SDOI中不常见的露面</p>
</blockquote>
<a id="more"></a>
<h1 id="题目大意">题目大意</h1>
<p>集合<span class="math inline">\(S\)</span>中选<span class="math inline">\(n\)</span>次数， 乘积在<span class="math inline">\(mod \ M\)</span>意义下为<span class="math inline">\(x\)</span>的方案数.</p>
<h1 id="解题报告">解题报告</h1>
<p>想办法把乘积转成和， 因为模的是一个质数， 而 <span class="math inline">\([1,M-1]\)</span> 的每一个数都对应原根<span class="math inline">\(r\)</span>的一个幂, 这样就成功的积化和了.</p>
<p>问题变为选<span class="math inline">\(n\)</span>次数， 和为一个数的方案数， 这个用倍增+NTT随便搞搞就好了， 注意的一点是要做循环卷积， 因为下标是有模意义的.</p>
<p>吐槽自己的倍增不如快速幂快？</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (register int i = int(a), nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (register int i = int(a), nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (register int i = 0, nn = int(b); i &lt; b; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; (#x) &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; x &lt;&lt; endl</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">1004535809</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1</span> &lt;&lt; <span class="number">14</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> d = <span class="number">3</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> rd = <span class="number">334845270</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> n, m, _m, _n, X, s, mir[N], re[N];</div><div class="line"><span class="keyword">int</span> a[N], f[N], _w[<span class="number">20</span>], _rw[<span class="number">20</span>], r, rn; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fast</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line"> 	<span class="keyword">int</span> ans = <span class="number">1</span>; </div><div class="line"> 	<span class="keyword">for</span> (; k; k &gt;&gt;= <span class="number">1</span>, x=<span class="number">1L</span>L*x*x%p)</div><div class="line"> 		<span class="keyword">if</span> (k &amp; <span class="number">1</span>) ans = <span class="number">1L</span>L*ans * x % p; </div><div class="line"> 	<span class="keyword">return</span> ans; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar();</div><div class="line">    <span class="keyword">for</span> (; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar());</div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar())</div><div class="line">        x = x * <span class="number">10</span> + ch - <span class="number">48</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DFT</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> f)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; _n; ++i) </div><div class="line">		<span class="keyword">if</span> (i &lt; re[i]) swap(a[i], a[re[i]]); </div><div class="line">	</div><div class="line">	<span class="keyword">register</span> <span class="keyword">int</span> wn, w, i, j, x, y, m, t; </div><div class="line">	<span class="keyword">for</span> (m = <span class="number">1</span>, t=<span class="number">0</span>; m &lt; _n; m&lt;&lt;=<span class="number">1</span>, ++t) &#123;</div><div class="line">		wn = (f==<span class="number">1</span>) ? _w[t] : _rw[t]; </div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; _n; i += m&lt;&lt;<span class="number">1</span>) &#123; </div><div class="line">			w = <span class="number">1</span>; </div><div class="line">			<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; m; ++j) &#123; </div><div class="line">				x = a[i+j], y = <span class="number">1L</span>L*a[i+j+m]*w%p; </div><div class="line">				a[i+j] = x+y, a[i+j+m] = x-y; </div><div class="line">				<span class="keyword">if</span> (a[i+j] &gt;= p) a[i+j] -= p; </div><div class="line">				<span class="keyword">if</span> (a[i+j+m] &lt; <span class="number">0</span>) a[i+j+m] += p;</div><div class="line">				w = <span class="number">1L</span>L*w * wn % p; </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="keyword">if</span> (f == <span class="number">-1</span>) <span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>; i &lt; _n; ++i) </div><div class="line">		a[i] = <span class="number">1L</span>L * a[i] * rn % p; </div><div class="line">&#125; 		</div><div class="line">		</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">one</span><span class="params">()</span> </span>&#123;</div><div class="line">	DFT(f, <span class="number">1</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;_n; ++i) </div><div class="line">		f[i] = <span class="number">1L</span>L*f[i] * a[i] % p; </div><div class="line">	DFT(f, <span class="number">-1</span>); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m<span class="number">-1</span>; ++i) &#123;</div><div class="line">		f[i] = f[i] + f[i+m<span class="number">-1</span>], f[i+m<span class="number">-1</span>]=<span class="number">0</span>; </div><div class="line">		<span class="keyword">if</span> (f[i] &gt;= p) f[i] = f[i] - p; </div><div class="line">	&#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">two</span><span class="params">()</span> </span>&#123;</div><div class="line"> 	DFT(f, <span class="number">1</span>); </div><div class="line"> 	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;_n; ++i) </div><div class="line"> 		f[i] = <span class="number">1L</span>L*f[i] * f[i] % p; </div><div class="line"> 	DFT(f, <span class="number">-1</span>); </div><div class="line"> 	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m<span class="number">-1</span>; ++i) &#123;</div><div class="line">		f[i] = f[i] + f[i+m<span class="number">-1</span>], f[i+m<span class="number">-1</span>]=<span class="number">0</span>; </div><div class="line">		<span class="keyword">if</span> (f[i] &gt;= p) f[i] = f[i] - p; </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">register</span> <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line"> 	<span class="built_in">memset</span>(mir, <span class="number">-1</span>, <span class="keyword">sizeof</span>(mir)); </div><div class="line"> 	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>, ex=<span class="number">0</span>; ex&lt;m<span class="number">-1</span>; i=i*x%m, ++ex) &#123;</div><div class="line">		<span class="keyword">if</span> (mir[i] != <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">		mir[i] = ex;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	in(n), in(m), in(X), in(s); </div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (r=<span class="number">2</span>; !judge(r); ++r); </div><div class="line"></div><div class="line">	<span class="keyword">register</span> <span class="keyword">int</span> x, t=<span class="number">0</span>;  </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=s; ++i) &#123; </div><div class="line">		in(x); <span class="keyword">if</span> (x) ++ a[mir[x]]; </div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	_n = <span class="number">1</span>, _m = (m<span class="number">-1</span>) * <span class="number">2</span>; </div><div class="line">	<span class="keyword">while</span> (_n &lt; _m) _n &lt;&lt;= <span class="number">1</span>, ++t; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;_n; ++i) &#123; </div><div class="line">		re[i] = j; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> k=_n&gt;&gt;<span class="number">1</span>;(j^=k)&lt;k;k&gt;&gt;=<span class="number">1</span>); </div><div class="line">	&#125;  </div><div class="line">	</div><div class="line">	rn = fast(_n, p<span class="number">-2</span>), -- t; </div><div class="line">	_w[t] = fast(d, (p<span class="number">-1</span>)/_n), _rw[t]=fast(rd, (p<span class="number">-1</span>)/_n);</div><div class="line">	<span class="keyword">for</span> (; t; --t) </div><div class="line">		_w[t<span class="number">-1</span>]=<span class="number">1L</span>L* _w[t] * _w[t] % p, _rw[t<span class="number">-1</span>]=<span class="number">1L</span>L*_rw[t]*_rw[t]%p; </div><div class="line"></div><div class="line">	f[<span class="number">0</span>] = <span class="number">1</span>, DFT(a, <span class="number">1</span>);</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>&lt;&lt;<span class="number">29</span>,no=<span class="number">0</span>; i; i&gt;&gt;=<span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (no) two();</div><div class="line">		<span class="keyword">if</span> (i &amp; n) one(), no |= <span class="number">1</span>;</div><div class="line">	&#125; </div><div class="line">	</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, f[ mir[X] ]); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 倍增 </tag>
            
            <tag> FFT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 1453】[Wc]Dface双面棋盘]]></title>
      <url>/bzoj1453/</url>
      <content type="html"><![CDATA[<blockquote>
<p>康复数据结构—线段树+lCT</p>
</blockquote>
<a id="more"></a>
<h1 id="题目大意">题目大意</h1>
<p>黑白棋盘, 操作使 <span class="math inline">\((i, j)\)</span> 变色, 然后查询两种颜色的联通块个数. # 解题报告 Part One</p>
<p>经典动态图问题, 每次操作可以看做将 <span class="math inline">\((i, j)\)</span> 与四周颜色相同的点间的边删除, 并与颜色不相同的点连边;</p>
<p>动态图的做法是使用LCT维护一棵删除时间最大生成树, 因为在一个联通块中, 删除时间较早的边, 在删除时间靠后的边加入后变得没有任何意义;</p>
<p>这个方法的前提是离线, 这个题就是一个离线问题;</p>
<p>先将相邻两点之间的边编号, 然后预处理每条边删除的时间点(我使用了队列), 然后每部操作, 分别进行删边和加边, 维护最大时间生成树;</p>
<p>太久没有打LCT, 使得我的<code>rotate</code>按照<code>splay</code>的套路打的, 结果使得虚父亲向儿子连了边… <img src="/bzoj1453/1.jpg" width="100" height="100"></p>
<p>Part Two</p>
<p>我自己想的naive and slow 的做法…</p>
<p>把每一列看做一个节点, 建线段树, 这个节点要维护一个两侧位置并查集信息和两个颜色的联通个数, 因为容易发现, 相邻节点合并的时候, 联通块合并的情况只和两侧的联通性有关</p>
<p>合并的时候, 新的联通块个数等于两个节点的联通块个数和-合并的联通块个数… <span class="math inline">\(O(n)\)</span> 进行并查集的合并后, 对两侧的并查集信息进行重标号… 总时间复杂度是 <span class="math inline">\(O(n^2logn)\)</span> ;</p>
<h1 id="代码">代码</h1>
<ul>
<li>LCT</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pll;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">210</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[<span class="number">4</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[N][N], n, m, ans[<span class="number">2</span>], poi_edge[N * N][<span class="number">2</span>], poi_id[N][N], cnt;</div><div class="line"><span class="built_in">vector</span>&lt; pii &gt; opera;</div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; on_edge[N * N * <span class="number">2</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp; x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); <span class="keyword">int</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar())</div><div class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar())</div><div class="line">        x = x * <span class="number">10</span> + ch - <span class="number">48</span>;</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">namespace</span> LCT &#123;</div><div class="line">    <span class="keyword">int</span> mn[N * N * <span class="number">3</span>];</div><div class="line">    <span class="keyword">bool</span> rev[N * N * <span class="number">3</span>];</div><div class="line">    <span class="keyword">int</span> f[N * N * <span class="number">3</span>], son[N * N * <span class="number">3</span>][<span class="number">2</span>], <span class="built_in">stack</span>[N * N * <span class="number">2</span>];</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        mn[x] = x;</div><div class="line">        son[x][<span class="number">0</span>] = son[x][<span class="number">1</span>] = f[x] = rev[x] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        x -= n * n, y -= n * n;</div><div class="line">        <span class="keyword">if</span> (x &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span> (y &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span> (on_edge[x].empty()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span> (on_edge[y].empty()) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">return</span> on_edge[x].front() &lt; on_edge[y].front();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">is_root</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (f[x] == <span class="number">0</span>) || (son[f[x]][<span class="number">0</span>] != x &amp;&amp; son[f[x]][<span class="number">1</span>] != x);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">inline</span> <span class="keyword">void</span> _rev(<span class="keyword">int</span> x) &#123;</div><div class="line">        <span class="keyword">if</span> (!x) <span class="keyword">return</span> ;</div><div class="line">        swap(son[x][<span class="number">0</span>], son[x][<span class="number">1</span>]), rev[x] ^= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (rev[x]) &#123;</div><div class="line">            <span class="keyword">if</span> (son[x][<span class="number">0</span>]) _rev( son[x][<span class="number">0</span>] );</div><div class="line">            <span class="keyword">if</span> (son[x][<span class="number">1</span>]) _rev( son[x][<span class="number">1</span>] );</div><div class="line">            rev[x] = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        mn[x] = x;</div><div class="line">        <span class="keyword">if</span> (son[x][<span class="number">0</span>])</div><div class="line">            <span class="keyword">if</span> (compare(mn[son[x][<span class="number">0</span>]], mn[x]))</div><div class="line">                mn[x] = mn[son[x][<span class="number">0</span>]];</div><div class="line">        <span class="keyword">if</span> (son[x][<span class="number">1</span>])</div><div class="line">            <span class="keyword">if</span> (compare(mn[son[x][<span class="number">1</span>]], mn[x]))</div><div class="line">                mn[x] = mn[son[x][<span class="number">1</span>]];</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> y = f[x], z = f[y], d = (son[y][<span class="number">1</span>] == x);</div><div class="line">        son[y][d] = son[x][d^<span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> (son[x][d ^ <span class="number">1</span>]) f[ son[x][d ^ <span class="number">1</span>] ] = y;</div><div class="line">        <span class="keyword">if</span> (!is_root(y)) son[z][ son[z][<span class="number">1</span>] == y] = x;</div><div class="line">        f[x] = z, son[x][d ^ <span class="number">1</span>] = y, f[y] = x;</div><div class="line">        push_up(y);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> top=<span class="number">0</span>, i = x; <span class="built_in">stack</span>[++top] = x;</div><div class="line">        <span class="keyword">while</span> (!is_root(i)) <span class="built_in">stack</span>[++top] = i = f[i];</div><div class="line">        <span class="keyword">while</span> (top) push_down(<span class="built_in">stack</span>[top]), --top;</div><div class="line">        <span class="keyword">for</span> ( ; !is_root(x); rotate(x)) &#123;</div><div class="line">            <span class="keyword">int</span> y = f[x];</div><div class="line">            <span class="keyword">if</span> (!is_root(y)) &#123;</div><div class="line">                <span class="keyword">if</span> ((son[y][<span class="number">1</span>] == x) ^ (son[f[y]][<span class="number">1</span>] == y))</div><div class="line">                    rotate(x);</div><div class="line">                <span class="keyword">else</span> rotate(y);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        push_up(x);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; x; r = x, x = f[x])</div><div class="line">            splay(x), son[x][<span class="number">1</span>] = r, push_up(x);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mkroot</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        access(x), splay(x), _rev(x);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        access(x), splay(x);</div><div class="line">        <span class="keyword">while</span> (son[x][<span class="number">0</span>])  x = son[x][<span class="number">0</span>];</div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        mkroot(x), f[x] = y, access(x);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        mkroot(x),  access(y), splay(y);</div><div class="line">        <span class="keyword">if</span> (son[y][<span class="number">0</span>] != x || son[x][<span class="number">1</span>] != <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        son[y][<span class="number">0</span>] = f[x] = <span class="number">0</span>, push_up(y);</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span>  y)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> rtx = root(x), rty = root(y);</div><div class="line">        <span class="keyword">return</span> rtx == rty;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">legal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= n;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="keyword">int</span> _edge(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> d) &#123;</div><div class="line">    <span class="keyword">int</span> nx = x + dx[d], ny = y + dy[d];</div><div class="line">    <span class="keyword">return</span> min(poi_id[x][y], poi_id[nx][ny])+ n * n + n * n * (d &gt;&gt; <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> pii <span class="title">get_poi</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> d = x &gt; (n * n * <span class="number">2</span>);</div><div class="line">    x = x - (<span class="number">1</span> + d) * n * n;</div><div class="line">    <span class="keyword">return</span> mp(x, (d? x + <span class="number">1</span>: x + n));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _link(<span class="keyword">int</span> x, <span class="keyword">int</span> color) &#123;</div><div class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> LCT;</div><div class="line">    pii tmp = get_poi(x);</div><div class="line">    <span class="keyword">int</span> a = tmp.fi,  b = tmp.se;</div><div class="line">    <span class="keyword">if</span> (!connect(a, b)) &#123;</div><div class="line">        link(a, x);</div><div class="line">        link(b, x);</div><div class="line">        -- ans[color];</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mkroot(a), access(b), splay(b);</div><div class="line">        <span class="keyword">int</span> _x = mn[b];</div><div class="line">        <span class="keyword">if</span> (compare(_x, x)) &#123;</div><div class="line">            pii _tmp = get_poi(_x);</div><div class="line">            <span class="keyword">int</span> _a = _tmp.fi, _b = _tmp.se;</div><div class="line">            cut(_a, _x), cut(_b, _x);</div><div class="line">            link(a, x), link(b, x);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _cut(<span class="keyword">int</span> x, <span class="keyword">int</span> color) &#123;</div><div class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> LCT;</div><div class="line">    pii tmp = get_poi(x);</div><div class="line">    <span class="keyword">int</span> a = tmp.fi, b = tmp.se;</div><div class="line">    <span class="keyword">if</span> (cut(a, x) &amp;&amp; cut(b, x))</div><div class="line">        ++ ans[color];</div><div class="line">    on_edge[x - n * n].pop();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    in(n);</div><div class="line">    FORU(i, <span class="number">1</span>, n) FORU(j, <span class="number">1</span>, n) &#123;</div><div class="line">        in(a[i][j]), poi_id[i][j] = ++cnt;</div><div class="line">    &#125;</div><div class="line">    FORU(i, <span class="number">1</span>, n) FORU(j, <span class="number">1</span>, n) &#123;</div><div class="line">        <span class="keyword">if</span> (i != n) &#123;</div><div class="line">            poi_edge[ poi_id[i][j] ][<span class="number">0</span>] = poi_id[i][j] + n * n;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (j != n) &#123;</div><div class="line">            poi_edge[ poi_id[i][j] ][<span class="number">1</span>] = poi_id[i][j] + n * n * <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="comment">// 点-&gt; 边, 边-&gt; 点</span></div><div class="line">    FORU(i, <span class="number">1</span>, n * n * <span class="number">3</span>) LCT :: build(i);</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; m; <span class="keyword">int</span> x, y, nx, ny;</div><div class="line">    FORU(i, <span class="number">1</span>, m) &#123;</div><div class="line">        in(x), in(y);</div><div class="line">        opera.pb ( mp(x, y) );</div><div class="line">        REP(d, <span class="number">4</span>) &#123;</div><div class="line">            nx = x + dx[d], ny = y + dy[d];</div><div class="line">            <span class="keyword">if</span> (legal(nx, ny))</div><div class="line">                <span class="keyword">if</span> (a[nx][ny] == a[x][y])</div><div class="line">                    on_edge[_edge(x, y, d) - n * n].push(i);</div><div class="line">        &#125;</div><div class="line">        a[x][y] ^= <span class="number">1</span>;</div><div class="line">    &#125;<span class="comment">// 离线, 记录每条边的删除时间;</span></div><div class="line"></div><div class="line"></div><div class="line">    FORU(i, <span class="number">1</span>, n) FORU(j, <span class="number">1</span>, n) REP(d, <span class="number">4</span>) &#123;</div><div class="line">        x = i + dx[d], y = j + dy[d];</div><div class="line">        <span class="keyword">if</span> (legal(x, y) &amp;&amp; a[i][j] == a[x][y])</div><div class="line">            on_edge[_edge(i, j, d) - n * n].push(m + <span class="number">1</span>);</div><div class="line">        ++ d;</div><div class="line">    &#125;<span class="comment">// 逮捕漏网之鱼</span></div><div class="line">    FORD(i, m, <span class="number">1</span>) &#123;</div><div class="line">        x = opera[i - <span class="number">1</span>].fi, y = opera[i - <span class="number">1</span>].se;</div><div class="line">        a[x][y] ^= <span class="number">1</span>;</div><div class="line">    &#125; <span class="comment">// 还原悲剧现场</span></div><div class="line"></div><div class="line">    FORU(i, <span class="number">1</span>, n) FORU(j, <span class="number">1</span>, n) &#123;</div><div class="line">        ans[ a[i][j] ] += <span class="number">1</span>;</div><div class="line">        REP(d, <span class="number">4</span>) &#123;</div><div class="line">            x = i + dx[d], y = j + dy[d];</div><div class="line">            <span class="keyword">if</span> (legal(x, y) &amp;&amp; a[x][y] == a[i][j])</div><div class="line">                _link(_edge(i, j, d), a[i][j]);</div><div class="line">            ++ d;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="comment">// 初始连边</span></div><div class="line">    <span class="keyword">int</span> _x, _y;</div><div class="line">    FORU(i, <span class="number">1</span>, m) &#123;</div><div class="line">        x = opera[i - <span class="number">1</span>].fi, y = opera[i - <span class="number">1</span>].se;</div><div class="line">        REP(d, <span class="number">4</span>) &#123;</div><div class="line">            _x = x + dx[d], _y = y + dy[d];</div><div class="line">            <span class="keyword">if</span> (legal(_x, _y) &amp;&amp; a[_x][_y] == a[x][y])</div><div class="line">                _cut(_edge(x, y, d), a[x][y]);</div><div class="line">        &#125;</div><div class="line">        -- ans[ a[x][y] ], a[x][y] ^= <span class="number">1</span>, ++ ans[ a[x][y] ];</div><div class="line">        REP(d, <span class="number">4</span>) &#123;</div><div class="line">            _x = x + dx[d], _y = y + dy[d];</div><div class="line">            <span class="keyword">if</span> (legal(_x, _y) &amp;&amp; a[_x][_y] == a[x][y])</div><div class="line">                _link(_edge(x, y, d), a[x][y]);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans[<span class="number">1</span>], ans[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>线段树</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">210</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> c[<span class="number">2</span>], f[N*<span class="number">2</span>];</div><div class="line">&#125; T[N*<span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> n, m, i, j, a[N][N], f[N*<span class="number">4</span>], t[N*<span class="number">4</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> f[x]==x ? x : f[x]=F(f[x]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i, j = <span class="number">1</span>;</div><div class="line">    T[x].c[a[p][<span class="number">1</span>]] = <span class="number">1</span>, T[x].c[a[p][<span class="number">1</span>]^<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    T[x].f[<span class="number">1</span>] = T[x].f[<span class="number">1</span>+n] = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">2</span>; i &lt;= n; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(a[p][i] != a[p][j])</div><div class="line">            T[x].c[ a[p][j = i] ]++;</div><div class="line">        T[x].f[i] = T[x].f[i+n] = j;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> p)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> l=x&lt;&lt;<span class="number">1</span>, r=x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</div><div class="line">        T[x].c[i] = T[l].c[i]+T[r].c[i];</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n*<span class="number">2</span>; i++)</div><div class="line">        f[i] = T[l].f[i];</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n*<span class="number">2</span>; i++)</div><div class="line">        f[i+n*<span class="number">2</span>] = T[r].f[i] + n*<span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">if</span>(a[p][i] == a[p+<span class="number">1</span>][i] &amp;&amp; F(i+n) != F(i+n*<span class="number">2</span>))</div><div class="line">            T[x].c[a[p][i]]--,f[f[i+n]] = f[i+n*<span class="number">2</span>];</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n*<span class="number">4</span>; i++)&#123;</div><div class="line">        f[i] = F(i);</div><div class="line">        <span class="keyword">if</span> (i &lt;= n) t[f[i]] = i;</div><div class="line">        <span class="keyword">if</span> (i &gt; n*<span class="number">3</span>) t[f[i]] = i-n*<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) T[x].f[i] = t[f[i]];</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++) T[x].f[i+n] = t[f[i+n*<span class="number">3</span>]];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(a==b) &#123;cal(x,a);<span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">int</span> mid = (a+b) &gt;&gt; <span class="number">1</span>;</div><div class="line">    build(x &lt;&lt; <span class="number">1</span>, a, mid);</div><div class="line">    build(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid+<span class="number">1</span>, b);</div><div class="line">    up(x , mid);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(a==b) &#123;cal(x,a);<span class="keyword">return</span>;&#125;</div><div class="line">    <span class="keyword">int</span> mid = (a+b)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(c &lt;= mid) change(x &lt;&lt; <span class="number">1</span>, a, mid, c);</div><div class="line">    <span class="keyword">else</span> change(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span> , b , c);</div><div class="line">    up(x, mid);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n; i++)</div><div class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>; j &lt;= n; j++)</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</div><div class="line">    build(<span class="number">1</span>, <span class="number">1</span>, n);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</div><div class="line">    <span class="keyword">while</span> (m--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;i, &amp;j);</div><div class="line">        a[i][j] ^= <span class="number">1</span>,change(<span class="number">1</span> , <span class="number">1</span> , n , i);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, T[<span class="number">1</span>].c[<span class="number">1</span>], T[<span class="number">1</span>].c[<span class="number">0</span>]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LCT </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj3309】DZY Loves Math]]></title>
      <url>/bzoj3309/</url>
      <content type="html"><![CDATA[<blockquote>
<p>龙队长和yveh屠杀无辜数论题的帮凶…</p>
</blockquote>
<a id="more"></a>
<h1 id="题目大意">题目大意</h1>
<p>定义 <span class="math inline">\(f(n)\)</span> 为 <span class="math inline">\(n\)</span> 所含质因子的最大幂指数, 给定正整数 <span class="math inline">\(a,b\)</span> ，求 <span class="math inline">\(\displaystyle \sum_{i=1}^{a} \sum_{j=1}^{b} f(gcd(i, j))\)</span> # 解题报告 首先化简式子…设 <span class="math inline">\(a \leqslant b\)</span> , <span class="math display">\[\displaystyle \sum_{i=1}^{a} \sum_{j=1}^{b} f(gcd(i, j)) = \sum_{i=1}^{a}f[i] \sum_{x=1}^{\lfloor \frac{a}{i} \rfloor} \sum_{y=1}^{\lfloor \frac{b}{i} \rfloor}[(x, y)=1]\]</span> <span class="math display">\[= \sum_{i=1}^{a}f[i] \sum_{d=1}^{\lfloor \frac{a}{i} \rfloor} \mu(d) \lfloor \frac{a}{id} \rfloor \lfloor \frac{b}{id} \rfloor\]</span> <span class="math display">\[= \sum_{k=1}^{n} \sum_{d|k} \mu(d) f(\frac{k}{d}) \lfloor \frac{a}{k} \rfloor \lfloor \frac{b}{k} \rfloor\]</span> 上面这个式子, <span class="math inline">\(\lfloor \frac{a}{k} \rfloor \lfloor \frac{b}{k} \rfloor\)</span> 的取值只有 <span class="math inline">\(4 \sqrt{n}\)</span> 个, 所以需要筛出 <span class="math inline">\(\mu \times f\)</span> , 就可以得到 <span class="math inline">\(O(q \sqrt{a})\)</span> 的做法; <br> 首先, 利用 <span class="math inline">\(\mu\)</span> 的性质, <span class="math inline">\(\mu(p^k, k &gt; 1) = 0\)</span> , 所以, 产生贡献的 <span class="math inline">\(\mu(d)f(n/d)\)</span> 中, <span class="math inline">\(d\)</span> 的每个质因子的幂指数为 <span class="math inline">\(0, 1\)</span> ;<br>
考虑 <span class="math inline">\(f(d)\)</span> 的意义是最大幂指数, 所以将 <span class="math inline">\(n\)</span> 质因数分解得到 <span class="math inline">\(\prod p_i^{k_i}\)</span> , 设最大幂指数为 <span class="math inline">\(k_m\)</span> , 则质因数可以分为幂指数为 <span class="math inline">\(k_m\)</span> 的, 和幂指数小于 <span class="math inline">\(k_m\)</span> 的…<br> 对 <span class="math inline">\(\mu \times f\)</span> 产生贡献的 <span class="math inline">\(k\)</span> , 显然, 是对每个质因数进行不选或者选一个的抉择, 不妨分为在幂指数为 <span class="math inline">\(k_m\)</span> 的质因数中做抉择和在其他质因数中做抉择两部分.<br> 利用二项式定理, <span class="math inline">\(\displaystyle \sum_{i=0}^{n} (-1)^{i}C_n^i = 0\)</span>, 不论在幂指数为 <span class="math inline">\(k_m\)</span> 的质因数中做怎样的抉择, 在其他质因数中作抉择形成的 <span class="math inline">\(\mu\)</span> 会使得贡献为 <span class="math inline">\(0\)</span> , 所以得到重要结论, <span class="math inline">\(u \times f\)</span> 不为 <span class="math inline">\(0\)</span> 的数, 所有质因子的幂指数相同;<br> 所以现在只关心幂指数相同的质因子组成的数, 仍然根据二项式定理, 如果不论怎么选 <span class="math inline">\(d\)</span> , <span class="math inline">\(f(n/d) = k_m\)</span> 的话, <span class="math inline">\((\mu \times f)(n) = 0\)</span> , 但是, 如果 <span class="math inline">\(d\)</span> 选择所有的质因子, <span class="math inline">\(f(n/d) = k_m - 1\)</span> , 根据二项式系数的正负, 如果质因子个数为奇数, <span class="math inline">\((\mu \times f)(n) = 1\)</span> , 否则 <span class="math inline">\((\mu \times f)(n) = -1\)</span> ;<br> 现在可以筛 <span class="math inline">\((\mu \times f)\)</span> 了, yveh 和 龙队分别筛了 <span class="math inline">\(5\)</span> 和 <span class="math inline">\(3\)</span> 个量, 我不是很会他们的做法…我的做法是先只筛 <span class="math inline">\(k_m = 1\)</span> 的数, 然后它的幂的 <span class="math inline">\(f\)</span> 与它相同, 直接赋值.. 复杂度是 <span class="math inline">\(O(n + sq(n))\)</span> , <span class="math inline">\(sq(n)\)</span> 是 <span class="math inline">\([1, n]\)</span> 中的完全 <span class="math inline">\(k\)</span> 次方数;<br> 有了 <span class="math inline">\(\mu \times f\)</span> , 可以暴力分块求答案了.. <img src="/bzoj3309/1.jpg" alt="激烈鼓掌"></p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10000001</span>;</div><div class="line"></div><div class="line"><span class="keyword">int</span> f[N], n, prime[<span class="number">2000100</span>], test, pn;</div><div class="line"><span class="keyword">bool</span> no_prime[N];</div><div class="line"><span class="keyword">char</span> *cp = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">1000000</span>);</div><div class="line"><span class="keyword">char</span> *os = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">1000000</span>), *ot = os;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (; *cp &lt; <span class="string">'0'</span> || *cp &gt; <span class="string">'9'</span>; cp ++)</div><div class="line">        <span class="keyword">if</span> (*cp == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; *cp &gt;= <span class="string">'0'</span> &amp;&amp; *cp &lt;= <span class="string">'9'</span>; cp ++)</div><div class="line">        x = x * <span class="number">10</span> + *cp - <span class="number">48</span>;</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(ll x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x) out(x / <span class="number">10</span>), *ot ++ = x % <span class="number">10</span> + <span class="string">'0'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(ll &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>) *ot++ = <span class="string">'0'</span>;</div><div class="line">    <span class="keyword">else</span> out(x);</div><div class="line">    *ot ++ = <span class="string">'\n'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">euler</span><span class="params">()</span> </span>&#123;</div><div class="line">    f[<span class="number">1</span>] = <span class="number">0</span>, no_prime[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    FORU(i, <span class="number">2</span>, N - <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!no_prime[i]) &#123;</div><div class="line">            prime[++pn] = i;</div><div class="line">            f[i] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; prime[j] * i &lt; N &amp;&amp; j &lt;= pn; ++j) &#123;</div><div class="line">            no_prime[i * prime[j]] = <span class="number">1</span>;</div><div class="line">            <span class="keyword">if</span> (i % prime[j]) &#123;</div><div class="line">                f[i * prime[j]] = -f[i];</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    FORU(i, <span class="number">1</span>, <span class="number">3162</span>)</div><div class="line">        <span class="keyword">if</span> (f[i]) <span class="keyword">for</span> (ll j = <span class="number">1L</span>L * i * i; j &lt; N; j *= i)</div><div class="line">            f[j] = f[i];</div><div class="line">    FORU(i, <span class="number">2</span>, N - <span class="number">1</span>)</div><div class="line">        f[i] += f[i - <span class="number">1</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a &gt; b) swap(a, b);</div><div class="line">    ll ans = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j; i &lt;= a; i = j + <span class="number">1</span>) &#123;</div><div class="line">        j = min(a/(a/i), b/(b/i));</div><div class="line">        ans += <span class="number">1L</span>L * (f[j] - f[i<span class="number">-1</span>]) * (a/i) * (b/i);</div><div class="line">    &#125;</div><div class="line">    print(ans);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    fread(cp, <span class="number">1</span>, <span class="number">1000000</span>, <span class="built_in">stdin</span>);</div><div class="line">    euler();</div><div class="line">    in(test);  <span class="keyword">int</span> a, b;</div><div class="line">    <span class="keyword">while</span> (test --) &#123;</div><div class="line">        in(a), in(b);</div><div class="line">        query(a, b) ;</div><div class="line">    &#125;</div><div class="line">    fwrite(os, <span class="number">1</span>, ot - os, <span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="原题信息">原题信息</h1>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3309" target="_blank" rel="external">题目链接</a></p>
<body>
<title>
Problem 3309. – DZY Loves Math
</title>
<center>
<h2>
3309: DZY Loves Math
</h2>
<span class="green">Time Limit: </span>20 Sec  <span class="green">Memory Limit: </span>512 MB<br><span class="green">Submit: </span>782  <span class="green">Solved: </span>418<br>[<a href="submitpage.php?id=3309">Submit</a>][<a href="problemstatus.php?id=3309">Status</a>][<a href="bbs.php?id=3309">Discuss</a>]
</center>
<h2>
Description
</h2>
<div class="content">
<p>
<span style="font-size: medium">对于正整数n，定义f(n)为n所含质因子的最大幂指数。例如f(1960)=f(2^3 * 5^1 * 7^2)=3, f(10007)=1, f(1)=0。<br> 给定正整数a,b，求sigma(sigma(f(gcd(i,j)))) (i=1..a, j=1..b)。</span>
</p>
<p>
</p>
</div>
<h2>
Input
</h2>
<div class="content">
<p>
<span style="font-size: medium">第一行一个数T，表示询问数。<br> 接下来T行，每行两个数a,b，表示一个询问。</span>
</p>
<p>
</p>
</div>
<h2>
Output
</h2>
<div class="content">
<p>
<span style="font-size: medium">对于每一个询问，输出一行一个非负整数作为回答。</span>
</p>
<p>
</p>
</div>
<h2>
Sample Input
</h2>
<pre><code>        &lt;div class=&quot;content&quot;&gt;&lt;span class=&quot;sampledata&quot;&gt;4&lt;br&gt;</code></pre>
10000<br> 7558588 9653114<br> 6514903 4451211<br> 7425644 1189442<br> 6335198 4957<br> 

<h2>
Sample Output
</h2>
<pre><code>        &lt;div class=&quot;content&quot;&gt;&lt;span class=&quot;sampledata&quot;&gt;35793453939901&lt;br&gt;</code></pre>
14225956593420<br> 4332838845846<br> 15400094813

<h2>
HINT
</h2>
<pre><code>        &lt;div class=&quot;content&quot;&gt;&lt;p&gt;&lt;/p&gt;&lt;p&gt;【数据规模】&lt;br&gt;&lt;br&gt;</code></pre>
T&lt;=10000<br><br> 1&lt;=a,b&lt;=10^7
<p></p>
<br>
<p>
</p>
<p>
</p>

<h2>
Source
</h2>
</body>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 筛法 </tag>
            
            <tag> 反演 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 2599】[IOI2011]Race]]></title>
      <url>/bzoj2599/</url>
      <content type="html"><![CDATA[<blockquote>
<p>聪哥和TA爷在做的一道题, 之前好像所有人都当做点分治模板题做的, TA爷用dsu on a tree艹了, 我也更欣赏这个常数优越的做法;</p>
</blockquote>
<a id="more"></a>
<h1 id="题目大意">题目大意</h1>
<p>给一棵树,每条边有权.求一条简单路径,权值和等于<span class="math inline">\(K\)</span>,且边的数量最小.<span class="math inline">\(N &lt;= 200000\)</span>, <span class="math inline">\(K &lt;= 1000000\)</span></p>
<h1 id="解题报告">解题报告</h1>
<p>求满足条件的树的路径, 首先想到的是点分治, 在每个分治块, 从分治重心出发, 可以得到每个点到重心的距离, 并更新答案;</p>
<p>在点分治的过程中可以剪枝, 有两点:①已经经过的距离大于<span class="math inline">\(k\)</span>, 停止<code>dfs</code>, ②已经经过的边数大于<code>ans</code>, 停止<code>dfs</code>;</p>
<p>因为点分治本身不优越的常数, 所以这个做法比较慢(加了剪枝后还比较理想);</p>
<p>给出几个同学使用点分治的解题报告, <a href="http://www.cnblogs.com/DaD3zZ-Beyonder/p/5618633.html" target="_blank" rel="external">dada’s</a> <a href="http://www.cnblogs.com/abclzr/p/5337088.html" target="_blank" rel="external">abclzr’s</a></p>
<p>再次扔出<a href="http://blog.csdn.net/qaq__qaq/article/details/53455462" target="_blank" rel="external">yveh的dsu on the tree</a>, 是这个题常数比较小的一个做法;</p>
<p>极其模板, 路径的长度可以表示为<span class="math inline">\(dis[x] + dis[y] - dis[lca] * 2\)</span>, 所以可以利用记录 <span class="math inline">\(dis\)</span> 来在 <span class="math inline">\(lca\)</span> 处得更新 <code>ans</code>;</p>
<p>每次先将轻儿子子树中的事情处理好, 清空数组, 然后, 处理重儿子的信息, 不清空数组, 将当前点和轻儿子子树的点重新加入数组得到答案;</p>
<p>但是 <span class="math inline">\(dis[x]\)</span> 可以很大, 数组并不能很好存下, 那么我们可以利用模意义, 在 <span class="math inline">\(mod \ k\)</span> 的意义下记录信息, 同时记录原数大小, 更新答案的时候, 需要判断原数是否满足题意;</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200100</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = N;</div><div class="line"></div><div class="line">ll dis[N];</div><div class="line"><span class="keyword">int</span> n, k, dep[N], sz[N], son[N], ans = inf;</div><div class="line"><span class="keyword">int</span> sho[<span class="number">1000000</span>], id[N], cnt, ent[N], out[N];</div><div class="line">vi sta, to[N], v[N];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> ch = getchar(); <span class="keyword">int</span> f = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar())</div><div class="line">        <span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar())</div><div class="line">        x = x * <span class="number">10</span> + ch - <span class="number">48</span>;</div><div class="line">    x = x * f;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> from)</span> </span>&#123;</div><div class="line">    sz[x] = <span class="number">1</span>, son[x] = n, id[++cnt] = x;</div><div class="line">    ent[x] = cnt;</div><div class="line">    REP(i, sz(to[x]))</div><div class="line">        <span class="keyword">if</span> (to[x][i] != from) &#123;</div><div class="line">            dis[to[x][i]] = dis[x] + v[x][i];</div><div class="line">            dep[to[x][i]] = dep[x] + <span class="number">1</span>;</div><div class="line">            dfs(to[x][i], x);</div><div class="line">            sz[x] += sz[to[x][i]];</div><div class="line">            <span class="keyword">if</span> (sz[to[x][i]] &gt; sz[son[x]])</div><div class="line">                son[x] = to[x][i];</div><div class="line">        &#125;</div><div class="line">    out[x] = cnt;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getans</span><span class="params">(ll &amp;di, <span class="keyword">int</span> &amp;de, ll &amp;_di, <span class="keyword">int</span> &amp;_de)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> __di = (_di * <span class="number">2</span> % k - di % k) + k;</div><div class="line">    <span class="keyword">if</span> (__di &gt;= k)  __di -= k;</div><div class="line">    <span class="keyword">if</span> (sho[ __di ] != <span class="number">-1</span> &amp;&amp; dis[sho[__di]] + di -_di * <span class="number">2</span> == k)</div><div class="line">        ans = min(ans, de + dep[sho[__di]] - _de * <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">enter</span><span class="params">(<span class="keyword">int</span> &amp; x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> _di = dis[x] % k;</div><div class="line">    <span class="keyword">if</span> (sho[_di] == <span class="number">-1</span>) sho[_di] = x;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (dis[x] &lt; dis[sho[_di]]) sho[_di] = x;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (dis[x] == dis[sho[_di]] &amp;&amp; dep[x] &lt; dep[sho[_di]])</div><div class="line">            sho[_di] = x;</div><div class="line">    sta.pb(_di);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">smart</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> f, <span class="keyword">bool</span> top)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (son[x] !=  n) &#123;</div><div class="line">        REP(i, sz(to[x])) <span class="keyword">if</span> (to[x][i] ^ f)</div><div class="line">            <span class="keyword">if</span> (to[x][i] ^ son[x])</div><div class="line">                smart(to[x][i], x, <span class="number">1</span>);</div><div class="line">        smart(son[x], x, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    getans(dis[x], dep[x], dis[x], dep[x]);</div><div class="line">    enter(x);</div><div class="line">    REP(i, sz(to[x])) <span class="keyword">if</span> (to[x][i] ^ f)</div><div class="line">        <span class="keyword">if</span> (to[x][i] ^ son[x]) &#123;</div><div class="line">            <span class="keyword">int</span> y = to[x][i];</div><div class="line">            FORU(i, ent[y], out[y])</div><div class="line">                getans(dis[id[i]], dep[id[i]], dis[x], dep[x]);</div><div class="line">            FORU(i, ent[y], out[y])</div><div class="line">                enter(id[i]);</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">if</span> (top) &#123;</div><div class="line">        REP(i, sz(sta)) sho[sta[i]] = <span class="number">-1</span>;</div><div class="line">        sta.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    in(n), in(k);</div><div class="line">    <span class="keyword">int</span> x, y, z;</div><div class="line">    REP(i, n - <span class="number">1</span>) &#123;</div><div class="line">        in(x), in(y), in(z);</div><div class="line">        to[x].pb(y), to[y].pb(x);</div><div class="line">        v[x].pb(z), v[y].pb(z);</div><div class="line">    &#125;</div><div class="line">    dep[<span class="number">0</span>] = <span class="number">1</span>, dfs(<span class="number">0</span>, <span class="number">-1</span>);</div><div class="line">    mmst(sho, <span class="number">-1</span>);</div><div class="line">    smart(<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans == N ? <span class="number">-1</span> : ans);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><span class="math inline">\(MLE\)</span> 了两发, 发现自己的数组范围开大了10倍, 太惨了;</p>
<h1 id="原题信息">原题信息</h1>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2599" target="_blank" rel="external">题目链接</a></p>
<body>
<title>
Problem 2599. – [IOI2011]Race
</title>
<center>
<h2>
2599: [IOI2011]Race
</h2>
<span class="green">Time Limit: </span>70 Sec  <span class="green">Memory Limit: </span>128 MB<br><span class="green">Submit: </span>3006  <span class="green">Solved: </span>877<br>[<a href="submitpage.php?id=2599">Submit</a>][<a href="problemstatus.php?id=2599">Status</a>][<a href="bbs.php?id=2599">Discuss</a>]
</center>
<h2>
Description
</h2>
<div class="content">
<p>
给一棵树,每条边有权.求一条简单路径,权值和等于K,且边的数量最小.N &lt;= 200000, K &lt;= 1000000
</p>
<p>
</p>
</div>
<h2>
Input
</h2>
<div class="content">
<p>
第一行 两个整数 n, k<br> 第二..n行 每行三个整数 表示一条无向边的两端和权值 (注意点的编号从0开始)
</p>
</div>
<h2>
Output
</h2>
<div class="content">
<p>
一个整数 表示最小边数量 如果不存在这样的路径 输出-1
</p>
</div>
<h2>
Sample Input
</h2>
<pre><code>        &lt;div class=&quot;content&quot;&gt;&lt;span class=&quot;sampledata&quot;&gt;4 3&lt;br&gt;</code></pre>
0 1 1<br> 1 2 2<br> 1 3 4<br> 

<h2>
Sample Output
</h2>
<pre><code>        &lt;div class=&quot;content&quot;&gt;&lt;span class=&quot;sampledata&quot;&gt;2&lt;br&gt;</code></pre>


</body>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树链剖分 </tag>
            
            <tag> 树分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 1500】维修数列]]></title>
      <url>/bzoj1500/</url>
      <content type="html"><![CDATA[<blockquote>
<p>网上好像没大有数组版FHQTreap的板子， 我就自己写了一个，模板题， 很短， 一个小时才写好， 码力太弱了；</p>
</blockquote>
<a id="more"></a>
<h1 id="题目大意">题目大意</h1>
<p>一个ZZ数据结构，能够进行这几个操作： 1. 区间覆盖 2. 区间求和 3. 区间翻转 4. 区间插入 5. 区间删除 6. 全局最大连续字段和</p>
<h1 id="解题报告">解题报告</h1>
<p>用FHQTreap写的， 思路很清晰；</p>
<p>FHQTreap的精髓在于<code>split</code>和<code>merge</code>操作，&gt;FHQTreap的精髓在于<code>split</code>和<code>merge</code>操作， <code>split</code>操作比较显然， 是把平衡树沿一个rank切开， <code>merge</code>借鉴了<strong>可并堆</strong>的操作， 但是因为Treap的平衡树特性， 不能像左偏树那样一遍倒；</p>
<p>FHQTreap是从上向下操作的一棵树， 需要像<strong>线段树</strong>一样， 下传先于访问， 当然，<code>merge</code>和<code>split</code>改变树形态的时候， 需要<code>push_up</code>;&lt;</p>
<p>垃圾回收和内存池与<strong>splay</strong>的写法一模一样，程序跑得不快， 但与splay比， 完全没有被卡常的机会；</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> RAND (rand()&lt;&lt;15|rand())</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">1000000000</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">500010</span>; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> l, r, sz, lmx, rmx, tmx, key, v, cov, rev, sm; </div><div class="line">&#125; t[N]; </div><div class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; trash; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch = getchar(); <span class="keyword">int</span> f = <span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span>(; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar())</div><div class="line">		<span class="keyword">if</span> (ch == <span class="string">'-'</span>) f = <span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span> (x = <span class="number">0</span>; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar()) </div><div class="line">		x =  x * <span class="number">10</span> + ch - <span class="number">48</span>;</div><div class="line">	x *= f; </div><div class="line">&#125; </div><div class="line"><span class="keyword">int</span> root, tot; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> val)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (!trash.empty()) &#123;</div><div class="line">		x = trash.front(); trash.pop(); </div><div class="line">	&#125; <span class="keyword">else</span> x = ++tot; </div><div class="line">	t[x].rev = <span class="number">0</span>, t[x].l = t[x].r = <span class="number">0</span>;</div><div class="line">	t[x].key = RAND, t[x].cov = inf;  </div><div class="line">	t[x].v = t[x].sm = t[x].tmx = val; </div><div class="line">	t[x].lmx = t[x].rmx = max(val, <span class="number">0</span>); </div><div class="line">	t[x].sz =  <span class="number">1</span>; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(node &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x.l &amp;&amp; x.r) &#123; </div><div class="line">		x.sz = <span class="number">1</span> + t[x.l].sz + t[x.r].sz; </div><div class="line">		x.sm = x.v + t[x.l].sm + t[x.r].sm; </div><div class="line">		x.tmx = max(t[x.l].tmx, t[x.r].tmx); </div><div class="line">		x.tmx = max(x.tmx, t[x.l].rmx + x.v + t[x.r].lmx); </div><div class="line">		x.lmx = max(t[x.l].lmx, t[x.l].sm + x.v + t[x.r].lmx); </div><div class="line">		x.rmx = max(t[x.r].rmx, t[x.r].sm + x.v + t[x.l].rmx); </div><div class="line">	&#125; <span class="keyword">else</span> </div><div class="line">		<span class="keyword">if</span> (x.l) &#123;</div><div class="line">			x.sz = <span class="number">1</span> + t[x.l].sz;</div><div class="line">			x.sm = x.v + t[x.l].sm;</div><div class="line">			x.tmx = max(t[x.l].tmx, t[x.l].rmx + x.v); </div><div class="line">			x.lmx = max(t[x.l].lmx, t[x.l].sm + x.v); </div><div class="line">			x.lmx = max(<span class="number">0</span>, x.lmx); </div><div class="line">			x.rmx = max(<span class="number">0</span>, x.v + t[x.l].rmx); </div><div class="line">		&#125; <span class="keyword">else</span> </div><div class="line">			<span class="keyword">if</span> (x.r) &#123; </div><div class="line">				x.sz = <span class="number">1</span> + t[x.r].sz; </div><div class="line">				x.sm = x.v + t[x.r].sm; </div><div class="line">				x.tmx = max(t[x.r].tmx, x.v + t[x.r].lmx); </div><div class="line">				x.lmx = max(<span class="number">0</span>, x.v + t[x.r].lmx); </div><div class="line">				x.rmx = max(t[x.r].rmx, x.v + t[x.r].sm); </div><div class="line">				x.rmx = max(<span class="number">0</span>, x.rmx); </div><div class="line">			&#125; <span class="keyword">else</span> &#123; </div><div class="line">				x.sz = <span class="number">1</span>, x.sm = x.tmx = x.v; </div><div class="line">				x.lmx = x.rmx = max(x.v, <span class="number">0</span>); </div><div class="line">			&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reversify</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	swap(t[x].l, t[x].r); </div><div class="line">	swap(t[x].lmx, t[x].rmx); </div><div class="line">	t[x].rev ^= <span class="number">1</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">coverify</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123; </div><div class="line">	t[x].v = v, t[x].sm = t[x].sz * v; </div><div class="line">	t[x].lmx = t[x].rmx = max(<span class="number">0</span>, v*t[x].sz); </div><div class="line">	t[x].tmx = max(v, v * t[x].sz); </div><div class="line">	t[x].cov = v; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(node &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x.rev) &#123; </div><div class="line">		<span class="keyword">if</span> (x.l) reversify(x.l); </div><div class="line">		<span class="keyword">if</span> (x.r) reversify(x.r); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (x.cov != inf) &#123; </div><div class="line">		<span class="keyword">if</span> (x.l) coverify(x.l, x.cov); </div><div class="line">		<span class="keyword">if</span> (x.r) coverify(x.r, x.cov); </div><div class="line">	&#125;</div><div class="line">	x.rev = <span class="number">0</span>, x.cov = inf; </div><div class="line">&#125; 	</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> x, last = <span class="number">0</span>; <span class="keyword">static</span> <span class="keyword">int</span> sta[<span class="number">500010</span>], top; </div><div class="line">	FORU(i, <span class="number">1</span>, n) &#123;</div><div class="line">		newnode(x, a[i]); last = <span class="number">0</span>; </div><div class="line">		<span class="keyword">while</span> (top &amp;&amp; t[sta[top]].key &gt; t[x].key) &#123; </div><div class="line">			push_up(t[sta[top]]), last = sta[top]; </div><div class="line">			sta[top -- ] = <span class="number">0</span>; </div><div class="line">		&#125; </div><div class="line">		<span class="keyword">if</span> (top) t[sta[top]].r = x; </div><div class="line">		t[x].l = last, sta[++top] = x; </div><div class="line">	&#125; 	</div><div class="line">	<span class="keyword">while</span> (top) push_up(t[sta[top --]]) ; </div><div class="line">	<span class="keyword">return</span> sta[<span class="number">1</span>]; </div><div class="line">&#125; </div><div class="line"><span class="function">pii <span class="title">split</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (!x) <span class="keyword">return</span> mp(<span class="number">0</span>, <span class="number">0</span>); </div><div class="line">	push_down(t[x]); pii y;</div><div class="line">	<span class="keyword">int</span> tmp = t[ t[x].l ].sz; </div><div class="line">	<span class="keyword">if</span> (tmp &gt;= k) &#123; </div><div class="line">		y = split(t[x].l, k); </div><div class="line">		t[x].l = y.se, push_up(t[x]); </div><div class="line">		y.se = x; </div><div class="line">	&#125; <span class="keyword">else</span> &#123; </div><div class="line">		y = split(t[x].r, k - tmp - <span class="number">1</span>); </div><div class="line">		t[x].r = y.fi, push_up(t[x]); </div><div class="line">		y.fi = x; </div><div class="line">	&#125;	 	</div><div class="line">	<span class="keyword">return</span> y; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (a * b == <span class="number">0</span>) <span class="keyword">return</span> a + b; </div><div class="line">	push_down(t[a]), push_down(t[b]); </div><div class="line">	<span class="keyword">if</span> (t[a].key &lt; t[b].key) &#123; </div><div class="line">		t[a].r = merge(t[a].r, b); </div><div class="line">		push_up(t[a]); <span class="keyword">return</span> a; </div><div class="line">	&#125; <span class="keyword">else</span> &#123; </div><div class="line">		t[b].l = merge(a, t[b].l); </div><div class="line">		push_up(t[b]); <span class="keyword">return</span> b; </div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">movetotrash</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (!x) <span class="keyword">return</span>; </div><div class="line">	trash.push(x); </div><div class="line">	movetotrash(t[x].l); </div><div class="line">	movetotrash(t[x].r); </div><div class="line">&#125; 			</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> pos, tot; <span class="keyword">static</span> <span class="keyword">int</span> c[<span class="number">500010</span>]; </div><div class="line">	in(pos), in(tot); FORU(i, <span class="number">1</span>, tot) in(c[i]); </div><div class="line">	<span class="keyword">int</span> rt = build(c, tot); </div><div class="line">	pii droot = split(root, pos); </div><div class="line">	root = merge(droot.fi, rt); </div><div class="line">	root = merge(root, droot.se); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">delet</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> pos, tot; in(pos), in(tot); </div><div class="line">	pii dleft = split(root, pos<span class="number">-1</span>); </div><div class="line">	pii dright = split(dleft.se, tot);</div><div class="line">	root = merge(dleft.fi, dright.se); </div><div class="line">	movetotrash(dright.fi); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">same</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> pos, tot, c; in(pos), in(tot), in(c); </div><div class="line">	pii dleft = split(root, pos<span class="number">-1</span>); </div><div class="line">	pii dright = split(dleft.se, tot); </div><div class="line">	coverify(dright.fi, c); </div><div class="line">	dleft.se = merge(dright.fi, dright.se); </div><div class="line">	root = merge(dleft.fi, dleft.se); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> pos, tot; in(pos), in(tot); </div><div class="line">	pii dleft = split(root, pos - <span class="number">1</span>); </div><div class="line">	pii dright = split(dleft.se, tot); </div><div class="line">	reversify(dright.fi); </div><div class="line">	dleft.se = merge(dright.fi, dright.se); </div><div class="line">	root = merge(dleft.fi, dleft.se); </div><div class="line">	</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">getsum</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> pos, tot; in(pos), in(tot); </div><div class="line">	pii dleft = split(root, pos - <span class="number">1</span>); </div><div class="line">	pii dright = split(dleft.se, tot); </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t[dright.fi].sm); </div><div class="line">	dleft.se = merge(dright.fi, dright.se); </div><div class="line">	root = merge(dleft.fi, dleft.se); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maxsum</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t[root].tmx); </div><div class="line">	</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> n, m, a[N]; </div><div class="line">	in(n), in(m); FORU(i, <span class="number">1</span>, n) in(a[i]); </div><div class="line">	root = build(a, n); </div><div class="line">	<span class="keyword">static</span> <span class="keyword">char</span> s[<span class="number">20</span>]; </div><div class="line">	<span class="keyword">while</span> (m--) &#123; </div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); </div><div class="line">		<span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'I'</span>) insert(); </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'D'</span>) delet(); </div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'M'</span> &amp;&amp; s[<span class="number">2</span>] == <span class="string">'K'</span>) same(); </div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'R'</span>) reverse(); </div><div class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'G'</span>) getsum(); </div><div class="line">						<span class="keyword">else</span> maxsum(); </div><div class="line">	&#125; 	</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><br> <br> # 原题 <a href="http://www.lydsy.com/JudgeOnline/problem.php?id=1500" target="_blank" rel="external">题目链接</a></p>
<body>
<title>
Problem 1500. – [NOI2005]维修数列
</title>
<center>
<h2>
1500: [NOI2005]维修数列
</h2>
</center>
<h2>
Description
</h2>
<div class="content">
<p>
<img border="0" src="http://shallwe2000.cc/usr/uploads/2016/12/2824326808.jpg" alt="">
</p>
</div>
<h2>
Input
</h2>
<div class="content">
<p>
输入的第1 行包含两个数N 和M(M ≤20 000)，N 表示初始时数列中数的个数，M表示要进行的操作数目。<br> 第2行包含N个数字，描述初始时的数列。<br> 以下M行，每行一条命令，格式参见问题描述中的表格。<br> 任何时刻数列中最多含有500 000个数，数列中任何一个数字均在[-1 000, 1 000]内。<br> 插入的数字总数不超过4 000 000个，输入文件大小不超过20MBytes。
</p>
</div>
<h2>
Output
</h2>
<div class="content">
<p>
对于输入数据中的GET-SUM和MAX-SUM操作，向输出文件依次打印结果，每个答案（数字）占一行。
</p>
</div>
<h2>
Sample Input
</h2>
<pre><code>        &lt;div class=&quot;content&quot;&gt;&lt;span class=&quot;sampledata&quot;&gt;9 8&lt;br&gt;</code></pre>
2 -6 3 5 1 -5 -3 6 3<br> GET-SUM 5 4<br> MAX-SUM<br> INSERT 8 3 -5 7 2<br> DELETE 12 1<br> MAKE-SAME 3 3 2<br> REVERSE 3 6<br> GET-SUM 5 4<br> MAX-SUM<br> 

<h2>
Sample Output
</h2>
<pre><code>        &lt;div class=&quot;content&quot;&gt;&lt;span class=&quot;sampledata&quot;&gt;-1&lt;br&gt;</code></pre>
10<br> 1<br> 10<br>
</body>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 平衡树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3166】[Heoi2013]Alo]]></title>
      <url>/bzoj3166/</url>
      <content type="html"><![CDATA[<blockquote>
<p>搞了一发可持久化trie树的板子题，一A舒爽</p>
</blockquote>
<a id="more"></a>
<h1 id="题目大意">题目大意</h1>
<p>区间<span class="math inline">\([l, r]\)</span>的次大值为<span class="math inline">\(k\)</span>, 则该区间的值为<span class="math inline">\(max(k \space xor \space a_p | a_p ≠ k , l ≤ p ≤ r)\)</span>; 求所有区间的值的最大值；</p>
<h1 id="解题报告">解题报告</h1>
<p>首先可以找到每个数<span class="math inline">\(a_i\)</span>作为次大值的区间，去除被包含的小区间，可以发现，每个数最多用两个区间就可以表示他作为次大值的区间;</p>
<p>确定每个数的区间， 需要找到他左侧第一个比他大的数<span class="math inline">\(l_1\)</span>, 第二个比他大的数<span class="math inline">\(l_2\)</span>， 以及他右边第一个比他大的数<span class="math inline">\(r_1\)</span> 和第二个比他大的数<span class="math inline">\(r_2\)</span>, 那么两个区间就是<span class="math inline">\((l_2, r_1)\)</span> 和 <span class="math inline">\((l_1, r_2)\)</span>, 这个很显然；</p>
<p>寻找<span class="math inline">\(l_1, l_2, r_1, r_2\)</span>可以通过排序+<code>set</code>搞定；</p>
<p>然后问题变成对于<span class="math inline">\(k\)</span>求区间<span class="math inline">\([l, r]\)</span>中<span class="math inline">\(max(k \space xor \space a_i | l &lt;= i &lt;= r, a_i !=k )\)</span>， 这个是可持久化trie树的裸题；</p>
<h1 id="代码">代码</h1>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> getTw(a, k) ( (a&gt;&gt;k) &amp; 1)</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">51000</span>; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> son[<span class="number">2</span>], sz; </div><div class="line">&#125; t[N * <span class="number">32</span>];</div><div class="line"></div><div class="line"><span class="keyword">int</span> a[N], n, f[N][<span class="number">4</span>], ans, tot, head[N];</div><div class="line"><span class="comment">// p[x][0] left_first, p[x][1] left_second, p[x][2] right_first, p[x][3] right_first;</span></div><div class="line"><span class="keyword">int</span> aAndp[N];  </div><div class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; place; </div><div class="line"><span class="keyword">char</span> *cp = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10000000</span>); </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span>(; *cp &lt; <span class="string">'0'</span> || *cp &gt; <span class="string">'9'</span>; cp++); </div><div class="line">	<span class="keyword">for</span>(x = <span class="number">0</span>; *cp &gt;= <span class="string">'0'</span> &amp;&amp; *cp &lt;= <span class="string">'9'</span>; cp++) </div><div class="line">		x = x * <span class="number">10</span> + *cp - <span class="number">48</span>; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">	<span class="keyword">return</span> a[x] &lt; a[y]; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> f, <span class="keyword">int</span> a, <span class="keyword">int</span> w)</span> </span>&#123; </div><div class="line">	x = ++tot;</div><div class="line">	<span class="keyword">if</span> (f) t[x] = t[f], t[x].sz++;</div><div class="line">	<span class="keyword">else</span> t[x].sz = <span class="number">1</span>; </div><div class="line">	<span class="keyword">if</span> (w &gt;= <span class="number">0</span>) build(t[x].son[getTw(a, w)], t[f].son[getTw(a, w)], a, w<span class="number">-1</span>); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build_trie</span><span class="params">()</span> </span>&#123;</div><div class="line"> 	head[<span class="number">0</span>] = <span class="number">0</span>; </div><div class="line">	FORU(i, <span class="number">1</span>, n) build(head[i], head[i<span class="number">-1</span>], a[i], <span class="number">30</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">trie_ans</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>, d, lson, rson; </div><div class="line">	FORD(k, <span class="number">30</span>, <span class="number">0</span>) &#123;</div><div class="line">		d = getTw(x, k);</div><div class="line">		lson = t[l].son[d^<span class="number">1</span>], rson = t[r].son[d^<span class="number">1</span>];</div><div class="line"> 		<span class="keyword">if</span> (t[rson].sz - t[lson].sz &gt; <span class="number">0</span>) </div><div class="line">			ans |= <span class="number">1</span>&lt;&lt;k, l = lson, r = rson;</div><div class="line">		<span class="keyword">else</span></div><div class="line">			l = t[l].son[d], r = t[r].son[d]; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans; </div><div class="line">&#125; 	</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maxify</span><span class="params">(<span class="keyword">int</span> &amp;ans,<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (x &gt; ans) ans = x; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	fread(cp, <span class="number">1</span>, <span class="number">10000000</span>, <span class="built_in">stdin</span>); 	 </div><div class="line">	in(n); </div><div class="line">	FORU(i, <span class="number">1</span>, n) in(a[i]), aAndp[i] = i;</div><div class="line">	sort(aAndp + <span class="number">1</span>, aAndp + <span class="number">1</span> + n, cmp);</div><div class="line">	<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; :: iterator ps;</div><div class="line">	<span class="keyword">int</span> x, y; </div><div class="line">	FORD(i, n, <span class="number">1</span>) &#123; </div><div class="line">		x = aAndp[i]; </div><div class="line">		ps = place.upper_bound(x); </div><div class="line">		<span class="keyword">if</span> (ps != place.end()) &#123; </div><div class="line">			f[x][<span class="number">2</span>] = *ps, ++ps;</div><div class="line">			<span class="keyword">if</span> (ps != place.end()) f[x][<span class="number">3</span>] = *ps; </div><div class="line">			--ps; </div><div class="line">		&#125; </div><div class="line">		<span class="keyword">if</span> (ps != place.begin()) &#123; </div><div class="line">			--ps, f[x][<span class="number">0</span>] = *ps; </div><div class="line">			<span class="keyword">if</span> (ps != place.begin()) </div><div class="line">				--ps, f[x][<span class="number">1</span>] = *ps; </div><div class="line">		&#125;</div><div class="line">		place.insert(x); </div><div class="line">	&#125; </div><div class="line">	build_trie(); </div><div class="line">	FORU(i, <span class="number">1</span>, n) &#123; </div><div class="line">		<span class="keyword">if</span> (!f[i][<span class="number">2</span>]) f[i][<span class="number">2</span>] = n + <span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (!f[i][<span class="number">3</span>]) f[i][<span class="number">3</span>] = n + <span class="number">1</span>; 	</div><div class="line">		<span class="keyword">if</span> (f[i][<span class="number">0</span>]) maxify(ans, trie_ans(a[i], head[f[i][<span class="number">1</span>]], head[f[i][<span class="number">2</span>] - <span class="number">1</span>]) ); </div><div class="line">		<span class="keyword">if</span> (f[i][<span class="number">2</span>] != n+<span class="number">1</span>) maxify(ans, trie_ans(a[i], head[f[i][<span class="number">0</span>]], head[f[i][<span class="number">3</span>] - <span class="number">1</span>]) ); </div><div class="line">	&#125;</div><div class="line">	<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="原题">原题</h1>
<a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3166" target="_blank" rel="external">题目链接</a>
<body>
<title>
Problem 3166. – [Heoi2013]Alo
</title>
<center>
<h2>
3166: [Heoi2013]Alo
</h2>
<span class="green">Time Limit: </span>20 Sec  <span class="green">Memory Limit: </span>256 MB<br><span class="green">Submit: </span>874  <span class="green">Solved: </span>416<br>[<a href="submitpage.php?id=3166">Submit</a>][<a href="problemstatus.php?id=3166">Status</a>][<a href="bbs.php?id=3166">Discuss</a>]
</center>
<h2>
Description
</h2>
<div class="content">
<p>
<span style="font-size: medium">Welcome to ALO ( Arithmetic and Logistic Online)。这是一个VR MMORPG ，<br> 如名字所见，到处充满了数学的谜题。<br> 现在你拥有n颗宝石，每颗宝石有一个能量密度，记为ai，这些宝石的能量<br> 密度两两不同。现在你可以选取连续的一些宝石（必须多于一个）进行融合，设为  ai, ai+1, …, a j，则融合而成的宝石的能量密度为这些宝石中能量密度的次大值<br> 与其他任意一颗宝石的能量密度按位异或的值，即，设该段宝石能量密度次大值<br> 为k，则生成的宝石的能量密度为max{k xor ap | ap ≠ k , i ≤ p ≤ j}。 <br> 现在你需要知道你怎么选取需要融合的宝石，才能使生成的宝石能量密度最大。 <br> </span>
</p>
</div>
<h2>
Input
</h2>
<div class="content">
<p>
<font size="4">第一行，一个整数 n，表示宝石个数。 <br> 第二行， n个整数，分别表示a1至an，表示每颗宝石的能量密度，保证对于i ≠ j有 ai ≠ aj。 </font>
</p>
</div>
<h2>
Output
</h2>
<div class="content">
<p>
<font size="4">输出一行一个整数，表示最大能生成的宝石能量密度。 <br> </font>
</p>
</div>
<h2>
Sample Input
</h2>
<pre><code>        &lt;div class=&quot;content&quot;&gt;&lt;span class=&quot;sampledata&quot;&gt;5 &lt;br&gt;</code></pre>
9 2 1 4 7 

<h2>
Sample Output
</h2>
<pre><code>        &lt;div class=&quot;content&quot;&gt;&lt;span class=&quot;sampledata&quot;&gt;14 </code></pre>


<h2>
HINT
</h2>
【样例解释】 选择区间[1,5]，最大值为 7 xor 9。 对于 100%的数据有 1 ≤ n ≤ 50000, 0 ≤ ai ≤ 10^9
<p></p>
<hr>
</body>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> STL </tag>
            
            <tag> 可持久化数据结构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj3155】Preprefix sum]]></title>
      <url>/bzoj3155/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这是一道没什么与意思的板子题。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目大意">题目大意</h1>
<p>两个操作：① 修改一个位置的权值； ② 查询前缀和的前缀和； # 解题报告 做的一道<strong>弱智题</strong>；</p>
<ol style="list-style-type: decimal">
<li>可以用<strong>线段树</strong>维护前缀和序列，<span class="math inline">\(a_i\)</span> 对前缀和序列的影响是在<span class="math inline">\([i, n]\)</span>加上<span class="math inline">\(a_i\)</span>, 就是一个区间加，查询时候就是一个区间和；</li>
<li>查询<span class="math inline">\(S_{S_x}\)</span>, 展开看就是 <span class="math inline">\(\Sigma_{i=1}^{x} a_i * (n - i + 1)\)</span>,也就是<span class="math inline">\((x + 1) * \Sigma_{i=1}^{x} a_i - \Sigma_{i=1}^{x} a_i * i\)</span>; 用<strong>bit</strong>分别维护<span class="math inline">\(a_i\)</span>和<span class="math inline">\(a_i * i\)</span>的前缀和；</li>
</ol>
<h1 id="代码">代码</h1>
<ol style="list-style-type: decimal">
<li><p>线段树 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> for1(i, n) for (i = 1; i &lt;= n; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> for0(i, n) for (i = 0; i &lt; n; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> F first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> S second</span></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">101000</span>; </div><div class="line"><span class="comment">//string s; </span></div><div class="line"><span class="keyword">char</span> s[<span class="number">20</span>];</div><div class="line"><span class="keyword">int</span> n, x, m, a[N]; </div><div class="line">ll sm[N &lt;&lt; <span class="number">2</span>], tag[N &lt;&lt; <span class="number">2</span>]; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> ch = getchar(); </div><div class="line">    <span class="keyword">for</span> (; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar()); </div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar())</div><div class="line">        x = x * <span class="number">10</span> + ch - <span class="number">48</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (tag[x]) &#123; </div><div class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>; </div><div class="line">        sm[x &lt;&lt; <span class="number">1</span>] += <span class="number">1L</span>L * (mid - l + <span class="number">1</span>) * tag[x]; </div><div class="line">        sm[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += <span class="number">1L</span>L * (r - mid) * tag[x]; </div><div class="line">        tag[x &lt;&lt; <span class="number">1</span>] += tag[x], tag[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] += tag[x]; </div><div class="line">        tag[x] = <span class="number">0</span>; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">    sm[x] = sm[x &lt;&lt; <span class="number">1</span>] + sm[x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]; </div><div class="line">&#125;    </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> delta)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;</div><div class="line">        sm[x] += <span class="number">1L</span>L * (r-l+<span class="number">1</span>) * delta; </div><div class="line">        tag[x] += delta; </div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; down(x, l, r); </div><div class="line">        <span class="keyword">if</span> (L &lt;= mid) add(x &lt;&lt; <span class="number">1</span>, l, mid, L, R, delta); </div><div class="line">        <span class="keyword">if</span> (R &gt; mid) add(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R, delta); </div><div class="line">        up(x); </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="keyword">return</span> sm[x]; </div><div class="line">    <span class="keyword">else</span> &#123; </div><div class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; ll tmp = <span class="number">0</span>; down(x, l, r); </div><div class="line">        <span class="keyword">if</span> (L &lt;= mid) tmp += sum (x &lt;&lt; <span class="number">1</span>, l, mid, L, R); </div><div class="line">        <span class="keyword">if</span> (R &gt; mid) tmp += sum(x &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, L, R); </div><div class="line">        <span class="keyword">return</span> tmp ; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">    add(<span class="number">1</span>, <span class="number">1</span>, n, w, n, x - a[w]), a[w] = x; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123; </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, w)); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    in(n), in(m); <span class="keyword">int</span> i, j; </div><div class="line">    for1(i, n) in(x), modify(i, x); </div><div class="line">    for1(i, m) &#123; </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); </div><div class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'Q'</span>) in(x), query(x); </div><div class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'M'</span>) in(j), in(x), modify(j, x); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p></li>
<li><p>bit <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100100</span>; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line">ll sm[N], bit[N]; </div><div class="line"><span class="keyword">int</span>  n, a[N], m ;</div><div class="line"><span class="keyword">char</span> s[<span class="number">20</span>]; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> ch = getchar(); </div><div class="line">    <span class="keyword">for</span> (; ch &lt; <span class="string">'0'</span> || ch &gt; <span class="string">'9'</span>; ch = getchar());   </div><div class="line">    <span class="keyword">for</span> (x = <span class="number">0</span>; ch &gt;= <span class="string">'0'</span> &amp;&amp; ch &lt;= <span class="string">'9'</span>; ch = getchar())</div><div class="line">        x =  x * <span class="number">10</span> + ch - <span class="number">48</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(ll *a, <span class="keyword">int</span> x, ll val)</span> </span>&#123; </div><div class="line">    <span class="keyword">for</span> (; x &lt;= n; x += x &amp; -x) a[x] += val; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">sum</span><span class="params">(ll *a, <span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">    ll tmp = <span class="number">0</span>; </div><div class="line">    <span class="keyword">for</span> (; x; x -= x &amp; -x) tmp += a[x]; </div><div class="line">    <span class="keyword">return</span> tmp; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> place, <span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    add(sm, place, x - a[place]), add(bit, place, <span class="number">1L</span>L * (x - a[place]) * place);</div><div class="line">    a[place] = x; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line"><span class="comment">//    cout &lt;&lt; x &lt;&lt; ": " &lt;&lt; sum(sm, x) &lt;&lt; ' ' &lt;&lt; sum(bit, x) &lt;&lt; endl; </span></div><div class="line">    ll tmp = <span class="number">1L</span>L * sum(sm, x) * (x + <span class="number">1</span>) - sum(bit, x); </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, tmp); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line"><span class="comment">//    freopen("A.in", "r", stdin); </span></div><div class="line"><span class="comment">//    freopen("A.out", "w", stdout); </span></div><div class="line">    in(n), in(m); <span class="keyword">int</span> i, j, x; </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i) </div><div class="line">        in(x), modify(i, x); </div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); </div><div class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'Q'</span>) in(x), query(x); </div><div class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'M'</span>) in(j), in(x), modify(j, x); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p></li>
</ol>
<h1 id="题目">题目</h1>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3155" target="_blank" rel="external">题目链接</a></p>
<center>
<h2>
3155: Preprefix sum
</h2>
<span class="green">Time Limit: </span>1 Sec  <span class="green">Memory Limit: </span>512 MB<br>
</center>
<h2>
Description
</h2>
<div class="content">
<p>
<img src="http://www.lydsy.com/JudgeOnline/upload/201503/222(2).png" width="719" height="453" alt="">
</p>
</div>
<h2>
Input
</h2>
<div class="content">
<p class="MsoNormal" style="margin: 0cm 0cm 10pt; layout-grid-mode: both; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-layout-grid-align: auto">
</p>
<div>
第一行给出两个整数N，M。分别表示序列长度和操作个数
</div>
<div>
接下来一行有N个数，即给定的序列a1,a2,….an
</div>
<div>
接下来M行，每行对应一个操作，格式见题目描述
</div>
<p>
</p>
</div>
<h2>
Output
</h2>
<div class="content">
<p class="MsoNormal" style="margin: 0cm 0cm 10pt; layout-grid-mode: both; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-layout-grid-align: auto">
<span style="font-size: 12pt; font-family: 宋体; mso-ascii-font-family: &#39;Times New Roman&#39;">对于每个询问操作，输出一行，表示所询问的</span><span lang="EN-US" style="font-size: 12pt; font-family: &#39;Times New Roman&#39;; mso-fareast-font-family: 宋体; mso-no-proof: yes">SSi</span><span style="font-size: 12pt; font-family: 宋体; mso-ascii-font-family: &#39;Times New Roman&#39;">的值。</span><span lang="EN-US" style="font-size: 12pt; font-family: &#39;Times New Roman&#39;; mso-fareast-font-family: 宋体"><o:p></o:p></span>
</p>
<p class="MsoNormal" style="margin: 0cm 0cm 0pt; layout-grid-mode: both; mso-layout-grid-align: auto; tab-stops: 45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt">
<span lang="EN-US" style="font-size: 12pt; font-family: &#39;Times New Roman&#39;; mso-fareast-font-family: 宋体"><o:p></o:p></span>
</p>
</div>
<h2>
Sample Input
</h2>
<pre><code>        &lt;div class=&quot;content&quot;&gt;&lt;span class=&quot;sampledata&quot;&gt;5 3&lt;br&gt;</code></pre>
1 2 3 4 5<br> Query 5<br> Modify 3 2<br> Query 5

<h2>
Sample Output
</h2>
<pre><code>        &lt;div class=&quot;content&quot;&gt;&lt;span class=&quot;sampledata&quot;&gt;35&lt;br&gt;</code></pre>
32

<h2>
HINT
</h2>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[总结对博弈问题的学习和若干模型及解法]]></title>
      <url>/%E6%80%BB%E7%BB%93%E5%AF%B9%E5%8D%9A%E5%BC%88%E9%97%AE%E9%A2%98%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%92%8C%E8%8B%A5%E5%B9%B2%E6%A8%A1%E5%9E%8B%E5%8F%8A%E8%A7%A3%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>利用一个星期的时间学习了博弈问题的基础知识， 做了最简单的若干习题， 在这里总结一下；</p>
</blockquote>
<a id="more"></a>
<ul>
<li><a href="#1">基础知识</a>
<ul>
<li>平等博弈</li>
<li>sg函数<br>
</li>
<li>游戏的和</li>
</ul></li>
<li><a href="#2">经典模型</a>
<ul>
<li>石子类</li>
<li>非石子</li>
</ul></li>
<li><a href="#3">常用方法及习题</a></li>
</ul>
<hr>
<p><span id="1"> </span></p>
<h1 id="基础知识">基础知识</h1>
<hr>

<h2 id="平等博弈">平等博弈</h2>
<p>与不平等博弈对立， 先后手面对不同局面， 可以做相同的决策， 是比较常见的类型， 我学习的是和平等博弈有关的内容；<br>
重要的性质： 必败局面的后继局面一定是必胜局面， 必胜局面的后继局面一定存在必败局面；</p>
<hr>

<h2 id="sg函数">sg函数</h2>
<p><span class="math display">\[sg[S]=mex \\{ sg[T] | T \in next(S) \\}\]</span></p>
<span class="math inline">\(sg[S] = 0\)</span>, <span class="math inline">\(S\)</span>为必胜局面，<span class="math inline">\(sg[S] \neq 0\)</span>, <span class="math inline">\(S\)</span>为必负局面；
<hr>

<h2 id="游戏的和">游戏的和</h2>
<p>当一个游戏<span class="math inline">\(S\)</span>可以拆成若干个子游戏<span class="math inline">\(G_i, (i \in [1, n])\)</span>， 且不存在子游戏间的干扰， 那么该游戏可以认为是这若干个子游戏的和， <span class="math inline">\(sg[S] = sg[G_1] \ xor \  sg[G_2] \  xor \  ... \ xor \ sg[G_n]\)</span>;</p>
<hr>

<hr>
<p><span id="2"> </span></p>
<h1 id="经典模型">经典模型</h1>
<hr>

<h2 id="石子类">石子类</h2>
<ol style="list-style-type: decimal">
<li>Nim Game
<ul>
<li>n堆石子,双方轮流从任意一堆石子中取出至少一个,不能取的人输.</li>
<li>对于一堆x个石子, <span class="math inline">\(sg(x)=x\)</span>.</li>
<li>利用游戏的和， 所以所有石子个数的异或和为0是必败态,否则为必胜态.</li>
</ul></li>
<li>Bash Game
<ul>
<li>每人最多一次只能取m个石子,其他规则同Nim Game.</li>
<li><span class="math inline">\(sg(x)=x \space mod \space (m+1)\)</span>.</li>
</ul></li>
<li>Nim_K Game
<ul>
<li>一次可以从最多K堆石子中取出任意多个,其他规则同Nim Game.</li>
<li>在二进制下各位上各堆石子的数字之和均为(K+1)的倍数的话则为必败态,否则为必胜态.</li>
<li>推广: 一个由n个子游戏组成的游戏,每次可以在最多K个子游戏中进行操作.</li>
<li>然后只要把结论中各堆石子的个数改为各个子游戏的SG值即可.</li>
</ul></li>
<li>Anti-Nim Game(Misère Nim)
<ul>
<li>不能取的一方获胜,其他规则同Nim Game.</li>
<li>关于所谓的”Anti-SG游戏”及”SJ定理”贾志鹏的论文上有详细说明,不过似乎遇到并不多.</li>
<li>结论是一个状态是必胜态当且仅当满足以下条件之一:
<ol style="list-style-type: decimal">
<li>SG值不为0且至少有一堆石子数大于1;</li>
<li>SG值为0且不存在石子数大于1的石子堆.</li>
</ol></li>
</ul></li>
<li>Staircase Nim
<ul>
<li>每人一次可以从第一堆石子中取走若干个,或者从其他石子堆的一堆中取出若干个放到左边一堆里(没有石子的石子堆不会消失),其他规则同Nim Game.</li>
<li>当且仅当奇数编号堆的石子数异或和为0时为必败态.</li>
<li>将石子从奇数推向偶数可以理解为拿走石子， 偶数推向奇数后手可以接着推回偶数， 理解为没有进行操作；</li>
</ul></li>
<li>Wythoff Game
<ul>
<li>有两堆石子,双方轮流从某一堆取走若干石子或者从两堆中取走相同数目的石子,不能取的人输.</li>
<li>对任意自然数k,都存在唯一的一个必败态使得两堆石子数差为k,设其为<span class="math inline">\(P_k=(a_k,b_k)\)</span>,表示石子数分别为<span class="math inline">\(a_k,b_k(ak⩽bk)\)</span>.</li>
<li>那么<span class="math inline">\(a_k\)</span>为在<span class="math inline">\(P_{k0}(k0&lt;k)\)</span>中未出现过的最小自然数,<span class="math inline">\(b_k=a_k+k\)</span>.</li>
<li>结论：<span class="math inline">\(a_k = \lfloor \frac{ \sqrt{5} + 1}{2} * k \rfloor\)</span>.</li>
</ul></li>
</ol>
<hr>

<h2 id="非石子类">非石子类</h2>
<ol style="list-style-type: decimal">
<li><p>翻硬币游戏</p>
<p>n枚硬币排成一排，有的正面朝上，有的反面朝上。</p>
<p>游戏者根据某些约束翻硬币（如：每次只能翻一或两枚，或者每次只能翻连续的几枚），但他所翻动的硬币中，最右边的必须是从正面翻到反面。</p>
<p>谁不能翻谁输。</p>
<p>把游戏转化为其他的取石子游戏之类的,然后用如下定理解决:</p>
<p>局面的 SG 值等于局面中每个正面朝上的棋子单一存在时的 SG 值的异或和。</p></li>
<li><p>树上删边游戏</p>
<p>给出一个有n个结点的树，有一个点作为树的根节点,双方轮流从树中删去一条边边，之后不与根节点相连的部分将被移走,无法操作者输.</p>
<p>结论: 叶子结点的SG值为0,其他结点SG值为其每个儿子结点SG值加1后的异或和.</p></li>
<li><p>无向图删边游戏</p>
<p>一个无向连通图，有一个点作为图的根。</p>
<p>游戏者轮流从图中删去边， 删去一条边后，不与根节点相连的部分将被移走。</p>
<p>谁无路可走谁输。</p>
<p>对于这个模型，有一个著名的定理——Fusion Principle:</p>
<p>我们可以对无向图做如下改动：将图中的任意一个偶环缩成一个新点，任意一个奇环缩成一个新点加一个新边；所有连到原先环上的边全部改为与新点相连。 这样的改动不会影响图的 SG 值。</p></li>
</ol>
<hr>
<p><span id="3"> </span></p>
<h1 id="习题">习题</h1>
<ul>
<li><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1661" target="_blank" rel="external">【51nod1661】 黑板上的游戏</a> 解题报告： 固定题目中的<span class="math inline">\(k\)</span>, 对sg函数进行大表， 可以发现显然的规律： <span class="math inline">\(sg(1)=0, sg(ak+1)=sg(a), sg(ak+b)=a(k-1)+b-1(1&lt;b&lt;=k)\)</span>, 可以使用归纳法进行证明.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; (x) &lt;&lt; endl; </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOK(x, a, b) &#123;cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span>;FORU(i, a, b) cout &lt;&lt; x[i] &lt;&lt; <span class="meta-string">' '</span>; cout &lt;&lt; endl; &#125;</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</div><div class="line">ll n, sg[N], a[N], k, ans; </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">got</span><span class="params">(ll x)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> x - (x+k<span class="number">-1</span>)/k;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">calc</span><span class="params">(ll a)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (a % k != <span class="number">1</span>) <span class="keyword">return</span> got(a); </div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> calc(a/k); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">able</span><span class="params">(ll sg, ll a)</span> </span>&#123; </div><div class="line">	ll tmp = sg + (sg + k<span class="number">-2</span>) / (k<span class="number">-1</span>); </div><div class="line">	<span class="keyword">while</span> (tmp &lt; a) &#123; </div><div class="line">		<span class="keyword">if</span> ((ff)tmp * (ff)k &gt;= a)</div><div class="line">			<span class="keyword">return</span> tmp; </div><div class="line">		<span class="keyword">if</span> ((ff)tmp * (ff)k + <span class="number">1.0</span> &gt;= a)</div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">		tmp = tmp * k + <span class="number">1</span>;</div><div class="line"> 	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line"><span class="comment">/*make a list to look</span></div><div class="line"></div><div class="line">int f[N], app[N], k, n; </div><div class="line">	cin &gt;&gt; n &gt;&gt; k; </div><div class="line">	f[1] = 0; </div><div class="line">	FORU(i, 2, n) &#123; </div><div class="line">		mmst(app, 0); </div><div class="line">		FORU(j, max(1, i/k), i-1) &#123;</div><div class="line">			if (j * k &lt; i) continue; </div><div class="line">			app[f[j]] = 1;</div><div class="line">		&#125;</div><div class="line">		FORU(j, 0, i) if (!app[j]) &#123;</div><div class="line">			f[i] = j; break; </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	FORU(i, 1, n) </div><div class="line">			cout &lt;&lt; i &lt;&lt; ": " &lt;&lt; f[i] &lt;&lt;endl; </div><div class="line">*/</div><div class="line">	ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k; ll x; </div><div class="line">	FORU(i, <span class="number">1</span>, n) &#123;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; a[i], sg[i] = calc(a[i]);</div><div class="line">		ans ^= sg[i]; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (!ans) <span class="built_in">puts</span>(<span class="string">"Bob"</span>); </div><div class="line">	FORU(i, <span class="number">1</span>, n) &#123;</div><div class="line"> 		<span class="keyword">if</span> (x = able(sg[i] ^ ans, a[i])) &#123;</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"Alice %d %lld\n"</span>, i, x); </div><div class="line">			<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="http://www.51nod.com/onlineJudge/questionCode.html#!problemId=1714" target="_blank" rel="external">【51nod1714】 B君的游戏</a> 解题报告： 根据游戏规则，游戏可以看做若干子游戏的和， 每堆石子的sg函数， 只与石子个数的二进制1数有关， 而二进制数位最多有60个1， 所以直接对二进制1数进行打表sg;</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; (x) &lt;&lt; endl; </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOK(x, a, b) &#123;cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span>;FORU(i, a, b) cout &lt;&lt; x[i] &lt;&lt; <span class="meta-string">' '</span>; cout &lt;&lt; endl; &#125;</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100100</span>; </div><div class="line">ull a;</div><div class="line"><span class="keyword">int</span> ans, n; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> sg[<span class="number">70</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">64</span>,<span class="number">128</span>,<span class="number">255</span>,<span class="number">256</span>,<span class="number">512</span>,<span class="number">1024</span>,<span class="number">2048</span>,<span class="number">3855</span>,<span class="number">4096</span>,<span class="number">8192</span>,<span class="number">13107</span>,<span class="number">16384</span>,<span class="number">21845</span>,<span class="number">27306</span>,<span class="number">32768</span>,<span class="number">38506</span>,<span class="number">65536</span>,<span class="number">71576</span>,<span class="number">92115</span>,<span class="number">101470</span>,<span class="number">131072</span>,<span class="number">138406</span>,<span class="number">172589</span>,<span class="number">240014</span>,<span class="number">262144</span>,<span class="number">272069</span>,<span class="number">380556</span>,<span class="number">524288</span>,<span class="number">536169</span>,<span class="number">679601</span>,<span class="number">847140</span>,<span class="number">1048576</span>,<span class="number">1072054</span>,<span class="number">1258879</span>,<span class="number">1397519</span>,<span class="number">2005450</span>,<span class="number">2097152</span>,<span class="number">2121415</span>,<span class="number">2496892</span>,<span class="number">2738813</span>,<span class="number">3993667</span>,<span class="number">4194304</span>,<span class="number">4241896</span>,<span class="number">4617503</span>,<span class="number">5821704</span>,<span class="number">7559873</span>,<span class="number">8388608</span>,<span class="number">8439273</span>,<span class="number">8861366</span>,<span class="number">11119275</span>,<span class="number">11973252</span>,<span class="number">13280789</span>,<span class="number">16777216</span>,<span class="number">16844349</span>,<span class="number">17102035</span>,<span class="number">19984054</span>,<span class="number">21979742</span>&#125;;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n; <span class="keyword">int</span> tmp; </div><div class="line">	FORU(i, <span class="number">1</span>, n) &#123; </div><div class="line">		<span class="built_in">cin</span> &gt;&gt; a, tmp = <span class="number">0</span> ; </div><div class="line">		<span class="keyword">while</span> (a) tmp += a&amp;<span class="number">1</span>, a &gt;&gt;= <span class="number">1</span>; </div><div class="line">		ans ^= sg[tmp]; </div><div class="line">	&#125;</div><div class="line">	<span class="built_in">puts</span>((ans?<span class="string">"B"</span>:<span class="string">"L"</span>)); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.hackerrank.com/challenges/nimble-game-1" target="_blank" rel="external">【hackerrank】 Nimble Game</a> 因为<span class="math inline">\(i\)</span>位置的石子只能移向<span class="math inline">\(j(j&lt;i)\)</span>的位置， 所以可以将<span class="math inline">\(i\)</span>位置的每一个石子转换成一堆有<span class="math inline">\(i\)</span>个石子的石子，直接求sg函数；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; (x) &lt;&lt; endl;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOK(x, a, b) &#123;cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span>;FORU(i, a, b) cout &lt;&lt; x[i] &lt;&lt; <span class="meta-string">' '</span>; cout &lt;&lt; endl; &#125;</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100100</span>;</div><div class="line"><span class="keyword">int</span> test, n, ans, x; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">	<span class="built_in">cin</span> &gt;&gt; test; </div><div class="line">	<span class="keyword">while</span> (test--) &#123; </div><div class="line">		ans = <span class="number">0</span>, <span class="built_in">cin</span> &gt;&gt; n; </div><div class="line">		REP(i, n) &#123; </div><div class="line">			<span class="built_in">cin</span> &gt;&gt; x; </div><div class="line">			<span class="keyword">if</span> (x &amp; <span class="number">1</span>) ans ^= i; </div><div class="line">		&#125; </div><div class="line">		<span class="built_in">puts</span>((ans?<span class="string">"First"</span>:<span class="string">"Second"</span>)); 	</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.hackerrank.com/challenges/tower-breakers-again-1" target="_blank" rel="external">【hackerrank】Tower breaks again</a> 解题报告： 对于每个<span class="math inline">\(x\)</span>，枚举<span class="math inline">\(x\)</span>的约数， 根据sg函数的定义求sg函数；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; (x) &lt;&lt; endl;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOK(x, a, b) &#123;cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span>;FORU(i, a, b) cout &lt;&lt; x[i] &lt;&lt; <span class="meta-string">' '</span>; cout &lt;&lt; endl; &#125;</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"><span class="keyword">int</span> sg[<span class="number">100001</span>];</div><div class="line"><span class="keyword">int</span> p,xs,x,t,n;</div><div class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span> &gt; v;</div><div class="line"><span class="keyword">void</span> _div() &#123;</div><div class="line">    sg[<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100000</span>;i++) &#123;</div><div class="line">        v.clear();</div><div class="line">        v.push_back(<span class="number">-1</span>);</div><div class="line">        p=<span class="built_in">sqrt</span>(i);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p;j++)</div><div class="line">            <span class="keyword">if</span> (i%j==<span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (j%<span class="number">2</span>!=<span class="number">0</span>) v.push_back(sg[i/j]);</div><div class="line">                <span class="keyword">if</span> ((i/j)%<span class="number">2</span>!=<span class="number">0</span>) v.push_back(sg[j]);</div><div class="line">            &#125;</div><div class="line">      v.push_back(<span class="number">10000000</span>);</div><div class="line">      sort(v.begin(),v.end());</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;v.size();j++)</div><div class="line">      	<span class="keyword">if</span> (<span class="built_in">abs</span>(v[j]-v[j<span class="number">-1</span>])&gt;<span class="number">1</span>)	</div><div class="line">          sg[i]=v[j<span class="number">-1</span>]+<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    _div();</div><div class="line">    <span class="keyword">while</span> (t--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">        xs=<span class="number">0</span>;</div><div class="line">        REP(i, n)  &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</div><div class="line">            xs=xs^sg[x];</div><div class="line">    	&#125;</div><div class="line">        <span class="keyword">if</span> (xs==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"2\n"</span>); </div><div class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"1\n"</span>);   </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.hackerrank.com/challenges/chessboard-game-again-1" target="_blank" rel="external">【hackerrank】Chessboard Game, Again!</a> 解题报告： 利用dp，求出棋盘上每个点的sg函数，利用游戏的和，得到总局面的sg函数；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; (x) &lt;&lt; endl;</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOK(x, a, b) &#123;cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span>;FORU(i, a, b) cout &lt;&lt; x[i] &lt;&lt; <span class="meta-string">' '</span>; cout &lt;&lt; endl; &#125;</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vi;</div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</div><div class="line"><span class="keyword">int</span> sg[<span class="number">15</span>][<span class="number">15</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pii a, pii b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a.fi + a.se != b.fi + b.se)</div><div class="line">        <span class="keyword">return</span> a.fi + a.se &lt; b.fi + b.se;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> (a.fi &lt; b.se);</div><div class="line">&#125;</div><div class="line"><span class="built_in">vector</span>&lt;pii&gt; vec;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ios :: sync_with_stdio(<span class="literal">false</span>);</div><div class="line">    REP(i, <span class="number">15</span>) REP(j, <span class="number">15</span>)</div><div class="line">        vec.pb(mp(i, j));</div><div class="line">    sort(vec.begin(), vec.end(), cmp);</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;pii&gt;::iterator it = vec.begin(); it != vec.end(); it++) &#123;</div><div class="line">        <span class="keyword">int</span> i = it-&gt;first;</div><div class="line">        <span class="keyword">int</span> j = it-&gt;second;</div><div class="line">        sg[i][j] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>;; x++) &#123;</div><div class="line">            <span class="keyword">bool</span> found = <span class="literal">false</span>;</div><div class="line">            <span class="keyword">if</span> (i<span class="number">-2</span> &gt;= <span class="number">0</span> &amp;&amp; j<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; sg[i<span class="number">-2</span>][j<span class="number">-1</span>] == x) found = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (i<span class="number">-2</span> &gt;= <span class="number">0</span> &amp;&amp; j+<span class="number">1</span> &lt; <span class="number">15</span> &amp;&amp; sg[i<span class="number">-2</span>][j+<span class="number">1</span>] == x) found = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (i<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; j<span class="number">-2</span> &gt;= <span class="number">0</span> &amp;&amp; sg[i<span class="number">-1</span>][j<span class="number">-2</span>] == x) found = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (i+<span class="number">1</span> &lt; <span class="number">15</span> &amp;&amp; j<span class="number">-2</span> &gt;= <span class="number">0</span> &amp;&amp; sg[i+<span class="number">1</span>][j<span class="number">-2</span>] == x) found = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">if</span> (!found) &#123;</div><div class="line">                sg[i][j] = x; <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> test, x, y, k;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; test;</div><div class="line">    <span class="keyword">while</span> (test--) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; k;</div><div class="line">        <span class="keyword">int</span> total_sg = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (k--) &#123;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</div><div class="line">            total_sg ^= sg[x<span class="number">-1</span>][y<span class="number">-1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">puts</span>((total_sg == <span class="number">0</span> ? <span class="string">"Second"</span> : <span class="string">"First"</span>)); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.hackerrank.com/challenges/digits-square-board-1" target="_blank" rel="external">【hackerrank】Digits Square Board</a> 解题报告： 与上一题相似， 利用dp求出局面的sg函数；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; (x) &lt;&lt; endl; </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOK(x, a, b) &#123;cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span>;FORU(i, a, b) cout &lt;&lt; x[i] &lt;&lt; <span class="meta-string">' '</span>; cout &lt;&lt; endl; &#125;</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N =<span class="number">31</span>;</div><div class="line"><span class="keyword">int</span> a[N][N], gr[N][N][N][N], n, t;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">prime_check</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z,  <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">	FORU(i, x, z) FORU(j, y, m)</div><div class="line">	    <span class="keyword">if</span> (a[i][j]==<span class="number">1</span> || a[i][j]==<span class="number">4</span> || a[i][j]==<span class="number">6</span> || a[i][j]==<span class="number">8</span> || a[i][j]==<span class="number">9</span>) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">grundy</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z,<span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> v[<span class="number">75</span>];</div><div class="line">	<span class="keyword">if</span> (gr[x][y][z][m]!=<span class="number">-1</span>) </div><div class="line">		<span class="keyword">return</span> gr[x][y][z][m];</div><div class="line">	<span class="keyword">if</span> (prime_check(x ,y ,z ,m)) &#123;</div><div class="line">		gr[x][y][z][m]=<span class="number">0</span>;</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">75</span>;i++) v[i]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=x+<span class="number">1</span>;i&lt;=z;i++) v[grundy(x,y,i<span class="number">-1</span>,m)^grundy(i,y,z,m)]=<span class="number">1</span>;</div><div class="line">  	<span class="keyword">for</span> (<span class="keyword">int</span> i=y+<span class="number">1</span>;i&lt;=m;i++) v[grundy(x,y,z,i<span class="number">-1</span>)^grundy(x,i,z,m)]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">75</span>;i++)</div><div class="line">		<span class="keyword">if</span> (v[i]==<span class="number">0</span>) &#123;</div><div class="line">			gr[x][y][z][m]=i;</div><div class="line">			<span class="keyword">return</span> gr[x][y][z][m];</div><div class="line">		&#125;</div><div class="line">     <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">	FORU(i, <span class="number">1</span>, n) FORU(j, <span class="number">1</span>, n) </div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</div><div class="line">	mmst(gr, <span class="number">-1</span>); </div><div class="line">    grundy(<span class="number">1</span>,<span class="number">1</span>,n,n);</div><div class="line">	<span class="keyword">if</span> (gr[<span class="number">1</span>][<span class="number">1</span>][n][n]!=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"First\n"</span>); </div><div class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Second\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">    <span class="keyword">while</span>(t--) solve();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.hackerrank.com/challenges/stone-division" target="_blank" rel="external">【hackerrank】Stone Division</a> 解题报告： 同样， 记忆化搜索求sg函数， 每个数的约数个数是<span class="math inline">\(O( \sqrt[3]{n})\)</span>级别的，所以直接暴力枚举每个数被哪些集合中的数分解；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; (x) &lt;&lt; endl; </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOK(x, a, b) &#123;cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span>;FORU(i, a, b) cout &lt;&lt; x[i] &lt;&lt; <span class="meta-string">' '</span>; cout &lt;&lt; endl; &#125;</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;ll&gt; vi; </div><div class="line">vi s; </div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; rec; </div><div class="line">ll n, m; </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(ll x)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (rec.find(x) != rec.end()) 	</div><div class="line">		<span class="keyword">return</span> rec[x]; </div><div class="line">	REP(i, sz(s)) </div><div class="line">		<span class="keyword">if</span> (x % s[i] == <span class="number">0</span>) </div><div class="line">			<span class="keyword">if</span> (x / s[i] % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">				<span class="keyword">return</span> (rec[x] = <span class="number">1</span>); </div><div class="line">			<span class="keyword">else</span></div><div class="line">				<span class="keyword">if</span> (!dfs(x / s[i])) </div><div class="line">					<span class="keyword">return</span> (rec[x] = <span class="number">1</span>); </div><div class="line">	<span class="keyword">return</span> (rec[x] = <span class="number">0</span>); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m; ll x; </div><div class="line">	REP(i, m) <span class="built_in">cin</span> &gt;&gt; x, s.pb(x); </div><div class="line">	<span class="keyword">if</span> (dfs(n)) <span class="built_in">puts</span>(<span class="string">"First"</span>); </div><div class="line">	<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Second"</span>); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.hackerrank.com/challenges/simple-game" target="_blank" rel="external">【hackerrank】Simple Game</a> 解题报告： 如果<span class="math inline">\(k=2, sg[x] = (x-1)&amp;1\)</span>, 如果<span class="math inline">\(k &gt; 3, sg[x] = x - 4\)</span>，如果<span class="math inline">\(k = 3\)</span>, 利用dp, 统计sg值为<span class="math inline">\(x\)</span>的方案数， 最后输出sg值不为0的方案数；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; (x) &lt;&lt; endl; </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOK(x, a, b) &#123;cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span>;FORU(i, a, b) cout &lt;&lt; x[i] &lt;&lt; <span class="meta-string">' '</span>; cout &lt;&lt; endl; &#125;</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">602</span>, K = <span class="number">1024</span>, p = <span class="number">1E9</span> + <span class="number">7</span>;</div><div class="line"><span class="keyword">int</span> dp[N][K], nwdp[N][K], m, n, k, sg[N];</div><div class="line"><span class="keyword">bool</span> can[K];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; k;</div><div class="line">    <span class="keyword">if</span> (k == <span class="number">2</span>) &#123;</div><div class="line">		FORU(i, <span class="number">1</span>, <span class="number">600</span>)</div><div class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) sg[i] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">else</span> sg[i] = <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (k == <span class="number">3</span>) &#123;</div><div class="line">        sg[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">		FORU(i, <span class="number">1</span>, <span class="number">600</span>) &#123;</div><div class="line">            <span class="built_in">memset</span>(can, <span class="number">0</span>, <span class="keyword">sizeof</span>(can) );</div><div class="line">			FORU(j, <span class="number">1</span>, i<span class="number">-1</span>) &#123;</div><div class="line">                <span class="keyword">int</span> cur = sg[j] ^ sg[i - j];</div><div class="line">                can[cur] = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">			FORU(j, <span class="number">1</span>, i - <span class="number">2</span>) &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; j + l &lt; i; l++) &#123;</div><div class="line">                    <span class="keyword">int</span> cur = sg[j] ^ sg[l] ^ sg[i - j - l];</div><div class="line">                    can[cur] = <span class="literal">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            REP(j, K)</div><div class="line">                <span class="keyword">if</span> (can[j] == <span class="literal">false</span>) &#123;</div><div class="line">                    sg[i] = j; <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (k &gt; <span class="number">3</span>) FORU(i, <span class="number">1</span>, <span class="number">600</span>) sg[i] = i - <span class="number">1</span>;</div><div class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</div><div class="line">    REP(i, n) &#123;</div><div class="line">        <span class="built_in">memset</span>(nwdp, <span class="number">0</span>, <span class="keyword">sizeof</span>(nwdp) );</div><div class="line">		REP(j, m) REP(gr, K) &#123;</div><div class="line">			<span class="keyword">if</span> (dp[j][gr] == <span class="number">0</span>) <span class="keyword">continue</span>;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> nxt = <span class="number">1</span>; nxt + j &lt;= m; nxt++) &#123;</div><div class="line">				nwdp[j + nxt][gr^sg[nxt] ] += dp[j][gr];</div><div class="line">				<span class="keyword">if</span> (nwdp[j + nxt][gr^sg[nxt] ] &gt;= p)</div><div class="line">					nwdp[j + nxt][gr^sg[nxt] ] -= p;</div><div class="line">			&#125;</div><div class="line">        &#125;</div><div class="line">        swap(dp, nwdp);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">	FORU(i, <span class="number">1</span>, K<span class="number">-1</span>)&#123;</div><div class="line">        s += dp[m][i];</div><div class="line">        <span class="keyword">if</span> (s &gt;= p) s -= p;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.hackerrank.com/challenges/move-the-coins" target="_blank" rel="external">【hackerrank】Move the Coins</a> 解题报告： 一个树上阶梯问题， 静态的情况是奇数层的石子异或和，现在可以改变一个子树深度的奇偶，只需要维护这个子树的异或和， 在基础异或和上异或即可；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; (x) &lt;&lt; endl; </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOK(x, a, b) &#123;cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span>;FORU(i, a, b) cout &lt;&lt; x[i] &lt;&lt; <span class="meta-string">' '</span>; cout &lt;&lt; endl; &#125;</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">51000</span>; </div><div class="line"><span class="keyword">int</span> n, q, c[N], in[N], out[N], body[N], cnt, pre[N], dep[N], ans;</div><div class="line">vi nxt[N];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> y; </div><div class="line">	in[x] = ++cnt, body[cnt] = x;</div><div class="line">	dep[x] = dep[fa] ^ <span class="number">1</span>; 	</div><div class="line">	<span class="keyword">if</span> (dep[x]) ans ^= c[x]; </div><div class="line">	REP(i, sz(nxt[x])) &#123;</div><div class="line"> 		y = nxt[x][i]; </div><div class="line">		<span class="keyword">if</span> (y != fa) dfs(y, x); </div><div class="line">	&#125;</div><div class="line">	out[x] = cnt; </div><div class="line">&#125; 	</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">got</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; </div><div class="line">	<span class="keyword">return</span> pre[r] ^ pre[l<span class="number">-1</span>]; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n; <span class="keyword">int</span> x, y; </div><div class="line">	FORU(i, <span class="number">1</span>, n) <span class="built_in">cin</span> &gt;&gt; c[i]; </div><div class="line">	FORU(i, <span class="number">1</span>, n - <span class="number">1</span>) &#123;</div><div class="line">		<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</div><div class="line">		nxt[x].pb(y), nxt[y].pb(x); </div><div class="line">	&#125;</div><div class="line"> 	dep[<span class="number">0</span>] = <span class="number">1</span>, dfs(<span class="number">1</span>, <span class="number">0</span>); </div><div class="line">	FORU(i, <span class="number">1</span>, n) pre[i] = pre[i<span class="number">-1</span>] ^ c[body[i]]; </div><div class="line">	<span class="built_in">cin</span> &gt;&gt; q; </div><div class="line">	<span class="keyword">while</span> (q --) &#123; </div><div class="line">		<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y; </div><div class="line">		<span class="keyword">if</span> (in[y] &gt;= in[x] &amp;&amp; in[y] &lt;= out[x]) </div><div class="line">			<span class="built_in">puts</span>(<span class="string">"INVALID"</span>); </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (dep[y]^dep[x])</div><div class="line">				<span class="built_in">puts</span>((ans?<span class="string">"YES"</span>:<span class="string">"NO"</span>)); </div><div class="line">			<span class="keyword">else</span> </div><div class="line">				<span class="built_in">puts</span>((ans^got(in[x], out[x]))?<span class="string">"YES"</span>:<span class="string">"NO"</span>); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.hackerrank.com/challenges/stone-piles" target="_blank" rel="external">【hackerrank】Stone Piles</a> 解题报告： 暴力打表sg;</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; (x) &lt;&lt; endl; </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOK(x, a, b) &#123;cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span>;FORU(i, a, b) cout &lt;&lt; x[i] &lt;&lt; <span class="meta-string">' '</span>; cout &lt;&lt; endl; &#125;</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">int</span> f[<span class="number">60</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>&#125;;</div><div class="line"><span class="keyword">int</span> test, n, ans; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"> 	ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">	<span class="built_in">cin</span> &gt;&gt; test; </div><div class="line">	<span class="keyword">while</span> (test--) &#123; </div><div class="line">		<span class="built_in">cin</span> &gt;&gt; n, ans = <span class="number">0</span>; </div><div class="line">		<span class="keyword">int</span> x; </div><div class="line">		FORU(i, <span class="number">1</span>, n) <span class="built_in">cin</span> &gt;&gt; x, ans = ans ^ f[x]; </div><div class="line">		<span class="built_in">puts</span>(ans?<span class="string">"ALICE"</span>:<span class="string">"BOB"</span>); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div><div class="line">		</div><div class="line"><span class="comment">/*</span></div><div class="line">bitset&lt;1000000000&gt; ap;</div><div class="line">void dfs(int lef, int s, int ha, int d) &#123; </div><div class="line">	if (!lef &amp;&amp; d &gt; 1) ap.set(ha); </div><div class="line">	FORU(i, s, lef) dfs(lef - i, i + 1, ha ^ f[i], d + 1); </div><div class="line">&#125; </div><div class="line">int main() &#123;</div><div class="line">	freopen("A.out", "w", stdout); </div><div class="line">	cout &lt;&lt; "&#123;0"; </div><div class="line">	f[1] = 0; </div><div class="line">	FORU(i, 2, 50) &#123; </div><div class="line">		ap.reset();</div><div class="line">		dfs(i, 1, 0, 0);</div><div class="line">		REP(j, 1000000000) if (ap[j] == 0) &#123; </div><div class="line">			f[i] = j; break;</div><div class="line">		&#125;</div><div class="line">		cout &lt;&lt; ", " &lt;&lt; f[i]; </div><div class="line">	&#125; </div><div class="line">	cout &lt;&lt; "&#125;;" &lt;&lt; endl; </div><div class="line">	return 0; </div><div class="line">&#125; </div><div class="line">*/</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.hackerrank.com/challenges/chocolate-game" target="_blank" rel="external">【hackerrank】Chocolate Game</a> 解题报告： 差分石子数可以转换为阶梯石子问题， 再利用差分统计， 得到答案；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; (x) &lt;&lt; endl; </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOK(x, a, b) &#123;cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span>;FORU(i, a, b) cout &lt;&lt; x[i] &lt;&lt; <span class="meta-string">' '</span>; cout &lt;&lt; endl; &#125;</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</div><div class="line"><span class="keyword">int</span> n, a[N]; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">	<span class="built_in">cin</span> &gt;&gt; n;  FORU(i, <span class="number">1</span>, n) <span class="built_in">cin</span> &gt;&gt; a[i]; </div><div class="line">	ll ans = <span class="number">0</span>, tot = <span class="number">0</span>, mark = <span class="number">0</span>; </div><div class="line">	<span class="keyword">static</span> <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hav;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= n; x += <span class="number">2</span>) &#123; </div><div class="line">		<span class="keyword">if</span> (x &gt; <span class="number">1</span>) &#123;</div><div class="line">			ans += tot - hav[(a[x] - a[x<span class="number">-1</span>])^mark]; </div><div class="line">			<span class="keyword">if</span> (a[x] - a[x<span class="number">-1</span>]) ++ ans;</div><div class="line"><span class="comment">//			DEBUG(x); DEBUG(ans);</span></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (x == <span class="number">1</span>)  mark^=a[x], hav[a[x]^mark] += <span class="number">1</span>, tot += <span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (x &gt; <span class="number">1</span>)  &#123;</div><div class="line">			mark ^= a[x] - a[x<span class="number">-1</span>];</div><div class="line">			hav[a[x]^mark] += <span class="number">1</span>, tot += <span class="number">1</span>;</div><div class="line">			hav[(a[x] - a[x<span class="number">-1</span>])^mark] += <span class="number">1</span>, tot += <span class="number">1</span>; </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	mark = tot = <span class="number">0</span>;</div><div class="line">	hav.clear(); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">2</span>; x &lt;= n; x += <span class="number">2</span>) &#123; </div><div class="line">		ans += tot - hav[(a[x] - a[x<span class="number">-1</span>])^mark]; </div><div class="line">		<span class="keyword">if</span> (a[x] - a[x - <span class="number">1</span>]) ++ ans; 	</div><div class="line"><span class="comment">//		DEBUG(x); DEBUG(ans);</span></div><div class="line">		mark ^= a[x] - a[x<span class="number">-1</span>]; </div><div class="line">		hav[a[x] ^ mark] += <span class="number">1</span>, tot += <span class="number">1</span>; </div><div class="line">		hav[(a[x] - a[x<span class="number">-1</span>]) ^ mark] += <span class="number">1</span>, tot += <span class="number">1</span>; </div><div class="line">	&#125; </div><div class="line">	<span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.hackerrank.com/contests/world-codesprint-8/challenges/sherlock-and-nim" target="_blank" rel="external">【hackerrank】Return of the Nim</a> 解题报告： 如果<span class="math inline">\(n=2\)</span>, 问题就是经典的威佐夫问题；否则， <span class="math inline">\(n\)</span>一定为奇数， 如果当前局面当做经典nim游戏求sg为必败态， 那么即使使用全局减法，所得后继状态一定为必胜态，即当前局面仍为必败态；</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORU(i, a, b) for (int i = a, nn = int(b); i &lt;= nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FORD(i, a, b) for (int i = a, nn = int(b); i &gt;= nn; --i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> REP(i, b) for (int i = 0, nn = int(b); i &lt; nn; ++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x).size()</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mmst(a, x) memset(a, x, sizeof(a))</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span> &lt;&lt; (x) &lt;&lt; endl; </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> LOOK(x, a, b) &#123;cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" : "</span>;FORU(i, a, b) cout &lt;&lt; x[i] &lt;&lt; <span class="meta-string">' '</span>; cout &lt;&lt; endl; &#125;</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vi; </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii; </div><div class="line">ll a = <span class="number">618033988</span>, b = <span class="number">749894848</span>, c = <span class="number">204586834</span>;</div><div class="line">ll p = <span class="number">1000000000</span>, n, m, x, nInt, nDec, test; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	ios :: sync_with_stdio(<span class="literal">false</span>); </div><div class="line">	<span class="built_in">cin</span> &gt;&gt; test; </div><div class="line">	<span class="keyword">int</span> tInt, tDec, N, ans;</div><div class="line">	<span class="keyword">while</span> (test--) &#123; </div><div class="line">      <span class="built_in">cin</span> &gt;&gt; N; </div><div class="line">      <span class="keyword">if</span> (N == <span class="number">2</span>)&#123;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</div><div class="line">            <span class="keyword">if</span> (n &lt; m) swap(n, m); </div><div class="line">            n -= m; </div><div class="line">            <span class="keyword">if</span> (n &gt; m || (n &lt;&lt; <span class="number">1</span>) &lt; m) <span class="built_in">puts</span>(<span class="string">"Sherlock"</span>); </div><div class="line">            <span class="keyword">else</span> &#123; </div><div class="line">                nInt = n / p, nDec = n % p;</div><div class="line">                x = nDec * c; </div><div class="line">                x = b * nDec + c * nInt + x / p; </div><div class="line">                x = a * nDec + b * nInt + x / p; </div><div class="line">                x = n + a * nInt + x / p; </div><div class="line">                <span class="keyword">if</span> (x == m) <span class="built_in">puts</span>(<span class="string">"Watson"</span>); </div><div class="line">                <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Sherlock"</span>); </div><div class="line">		      &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123; </div><div class="line">            ans = <span class="number">0</span>; </div><div class="line">            FORU(i, <span class="number">1</span>, N) <span class="built_in">cin</span> &gt;&gt; x, ans ^= x; </div><div class="line">            <span class="built_in">puts</span>((ans?<span class="string">"Sherlock"</span>:<span class="string">"Watson"</span>));</div><div class="line">      &#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 博弈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4423】[AMPPZ2013]Bytehattan]]></title>
      <url>/bzoj4423/</url>
      <content type="html"><![CDATA[<blockquote>
<p>利用到了网格图的性质</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
4423: [AMPPZ2013]Bytehattan
</h2>
Time Limit: 3 Sec Memory Limit: 128 MB
</center>
<h2 id="description">Description</h2>
<p>比特哈顿镇有<span class="math inline">\(n*n\)</span>个格点，形成了一个网格图。一开始整张图是完整的。 有<span class="math inline">\(k\)</span>次操作，每次会删掉图中的一条边<span class="math inline">\((u,v)\)</span>，你需要回答在删除这条边之后<span class="math inline">\(u\)</span>和<span class="math inline">\(v\)</span>是否仍然连通。</p>
<h2 id="input">Input</h2>
<p>第一行包含两个正整数<span class="math inline">\(n,k\)</span>(<span class="math inline">\(2&lt;=n&lt;=1500,1&lt;=k&lt;=2n(n-1)\)</span>)，表示网格图的大小以及操作的个数。 接下来<span class="math inline">\(k\)</span>行，每行包含两条信息，每条信息包含两个正整数<span class="math inline">\(a,b\)</span>(<span class="math inline">\(1&lt;=a,b&lt;=n\)</span>)以及一个字符<span class="math inline">\(c\)</span>(<span class="math inline">\(c=N\)</span>或者<span class="math inline">\(E\)</span>)。 如果<span class="math inline">\(c=N\)</span>，表示删除<span class="math inline">\((a,b)\)</span>到<span class="math inline">\((a,b+1)\)</span>这条边；如果<span class="math inline">\(c=E\)</span>，表示删除<span class="math inline">\((a,b)\)</span>到<span class="math inline">\((a+1,b)\)</span>这条边。 数据进行了加密，对于每个操作，如果上一个询问回答为TAK或者这是第一个操作，那么只考虑第一条信息，否则只考虑第二条信息。 数据保证每条边最多被删除一次。 ## Output 输出<span class="math inline">\(k\)</span>行，对于每个询问，如果仍然连通，输出TAK，否则输出NIE。 # 解题报告 网格图？考虑对偶图的性质，当前一条边，如果它所隔开的两个格子在对偶图中已经联通，说明两点之间的边如果删除，就会形成割，两点也就不连通了。 <img src="https://leanote.com/api/file/getImage?fileId=57db61c4ab6441695200d2b2" alt="图片标题"> 所以并查集搞一下 # 代码 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1501</span>; </div><div class="line"><span class="keyword">int</span> f[N*N],lastans,n,k,id[N][N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> ch=getchar(); </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar());</div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar())</div><div class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">num</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (x&lt;=<span class="number">0</span>||y&lt;=<span class="number">0</span>||x&gt;=n||y&gt;=n) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">	<span class="keyword">return</span> id[x][y]; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (f[x]!=x) f[x]=find(f[x]); </div><div class="line">	<span class="keyword">return</span> f[x]; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">char</span> type)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> one,two,x,y,fx,fy; </div><div class="line">	<span class="keyword">if</span> (type==<span class="string">'N'</span>) &#123;</div><div class="line">		x=a<span class="number">-1</span>,y=b,one=num(x,y); </div><div class="line">		x=a,y=b,two=num(x,y); </div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		x=a,y=b<span class="number">-1</span>,one=num(x,y); </div><div class="line">		x=a,y=b,two=num(x,y); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> ((fx=find(one))==(fy=find(two)))</div><div class="line">		lastans=<span class="number">0</span>;</div><div class="line">	<span class="keyword">else</span> </div><div class="line">		lastans=<span class="number">1</span>,f[fx]=fy; </div><div class="line">	<span class="keyword">if</span> (lastans) <span class="built_in">printf</span>(<span class="string">"TAK\n"</span>); </div><div class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NIE\n"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("4423.in","r",stdin); </span></div><div class="line"><span class="comment">//	freopen("4423(1).out","w",stdout);</span></div><div class="line">	in(n),in(k); <span class="keyword">int</span> x=(n<span class="number">-1</span>)*(n<span class="number">-1</span>),y,x1,y1;</div><div class="line">	<span class="keyword">char</span> s1[<span class="number">10</span>],s2[<span class="number">10</span>]; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=x;i++) f[i]=i; </div><div class="line">	<span class="keyword">int</span> tmp=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++) </div><div class="line">			id[i][j]=++tmp;</div><div class="line">	lastans=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) &#123;</div><div class="line">		in(x),in(y);<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s1);</div><div class="line">		in(x1),in(y1);<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s2); </div><div class="line">		<span class="keyword">if</span> (!lastans) </div><div class="line">			swap(x,x1),swap(y,y1),swap(s1,s2); </div><div class="line">		work(x,y,s1[<span class="number">0</span>]); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 图论题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 并查集 </tag>
            
            <tag> 平面图 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3129】[Sdoi2013]方程]]></title>
      <url>/bzoj3129/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我的Lucas竟然这么糟糕</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h4>
3129: [Sdoi2013]方程
</h4>
Time Limit: 30 Sec Memory Limit: 256 MB
</center>
<h2 id="description">Description</h2>
<p>给定方程<span class="math inline">\(X_1+X_2+...+X_n=M\)</span>,我们对第<span class="math inline">\(l..n_1\)</span>个变量进行一些限制： <span class="math inline">\(X_l &lt;= A_1\)</span>,<span class="math inline">\(X_2 &lt;= A_2\)</span>,<span class="math inline">\(X_{n_1} &lt;= A_{n_1}\)</span> 我们对第<span class="math inline">\(n_1+1..n_1+n_2\)</span>个变量进行一些限制： <span class="math inline">\(X_{n_1+1} &gt;= A_{n_1+1}\)</span>…以此类推 求：在满足这些限制的前提下，该方程正整数解的个数。 答案可能很大，请输出对<span class="math inline">\(p\)</span>取模后的答案，也即答案除以<span class="math inline">\(p\)</span>的余数。</p>
<h2 id="input">Input</h2>
<p>输入含有多组数据，第一行两个正整数<span class="math inline">\(T\)</span>，<span class="math inline">\(p\)</span>。<span class="math inline">\(T\)</span>表示这个测试点内的数据组数，<span class="math inline">\(p\)</span>的含义见题目描述。 对于每组数据，第一行四个非负整数<span class="math inline">\(n\)</span>,<span class="math inline">\(n_1\)</span>，<span class="math inline">\(n_2\)</span>，<span class="math inline">\(m\)</span>。 第二行<span class="math inline">\(n_l+n_2\)</span>个正整数，表示<span class="math inline">\(A_{1 \to n_1+n_2}\)</span>注意.</p>
<h2 id="output">Output</h2>
<p>共<span class="math inline">\(T\)</span>行，每行一个正整数表示取模后的答案。</p>
<h2 id="hint">HINT</h2>
<p><span class="math inline">\(n &lt;= 10^9\)</span>, <span class="math inline">\(n_1 &lt;= 8\)</span>, <span class="math inline">\(n_2 &lt;= 8\)</span>,<span class="math inline">\(m &lt;= 10^9\)</span>,<span class="math inline">\(p &lt;=437367875\)</span> 对于<span class="math inline">\(l00\%\)</span>的测试数据<span class="math inline">\(T &lt;= 5\)</span>，<span class="math inline">\(1 &lt;= A_{1 \to n_1+n_2} &lt;= m\)</span>，<span class="math inline">\(n_1+n_2 &lt;= n\)</span> #解题报告 考场上被<strong>卡常</strong>了只有80分，幸好bzoj上给了整整30s,就A掉了. 首先想的是：<span class="math inline">\(X_{i=n_1+1 \to n_2+n_1} &gt;= A_i\)</span> 是很容易处理的，只需要令<span class="math inline">\(X_i=A_{i-1}+d_i\)</span>带入原式化简就可以得到，这样<span class="math inline">\(d_i\)</span>的限制就只是正整数了. 既然我们会处理<span class="math inline">\(&gt;=\)</span>的情况，对于<span class="math inline">\(&lt;=\)</span>的情况就可以<strong>容斥</strong>,怎么容斥？每次枚举哪些条件一定不符合，这样就可以按照<span class="math inline">\(&gt;\)</span>的情况转化，然后用总方案<span class="math inline">\(-\)</span>奇数不符合<span class="math inline">\(+\)</span>偶数不符合，<span class="math inline">\(-+-+...\)</span>就可以得到最终的答案！ <strong>最难的地方</strong>出现了：如何计算方案数？容易得到是插板法裸题，但是模合数意义下的组合数？只能用<big><strong>拓展lucas定理</strong></big>! <a href="http://www.cnblogs.com/jianglangcaijin/p/3446839.html" target="_blank" rel="external">将狼踩尽前辈</a>介绍的很详细 # 代码 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100000</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">int</span> T,mod; </div><div class="line"><span class="keyword">int</span> n,n1,n2,m,ans;</div><div class="line"><span class="keyword">int</span> a[<span class="number">20</span>];</div><div class="line"><span class="function">LL <span class="title">Pow</span><span class="params">(LL n,LL m,LL mod)</span> </span>&#123;</div><div class="line">    LL ans=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(m&gt;<span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(m &amp; <span class="number">1</span>) ans=(LL)ans*n%mod;</div><div class="line">        n=(LL)n*n%mod; m &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function">LL <span class="title">Pow</span><span class="params">(LL n,LL m)</span> </span>&#123;</div><div class="line">    LL ans=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(m&gt;<span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(m &amp; <span class="number">1</span>) ans=ans*n;</div><div class="line">        n=n*n; m &gt;&gt;= <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line">LL x,y;</div><div class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a,LL b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>) &#123;</div><div class="line">        x=<span class="number">0</span>,y=<span class="number">1</span>;</div><div class="line">        <span class="keyword">return</span> b;</div><div class="line">    &#125;LL r=exgcd(b%a,a);</div><div class="line">    LL t=x; x=y - (b/a)*x; y=t;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"><span class="function">LL <span class="title">rev</span><span class="params">(LL a,LL b)</span> </span>&#123; exgcd(a,b); <span class="keyword">return</span> ((x%b)+b)%b; &#125;</div><div class="line"><span class="function">LL <span class="title">Calc</span><span class="params">(LL n,LL p,LL t)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    LL s=Pow(p,t),k=n/s,tmp=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=s;i++) <span class="keyword">if</span>(i%p)tmp=(LL)tmp*i%s;</div><div class="line">    LL ans=Pow(tmp,k,s);</div><div class="line">    <span class="keyword">for</span>(LL i=s*k+<span class="number">1</span>;i&lt;=n;i++) </div><div class="line">		<span class="keyword">if</span>(i%p) ans=(LL)ans*i%s;</div><div class="line">    <span class="keyword">return</span> (LL)ans*Calc(n/p,p,t)%s;</div><div class="line">&#125;</div><div class="line"><span class="function">LL <span class="title">C</span><span class="params">(LL n,LL m,LL p,LL t)</span> </span>&#123;</div><div class="line">    LL s=Pow(p,t),q=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(LL i=n;i;i/=p) q += i / p;</div><div class="line">    <span class="keyword">for</span>(LL i=m;i;i/=p) q -= i / p;</div><div class="line">    <span class="keyword">for</span>(LL i=n-m;i;i/=p) q -= i / p;</div><div class="line">    LL ans=Pow(p,q);</div><div class="line">    LL a=Calc(n,p,t),b=Calc(m,p,t),c=Calc(n-m,p,t);</div><div class="line">    <span class="keyword">return</span> (LL)(ans*a%s*rev(b,s)%s*rev(c,s))%s;</div><div class="line">&#125;</div><div class="line"><span class="function">LL <span class="title">China</span><span class="params">(LL A[],LL M[],LL cnt)</span> </span>&#123;</div><div class="line">    LL ans=<span class="number">0</span>,m,n=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=cnt;i++) n *= M[i];</div><div class="line">    <span class="keyword">for</span>(LL i=<span class="number">1</span>;i&lt;=cnt;i++) &#123;</div><div class="line">        m=n / M[i];</div><div class="line">        exgcd(M[i],m);</div><div class="line">        ans=(ans+(LL)y*m*A[i])%n;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (ans+n)%n;</div><div class="line">&#125;</div><div class="line">LL A[maxn],M[maxn],q[maxn],tt[maxn],cnt;</div><div class="line"><span class="function">LL <span class="title">Lucas</span><span class="params">(LL n,LL m,LL mod)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (n&lt;m) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++) </div><div class="line">		A[i]=C(n,m,q[i],tt[i]);</div><div class="line">    <span class="keyword">return</span> China(A,M,cnt);</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> cho[<span class="number">10</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> have)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> mm=m;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n1;i++) </div><div class="line">		<span class="keyword">if</span> (cho[i]) </div><div class="line">			mm-=a[i];</div><div class="line">	<span class="built_in">memset</span>(A,<span class="number">0</span>,<span class="keyword">sizeof</span>(A)); </div><div class="line">	<span class="keyword">if</span> (have&amp;<span class="number">1</span>)</div><div class="line">		ans=((ans-Lucas(mm<span class="number">-1</span>,n<span class="number">-1</span>,mod))%mod+mod)%mod; </div><div class="line">	<span class="keyword">else</span></div><div class="line">		ans=(ans+Lucas(mm<span class="number">-1</span>,n<span class="number">-1</span>,mod))%mod;</div><div class="line">&#125;</div><div class="line">		</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> have)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (x==n1+<span class="number">1</span>) </div><div class="line">		cal(have); </div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">		cho[x]=<span class="number">0</span>;</div><div class="line">		dfs(x+<span class="number">1</span>,have); </div><div class="line">		cho[x]=<span class="number">1</span>; </div><div class="line">		dfs(x+<span class="number">1</span>,have+<span class="number">1</span>);</div><div class="line">		cho[x]=<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">		</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;T,&amp;mod);</div><div class="line">	LL mmod=mod;</div><div class="line">	<span class="keyword">for</span>(LL i=<span class="number">2</span>;i*i&lt;=mmod;i++) <span class="keyword">if</span>(mmod%i==<span class="number">0</span>) &#123;</div><div class="line">        LL t=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(mmod%i==<span class="number">0</span>) t++,mmod /= i;</div><div class="line">        q[++cnt]=i;</div><div class="line">        tt[cnt]=t;</div><div class="line">        M[cnt]=Pow(i,t);</div><div class="line">    &#125;<span class="keyword">if</span>(mmod&gt;<span class="number">1</span>) &#123;</div><div class="line">        q[++cnt]=mmod;</div><div class="line">        tt[cnt]=<span class="number">1</span>;</div><div class="line">        M[cnt]=Pow(mmod,<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">while</span> (T--) &#123;</div><div class="line">		ans=<span class="number">0</span>;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;n1,&amp;n2,&amp;m); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n1;i++) </div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=n1+<span class="number">1</span>;i&lt;=n1+n2;i++) </div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=n1+<span class="number">1</span>;i&lt;=n1+n2;i++) </div><div class="line">			m-=(a[i]<span class="number">-1</span>); </div><div class="line">		dfs(<span class="number">1</span>,<span class="number">0</span>); </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans); </div><div class="line">	&#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 容斥原理 </tag>
            
            <tag> 拓展Lucas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 2555】SubString]]></title>
      <url>/bzoj2555/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个LCT+SAM的大板子题</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
2555: SubString
</h2>
Time Limit: <span class="math inline">\(30\)</span> <strong>Sec</strong> Memory Limit: <span class="math inline">\(512\)</span> <strong>MB</strong>
</center>
<h2 id="description">Description</h2>
<p>懒得写背景了，给你一个字符串<span class="math inline">\(init\)</span>，要求你支持两个操作 (1):在当前字符串的后面插入一个字符串 (2):询问字符串<span class="math inline">\(s\)</span>在当前字符串中出现了几次？(作为连续子串) 你必须在线支持这些操作。</p>
<h2 id="input">Input</h2>
<p>第一行一个数<span class="math inline">\(Q\)</span>表示操作个数 第二行一个字符串表示初始字符串<code>init</code> 接下来<span class="math inline">\(Q\)</span>行，每行2个字符串<code>Type,Str</code> <code>Type</code>是<code>ADD</code>的话表示在后面插入字符串。 <code>Type</code>是<code>QUERY</code>的话表示询问某字符串在当前字符串中出现了几次。 为了体现在线操作，你需要维护一个变量<code>mask</code>，初始值为<span class="math inline">\(0\)</span> 读入串<code>Str</code>之后，使用这个过程将之解码成真正询问的串<code>TrueStr</code>。 询问的时候，对<code>TrueStr</code>询问后输出一行答案<code>Result</code> 然后<code>mask = mask xor Result</code><br>
插入的时候，将TrueStr插到当前字符串后面即可。 ### HINT:<code>ADD</code>和<code>QUERY</code>操作的字符串都需要解压 <span class="math inline">\(100\%\)</span> 的数据字符串最终长度 <span class="math inline">\(&lt;=600000\)</span>，询问次数<span class="math inline">\(&lt;=10000\)</span>,询问总长度<span class="math inline">\(&lt;= 3000000\)</span> ## 数据范围 <span class="math inline">\(100\%\)</span> 的数据字符串最终长度<span class="math inline">\(&lt;=600000\)</span>，询问次数<span class="math inline">\(&lt;=10000\)</span>,询问总长度<span class="math inline">\(&lt;= 3000000\)</span> # 解题报告 算法想起来真是不麻烦，在线插入字符用<strong>后缀自动机</strong>解决很简便，出现次数在<strong>后缀自动机</strong>中子串出现次数用<code>right</code>集合大小表示，<code>right</code>可以在<code>parent</code>树上统计，实际上是<strong>查询子树和</strong>操作； <strong>parent</strong>树需要<strong>删边+加边</strong>，考虑用<strong>LCT</strong>搞，但是<strong>LCT</strong>不能统计子树信息，无所谓，当点<span class="math inline">\(sm[x]+=1\)</span>,令<span class="math inline">\(x\)</span>到根路径上所有点<span class="math inline">\(sm[y]+=1\)</span>，这样需要<strong>LCT</strong>是一棵有根<strong>LCT</strong>,<strong>splay</strong>中的信息不从左右儿子转移，而是由<strong>标记</strong>从上向下修改； 上午调了好久，因为lct的<strong>板子</strong>有个地方打错了，就是<code>rotate</code>中所有循环终止条件都应该是<code>root(x)</code>，昨天打残<code>splay</code>，复习板子又把<code>lct</code>搞坏了，真是省选滚粗节奏呀! # 代码 不是很长，但可以用<strong>后缀平衡树或二分+普通平衡树+sa</strong>取代，想学习一下； <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1200002</span>; </div><div class="line"><span class="keyword">int</span> mask=<span class="number">0</span>,Q; </div><div class="line"><span class="keyword">char</span> s[<span class="number">3000001</span>],type[<span class="number">20</span>];</div><div class="line"><span class="built_in">string</span> chars; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LCT</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> son[N][<span class="number">2</span>],f[N],mark[N],sm[N],sta[N]; </div><div class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">root</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> (son[f[x]][<span class="number">0</span>]!=x&amp;&amp;son[f[x]][<span class="number">1</span>]!=x); </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (!x) <span class="keyword">return</span>;</div><div class="line">		sm[x]+=y, mark[x]+=y; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (mark[x]) &#123; </div><div class="line">			<span class="keyword">if</span> (son[x][<span class="number">1</span>]) add(son[x][<span class="number">1</span>],mark[x]); </div><div class="line">			<span class="keyword">if</span> (son[x][<span class="number">0</span>]) add(son[x][<span class="number">0</span>],mark[x]); </div><div class="line">			mark[x]=<span class="number">0</span>; </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> y=f[x],z=f[y],d=(son[y][<span class="number">1</span>]==x); </div><div class="line">		f[son[x][d^<span class="number">1</span>]]=y,son[y][d]=son[x][d^<span class="number">1</span>]; </div><div class="line">		<span class="keyword">if</span> (!root(y)) son[z][son[z][<span class="number">1</span>]==y]=x; </div><div class="line">		f[x]=z,f[y]=x,son[x][d^<span class="number">1</span>]=y; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> top=<span class="number">1</span>,i=x; sta[top]=x; </div><div class="line">		<span class="keyword">while</span> (!root(i)) sta[++top]=i=f[i]; </div><div class="line">		<span class="keyword">while</span> (top) down(sta[top]),top--; </div><div class="line">		<span class="keyword">for</span> (i=f[x];!root(x);rotate(x),i=f[x]) &#123;</div><div class="line">			<span class="keyword">if</span> (root(i)) <span class="keyword">continue</span>; </div><div class="line">			<span class="keyword">if</span> ((son[i][<span class="number">1</span>]==x)^(son[f[i]][<span class="number">1</span>]==i)) rotate(x); </div><div class="line">			<span class="keyword">else</span> rotate(i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		 <span class="keyword">for</span> (<span class="keyword">int</span> t=<span class="number">0</span>;x;t=x,x=f[x]) </div><div class="line">		 	splay(x),son[x][<span class="number">1</span>]=t;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">		f[x]=y,access(y),splay(y),add(y,sm[x]); </div><div class="line">	&#125; </div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		access(x),splay(x),add(son[x][<span class="number">0</span>],-sm[x]); </div><div class="line">		f[son[x][<span class="number">0</span>]]=<span class="number">0</span>, son[x][<span class="number">0</span>]=<span class="number">0</span>; </div><div class="line">	&#125;</div><div class="line">&#125; lct; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SAM</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> son[N][<span class="number">100</span>],val[N],par[N]; </div><div class="line">	<span class="keyword">int</span> p,q,np,nq,root,last,cnt; </div><div class="line">	SAM() &#123; root=last=cnt=<span class="number">1</span>; &#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">getstring</span><span class="params">(<span class="keyword">int</span> mask)</span> </span>&#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s),chars=s; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;chars.length();++j) &#123;</div><div class="line">        	mask=(mask*<span class="number">131</span>+j)%chars.length();</div><div class="line">        	<span class="keyword">char</span> t=chars[j];</div><div class="line">        	chars[j]=chars[mask],chars[mask]=t;</div><div class="line">    	&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		p=last,np=++cnt,last=np,lct.sm[np]=<span class="number">1</span>,val[np]=val[p]+<span class="number">1</span>; </div><div class="line">		<span class="keyword">while</span> (p&amp;&amp;!son[p][x]) son[p][x]=np,p=par[p]; </div><div class="line">		<span class="keyword">if</span> (!p) par[np]=root, lct.link(np,root); </div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			q=son[p][x]; </div><div class="line">			<span class="keyword">if</span> (val[p]+<span class="number">1</span>==val[q]) par[np]=q,lct.link(np,q); </div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				 nq=++cnt, val[nq]=val[p]+<span class="number">1</span>,lct.sm[nq]=<span class="number">0</span>; </div><div class="line">				 <span class="built_in">memcpy</span>(son[nq],son[q],<span class="keyword">sizeof</span>(son[q])); </div><div class="line">				 par[nq]=par[q],lct.link(nq,par[q]); </div><div class="line">				 par[q]=par[np]=nq,lct.cut(q); </div><div class="line">				 lct.link(q,nq),lct.link(np,nq);</div><div class="line">				 <span class="keyword">while</span> (p&amp;&amp;son[p][x]==q) son[p][x]=nq,p=par[p];</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123; </div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s); <span class="keyword">int</span> l=<span class="built_in">strlen</span>(s); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;++i) insert(s[i]-<span class="string">'A'</span>); </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</div><div class="line">		getstring(mask); <span class="keyword">int</span> l=chars.length();</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;++i) </div><div class="line">			insert(chars[i]-<span class="string">'A'</span>); </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</div><div class="line">		getstring(mask); <span class="keyword">int</span> l=chars.length(),i,x;</div><div class="line">		<span class="keyword">for</span> (i=<span class="number">0</span>,x=root;i&lt;l;++i)</div><div class="line">			<span class="keyword">if</span> (son[x][chars[i]-<span class="string">'A'</span>]) x=son[x][chars[i]-<span class="string">'A'</span>]; </div><div class="line">			<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">		lct.splay(x);  </div><div class="line">		<span class="keyword">return</span> lct.sm[x];</div><div class="line">	&#125;</div><div class="line">&#125; sam;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	freopen(<span class="string">"bzoj2555.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>); </div><div class="line">	freopen(<span class="string">"bzoj2555.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>); </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Q); sam.build(),mask=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,tmp;i&lt;=Q;++i) &#123;</div><div class="line">		<span class="built_in">scanf</span>(<span class="string">"%s"</span>,type); </div><div class="line">		<span class="keyword">if</span> (type[<span class="number">0</span>]==<span class="string">'A'</span>) sam.add(); </div><div class="line">		<span class="keyword">else</span> &#123;	</div><div class="line">			tmp=sam.query();</div><div class="line">			<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,tmp),mask^=tmp; </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 字符串题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LCT </tag>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4561】[JLoi2016]圆的异或并]]></title>
      <url>/bzoj4561/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个经典的扫描线问题</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
4561: [JLoi2016]圆的异或并
</h2>
Time Limit: 30 Sec Memory Limit: 256 MB
</center>
<h2 id="description">Description</h2>
<p>在平面直角坐标系中给定<span class="math inline">\(N\)</span>个圆。已知这些圆两两没有交点，即两圆的关系只存在相离和包含。求这些圆的异或面积并。异或面积并为：当一片区域在奇数个圆内则计算其面积，当一片区域在偶数个圆内则不考虑。 ## Input</p>
<p>第一行包含一个正整数<span class="math inline">\(N\)</span>，代表圆的个数。接下来<span class="math inline">\(N\)</span>行，每行<span class="math inline">\(3\)</span>个非负整数<span class="math inline">\(x,y,r\)</span>，表示一个圆心在<span class="math inline">\((x,y)\)</span>，半径为<span class="math inline">\(r\)</span>的圆。保证<span class="math inline">\(|x|,|y|≤10^8，r&gt;0,N&lt;=200000\)</span></p>
<h2 id="output">Output</h2>
<p>仅一行一个整数，表示所有圆的异或面积并除以圆周率<span class="math inline">\(π\)</span>的结果。 # 解题报告 考场上打了暴力滚粗了。 如果知道每个圆包含他的半径最小的圆，那建出树，用圆的面积乘上<span class="math inline">\((-1)^h\)</span>求和就是答案，这就是<string>暴力</string>的打法； 正解是维护一条竖直(或水平)扫描线上每个圆的交点坐标，将每个圆最靠左，最靠右的两点的横坐标上放置左右括号$ ( )<span class="math inline">\(,标记该圆加入、退出扫描线。每个\)</span>i$圆加入扫描线的时候，查询 $ y_i $ 上方的第一个点 <span class="math inline">\(y_j\)</span> .很显然，如果 <span class="math inline">\(y_j\)</span> 是一个圆 <span class="math inline">\(j\)</span> 在扫描线上偏下的点，那么<span class="math inline">\(i\)</span>与<span class="math inline">\(j\)</span>并列在同一层，系数相同;如果 $ y_j $ 是<span class="math inline">\(j\)</span>在扫描线上偏上的点，那么<span class="math inline">\(i\)</span>在<span class="math inline">\(j\)</span>内，系数<span class="math inline">\(k*(-1)\)</span>； 查询后继，<code>set</code>就可以</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200001</span>;</div><div class="line"><span class="keyword">char</span> *cp=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">6000000</span>);</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">circle</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> x,y,r; </div><div class="line">	circle(<span class="keyword">int</span> x=<span class="number">0</span>,<span class="keyword">int</span> y=<span class="number">0</span>,<span class="keyword">int</span> r=<span class="number">0</span>)</div><div class="line">		:x(x),y(y),r(r)&#123;&#125;</div><div class="line">&#125; c[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> p,x,k;</div><div class="line">	point(<span class="keyword">int</span> p=<span class="number">0</span>,<span class="keyword">int</span> x=<span class="number">0</span>,<span class="keyword">int</span> k=<span class="number">0</span>)</div><div class="line">		:p(p),x(x),k(k)&#123;&#125;</div><div class="line">&#125; p[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">height</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> p,k;</div><div class="line">	height(<span class="keyword">int</span> p=<span class="number">0</span>,<span class="keyword">int</span> k=<span class="number">0</span>)</div><div class="line">		:p(p),k(k)&#123;&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">int</span> n,tot,tmp,k[N];</div><div class="line"><span class="built_in">set</span>&lt;height&gt; s;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span> <span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;*cp&lt;<span class="string">'0'</span>||*cp&gt;<span class="string">'9'</span>;cp++)</div><div class="line">		<span class="keyword">if</span> (*cp==<span class="string">'-'</span>) f=<span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;*cp&gt;=<span class="string">'0'</span>&amp;&amp;*cp&lt;=<span class="string">'9'</span>;cp++)</div><div class="line">		x=x*<span class="number">10</span>+*cp<span class="number">-48</span>; </div><div class="line">	x*=f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(point a,point b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.x&lt;b.x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">cal</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> x*x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">mul</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> y)</span></span>&#123;</div><div class="line">	 <span class="keyword">return</span> x*y;</div><div class="line">&#125;</div><div class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> height a,<span class="keyword">const</span> height b)&#123;</div><div class="line">	<span class="keyword">double</span> x=(<span class="keyword">double</span>)c[a.p].y+(<span class="keyword">double</span>)a.k*<span class="built_in">sqrt</span>(cal(c[a.p].r)-cal(tmp-c[a.p].x));</div><div class="line">	<span class="keyword">double</span> y=(<span class="keyword">double</span>)c[b.p].y+(<span class="keyword">double</span>)b.k*<span class="built_in">sqrt</span>(cal(c[b.p].r)-cal(tmp-c[b.p].x));</div><div class="line">	<span class="keyword">return</span> x!=y?x&lt;y:a.k&lt;b.k;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("circle.in","r",stdin); </span></div><div class="line"><span class="comment">//	freopen("circle.out","w",stdout);</span></div><div class="line">	fread(cp,<span class="number">1</span>,<span class="number">6000000</span>,<span class="built_in">stdin</span>);</div><div class="line">	in(n); <span class="keyword">int</span> x,y,z; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">		in(x),in(y),in(z); </div><div class="line">		c[i]=circle(x,y,z); </div><div class="line">		p[++tot]=point(i,x-z,<span class="number">1</span>); </div><div class="line">		p[++tot]=point(i,x+z,<span class="number">-1</span>); </div><div class="line">	&#125;</div><div class="line">	sort(p+<span class="number">1</span>,p+<span class="number">1</span>+tot,cmp);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) &#123;</div><div class="line">		tmp=p[i].x;</div><div class="line">		<span class="keyword">if</span> (p[i].k==<span class="number">1</span>) &#123;</div><div class="line">			<span class="built_in">set</span>&lt;height&gt;:: iterator it;</div><div class="line">			it=s.upper_bound(height(p[i].p,<span class="number">1</span>));</div><div class="line">			<span class="keyword">if</span> (it==s.end())</div><div class="line">				k[p[i].p]=<span class="number">1</span>;</div><div class="line">			<span class="keyword">else</span> </div><div class="line">				<span class="keyword">if</span> (it-&gt;k==<span class="number">1</span>)</div><div class="line">					k[p[i].p]=k[it-&gt;p]*(<span class="number">-1</span>);</div><div class="line">				<span class="keyword">else</span></div><div class="line">					k[p[i].p]=k[it-&gt;p];</div><div class="line">			s.insert(height(p[i].p,<span class="number">1</span>)); </div><div class="line">			s.insert(height(p[i].p,<span class="number">-1</span>)); </div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			s.erase(height(p[i].p,<span class="number">1</span>)); </div><div class="line">			s.erase(height(p[i].p,<span class="number">-1</span>)); </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)	</div><div class="line">		ans=ans+mul(k[i],cal(c[i].r)); </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> STL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4383】[POI2015]Pustynia]]></title>
      <url>/bzoj4348/</url>
      <content type="html"><![CDATA[<blockquote>
<p>线段树优化建图的裸题？</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
4383: [POI2015]Pustynia
</h2>
Time Limit: 10 Sec Memory Limit: 128 MBSec Special Judge
</center>
<h2 id="description">Description</h2>
<p>给定一个长度为<span class="math inline">\(n\)</span>的正整数序列<span class="math inline">\(a\)</span>，每个数都在<span class="math inline">\(1\)</span>到<span class="math inline">\(10^9\)</span>范围内，告诉你其中<span class="math inline">\(s\)</span>个数，并给出<span class="math inline">\(m\)</span>条信息，每条信息包含三个数<span class="math inline">\(l,r,k\)</span>以及接下来<span class="math inline">\(k\)</span>个正整数，表示<span class="math inline">\(a[l],a[l+1],...,a[r-1],a[r]\)</span>里这<span class="math inline">\(k\)</span>个数中的任意一个都比任意一个剩下的<span class="math inline">\(r-l+1-k\)</span>个数大（严格大于，即没有等号）。 请任意构造出一组满足条件的方案，或者判断无解。 <!--more--> ##Input</p>
<p>第一行包含三个正整数<span class="math inline">\(n,s,m\)</span>(<span class="math inline">\(1&lt;=s&lt;=n&lt;=100000\)</span>，<span class="math inline">\(1&lt;=m&lt;=200000\)</span>)。 接下来s行，每行包含两个正整数<span class="math inline">\(p[i],d[i]\)</span>(<span class="math inline">\(1&lt;=p[i]&lt;=n，1&lt;=d[i]&lt;=10^9\)</span>)，表示已知<span class="math inline">\(a[p[i]]=d[i]\)</span>，保证<span class="math inline">\(p[i]\)</span>递增。 接下来m行，每行一开始为三个正整数<span class="math inline">\(l[i],r[i],k[i]\)</span>(<span class="math inline">\(1&lt;=l[i] &lt; r[i]&lt;=n，1&lt;=k[i]&lt;=r[i]-l[i]\)</span>)，接下来<span class="math inline">\(k[i]\)</span>个正整数<span class="math inline">\(x[1],x[2],...,x[k[i]]\)</span>(<span class="math inline">\(l[i]&lt;=x[1] &lt; x[2]&lt;... &lt; x[k[i]]&lt;=r[i]\)</span>)，表示这<span class="math inline">\(k[i]\)</span>个数中的任意一个都比任意一个剩下的<span class="math inline">\(r[i]-l[i]+1-k[i]\)</span>个数大。<span class="math inline">\(\sum k &lt;= 300000\)</span></p>
<h2 id="output">Output</h2>
<p>若无解，则输出NIE。 否则第一行输出TAK，第二行输出<span class="math inline">\(n\)</span>个正整数，依次输出序列<span class="math inline">\(a\)</span>中每个数。</p>
<h1 id="解题报告">解题报告</h1>
<p>很显然的一个做法：将所有大于关系<span class="math inline">\(x&gt;y\)</span>形象为<span class="math inline">\(p_{y \to x}=1\)</span>，这样就可以得到每一个<span class="math inline">\(a_i\)</span>的最小值. 这样的大于关系是<span class="math inline">\(O(n^2)\)</span>的时空复杂度，难以承受；</p>
<p>因为每次连边的点可以构成一个区间而一个区间可以被拆成<span class="math inline">\(\log n\)</span>个子区间，所以可以使用线段树优化连边；</p>
<p>具体做法是,在建立线段树的<code>build</code>过程中，树上连接<span class="math inline">\(p_{son \to father}=0\)</span>,对于每个<span class="math inline">\(m\)</span>，新建一个节点<code>trtot</code>，向<span class="math inline">\(k\)</span>个数连接边权为<span class="math inline">\(0\)</span>的边，然后线段树的<code>ins</code>操作，把区间子对应节点向<code>trtot</code>连 边权为<span class="math inline">\(1\)</span>的边；然后跑拓扑排序就可以;</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1000000000</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">400001</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">2000001</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> next,to,v; </div><div class="line">	E(<span class="keyword">int</span> next=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,<span class="keyword">int</span> v=<span class="number">0</span>)</div><div class="line">		:next(next),to(to),v(v)&#123;&#125;</div><div class="line">&#125; e[M];</div><div class="line"><span class="keyword">int</span> n,m,cnt,trtot,tot,rt,head[N],enter[N];</div><div class="line"><span class="keyword">int</span> ls[N],rs[N],pos[N],h[N],a[N],f[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</div><div class="line">	<span class="keyword">char</span> ch=getchar(); </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()); </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar())</div><div class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span> </span>&#123;</div><div class="line">	e[++tot]=E(head[x],y,z); </div><div class="line">	head[x]=tot,enter[y]++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;k,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">	k=++trtot; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (l==r) &#123;</div><div class="line">		pos[l]=k; <span class="keyword">return</span>; </div><div class="line">	&#125;</div><div class="line">	build(ls[k],l,mid),build(rs[k],mid+<span class="number">1</span>,r);</div><div class="line">	add(ls[k],k,<span class="number">0</span>),add(rs[k],k,<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (l==x&amp;&amp;r==y) &#123;</div><div class="line">		add(k,trtot,<span class="number">1</span>); <span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (y&lt;=mid) </div><div class="line">		ins(ls[k],l,mid,x,y); </div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="keyword">if</span> (x&gt;mid) </div><div class="line">			ins(rs[k],mid+<span class="number">1</span>,r,x,y); </div><div class="line">		<span class="keyword">else</span> &#123; </div><div class="line">			ins(ls[k],l,mid,x,mid); </div><div class="line">			ins(rs[k],mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,y);</div><div class="line">		&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	in(n),in(cnt),in(m);<span class="keyword">int</span> i,x;</div><div class="line">	build(rt,<span class="number">1</span>,n);</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=cnt; i++)</div><div class="line">		in(x),in(a[pos[x]]);</div><div class="line">	<span class="keyword">int</span> l,r,t;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=m;i++)&#123;</div><div class="line">		in(l),l--,in(r),in(t);</div><div class="line">		trtot++;</div><div class="line">		<span class="keyword">while</span> (t--) &#123;</div><div class="line">			in(x),add(trtot,pos[x],<span class="number">0</span>);</div><div class="line">			<span class="keyword">if</span> (l+<span class="number">1</span>&lt;x) ins(rt,<span class="number">1</span>,n,l+<span class="number">1</span>,x<span class="number">-1</span>); </div><div class="line">			l=x;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (x&lt;r) ins(rt,<span class="number">1</span>,n,x+<span class="number">1</span>,r);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> first=<span class="number">0</span>,tail=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>; i&lt;=trtot; i++) </div><div class="line">		<span class="keyword">if</span> (!enter[i])</div><div class="line">			h[++tail]=i,f[i]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">while</span> (first&lt;tail) &#123;</div><div class="line">		x=h[++first];</div><div class="line">		<span class="keyword">if</span> (f[x]&gt;inf) &#123;</div><div class="line">			<span class="built_in">puts</span>(<span class="string">"NIE"</span>); <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (f[x]&gt;a[x] &amp;&amp; a[x]) &#123;</div><div class="line">			<span class="built_in">puts</span>(<span class="string">"NIE"</span>); <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">		&#125; <span class="keyword">else</span> </div><div class="line">			f[x]=max(f[x],a[x]);</div><div class="line">		<span class="keyword">for</span> (i=head[x];i;i=e[i].next) &#123;</div><div class="line">			t=e[i].to,f[t]=max(f[t],f[x]+e[i].v);</div><div class="line">			enter[t]--; </div><div class="line">			<span class="keyword">if</span> (!enter[t]) h[++tail]=t;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (tail&lt;trtot) &#123;</div><div class="line">		<span class="built_in">puts</span>(<span class="string">"NIE"</span>); <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">puts</span>(<span class="string">"TAK"</span>);</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,f[pos[i]]);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 1178】[Apio2009]CONVENTION会议中心]]></title>
      <url>/bzoj1178/</url>
      <content type="html"><![CDATA[<blockquote>
<p>经典贪心算法变得这么难？</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
1178: [Apio2009]CONVENTION会议中心
</h2>
Time Limit: 15 Sec Memory Limit: 162 MB
</center>
<h2 id="description">Description</h2>
<p>Siruseri政府建造了一座新的会议中心。许多公司对租借会议中心的会堂很感兴趣，他们希望能够在里面举行会议。 对于一个客户而言，仅当在开会时能够独自占用整个会堂，他才会租借会堂。会议中心的销售主管认为：最好的策略应该是将会堂租借给<strong>尽可能多</strong>的客户。显然，有可能存在不止一种满足要求的策略。 <!--more--> 例如下面的例子。总共有<span class="math inline">\(4\)</span>个公司。他们对租借会堂发出了请求，并提出了他们所需占用会堂的起止日期（如下表所示）。</p>
<table>
<thead>
<tr class="header">
<th>公司</th>
<th align="center">开始日期</th>
<th align="right">结束日期</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td align="center">4</td>
<td align="right">9</td>
</tr>
<tr class="even">
<td>2</td>
<td align="center">9</td>
<td align="right">11</td>
</tr>
<tr class="odd">
<td>3</td>
<td align="center">13</td>
<td align="right">19</td>
</tr>
<tr class="even">
<td>4</td>
<td align="center">10</td>
<td align="right">17</td>
</tr>
</tbody>
</table>
<p>上例中，最多将会堂租借给两家公司。租借策略分别是租给公司<span class="math inline">\(1\)</span>和公司<span class="math inline">\(3\)</span>，或是公司<span class="math inline">\(2\)</span>和公司<span class="math inline">\(3\)</span>，也可以是公司<span class="math inline">\(1\)</span>和公司<span class="math inline">\(4\)</span>。注意会议中心一天最多租借给一个公司，所以公司<span class="math inline">\(1\)</span>和公司<span class="math inline">\(2\)</span>不能同时租借会议中心，因为他们在第九天重合了。 销售主管为了公平起见，决定按照如下的程序来确定选择何种租借策略：首先，将租借给客户数量最多的策略作为候选，将所有的公司按照他们发出请求的顺序编号。对于候选策略，将策略中的每家公司的编号按升序排列。最后，选出其中<strong>字典序最小</strong>的候选策略作为最终的策略。 例中，会堂最终将被租借给公司<span class="math inline">\(1\)</span>和公司<span class="math inline">\(3\)</span>：<span class="math inline">\(3\)</span>个候选策略是$ {(1,3),(2,3),(1,4)}<span class="math inline">\(。而在字典序中\)</span>(1,3) &lt; (1,4) &lt; (2,3)$。 你的任务是帮助销售主管确定应该将会堂租借给哪些公司。</p>
<h2 id="input">Input</h2>
<p>输入的第一行有一个整数<span class="math inline">\(N\)</span>，表示发出租借会堂申请的公司的个数。第<span class="math inline">\(2\)</span>到第<span class="math inline">\(N+1\)</span>行每行有<span class="math inline">\(2\)</span>个整数。第<span class="math inline">\(i+1\)</span>行的整数表示第<span class="math inline">\(i\)</span>家公司申请租借的起始和终止日期。对于每个公司的申请，起始日期为不小于<span class="math inline">\(1\)</span>的整数，终止日期为不大于<span class="math inline">\(10^9\)</span>的整数。<span class="math inline">\(N≤200000\)</span></p>
<h2 id="output">Output</h2>
<p>输出的第一行应有一个整数<span class="math inline">\(M\)</span>，表示最多可以租借给多少家公司。第二行应列出<span class="math inline">\(M\)</span>个数，表示最终将会堂租借给哪些公司。</p>
<h2 id="hint">HINT</h2>
<p>修复后数据:JudgeOnline/upload/201605/dd.rar # 解题报告 前段时间做的题，感谢当时<strong>Rivendell学长</strong>给予的指导 有一个<strong>众所周知</strong>的<strong>贪心策略</strong>用来求最多选择多少个线段使他们两两不相交：去包含后，按照<strong>右端点</strong>排序，每次选择可行的右端点最靠左的线段;</p>
<ul>
<li><big>简略</big>证明：①去包含，如果选择包含其他线段的线段，那么将这条线段替换为它所包含的线段，一定不会变劣；②选择右端点最靠左的方案，在<strong>方案数相同情况下，对剩余线段影响最小</strong>，与剩余线段交换不会变优；</li>
</ul>
<p>现在要求<strong>字典序最小</strong>，考虑字典序概念的特殊性：从前向后出现第一个不等号即可确定。 所以按照字典序从小到大的顺序，如果①能够选择当前线段，并且②不会影响最终的答案，那么一定选择当前线段。</p>
<ul>
<li>能够选择：可以使用<strong>线段树</strong>将已经选择的线段染色，查询区间是否存在染色；也可以使用<strong>平衡树</strong>（<code>set</code>即可）,将选择的线段的左右端点插入，每次查询区间内是否有端点，区间是否在一对左右端点之间。</li>
<li>不影响最终答案：摘出当前线段<span class="math inline">\([s,e]\)</span>所在的最大未选择区间<span class="math inline">\([ll,rr]\)</span>,当前线段将该区间划分为<span class="math inline">\([ll,s-1],[s,e],[e+1,rr]\)</span> 设不强制放任何线段情况下，区间<span class="math inline">\([l,r]\)</span>中，最多选择的线段数为<span class="math inline">\(Q_{l,r}\)</span> ,那么当前线段不影响最终答案的条件就是 <span class="math inline">\(Q_{ll,s-1}+1+Q_{e+1,rr}=Q_{ll,rr}\)</span>这很显然。</li>
</ul>
<p>问题变成如何处理<span class="math inline">\(Q_{l,r}\)</span>直接预处理不可能，但很好的一点是从<span class="math inline">\(i\)</span>开始选择<span class="math inline">\(j\)</span>个线段最近的结束点这个信息是可合并信息，可以<strong>倍增!</strong> 令<span class="math inline">\(f[i][j]\)</span>表示从<span class="math inline">\(i\)</span>点开始选择<span class="math inline">\(2^j\)</span>个线段最近的结束位置，那么<span class="math inline">\(f[i][j]=f[f[i][j-1]+1][j-1]\)</span>,有了这个<span class="math inline">\(st\)</span>表，就可以<span class="math inline">\(log^n\)</span>查询<span class="math inline">\(Q_{l,r}\)</span>了。 总时间复杂度<span class="math inline">\(O(log^n)\)</span></p>
<h1 id="代码">代码</h1>
<p>我以后会好好起变量名的… <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> M 200001</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> f[M&lt;&lt;<span class="number">1</span>][<span class="number">19</span>],l[M&lt;&lt;<span class="number">1</span>],L[M&lt;&lt;<span class="number">1</span>],N,cnt,m,n;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> s,e,id;</div><div class="line">&#125;a[M],b[M],c[M];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rec</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> x,k;</div><div class="line">&#125;le,ri;</div><div class="line"><span class="built_in">set</span>&lt;rec&gt; s;</div><div class="line"><span class="built_in">set</span>&lt;rec&gt;::iterator itl,itr;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(data a,data b)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (a.s==b.s) <span class="keyword">return</span> a.e&gt;b.e; </div><div class="line">    <span class="keyword">return</span> a.s&lt;b.s;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(data a,data b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> a.id&lt;b.id;</div><div class="line">&#125;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(rec a,rec b) &#123;</div><div class="line">    <span class="keyword">return</span> a.x&lt;b.x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ST</span><span class="params">()</span> </span>&#123;</div><div class="line">    sort(l+<span class="number">1</span>,l+<span class="number">1</span>+m);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</div><div class="line">        <span class="keyword">if</span> (i==<span class="number">1</span>||l[i]!=l[i<span class="number">-1</span>])</div><div class="line">            L[++N]=l[i];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">        a[i].s=lower_bound(L+<span class="number">1</span>,L+<span class="number">1</span>+N,a[i].s)-L;</div><div class="line">        a[i].e=lower_bound(L+<span class="number">1</span>,L+<span class="number">1</span>+N,a[i].e)-L;</div><div class="line">    &#125;</div><div class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp1);</div><div class="line">    <span class="keyword">int</span> la=inf;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--)</div><div class="line">        <span class="keyword">if</span> (a[i].e&lt;la) b[++cnt]=a[i],la=a[i].e;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</div><div class="line">        c[i]=b[cnt-i+<span class="number">1</span>];</div><div class="line">    <span class="built_in">memcpy</span>(b,c,<span class="keyword">sizeof</span>(c));</div><div class="line">    <span class="built_in">memset</span>(f,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(f));</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=N,j=cnt;i;i--) &#123;</div><div class="line">        f[i][<span class="number">0</span>]=f[i+<span class="number">1</span>][<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span> (b[j].s==i) f[i][<span class="number">0</span>]=min(f[i][<span class="number">0</span>],b[j].e);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">17</span>;k++)</div><div class="line">            <span class="keyword">if</span> (f[i][k<span class="number">-1</span>]!=inf)</div><div class="line">                f[i][k]=f[f[i][k<span class="number">-1</span>]+<span class="number">1</span>][k<span class="number">-1</span>];</div><div class="line">        <span class="keyword">while</span> (b[j].s==i)</div><div class="line">            j--;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">17</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        <span class="keyword">if</span> (f[l][i]&lt;=r)</div><div class="line">            l=f[l][i]+<span class="number">1</span>,ans+=<span class="number">1</span>&lt;&lt;i;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> ch=getchar();</div><div class="line">	<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar())</div><div class="line">		<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar())</div><div class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>;</div><div class="line">	<span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	n=read();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">    	a[i].s=read(),a[i].e=read();</div><div class="line">	    a[i].id=i;</div><div class="line">        l[++m]=a[i].s,l[++m]=a[i].e;</div><div class="line">    &#125;</div><div class="line">    ST();<span class="keyword">int</span> nn;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,nn=Calc(<span class="number">1</span>,N));</div><div class="line">    sort(a+<span class="number">1</span>,a+<span class="number">1</span>+n,cmp2);</div><div class="line">    le.x=<span class="number">0</span>,le.k=<span class="number">2</span>,ri.x=N+<span class="number">1</span>,ri.k=<span class="number">1</span>;</div><div class="line">    s.insert(le),s.insert(ri);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">        le.x=a[i].s,le.k=<span class="number">1</span>,ri.x=a[i].e,ri.k=<span class="number">2</span>;</div><div class="line">        itl=s.lower_bound(le);</div><div class="line">        itr=s.upper_bound(ri);</div><div class="line">        <span class="keyword">if</span> (itl!=itr||itr-&gt;k==<span class="number">2</span>) <span class="keyword">continue</span>;</div><div class="line">        itl--;</div><div class="line">        <span class="keyword">int</span> ll=itl-&gt;x+<span class="number">1</span>,rr=itr-&gt;x<span class="number">-1</span>;</div><div class="line">        <span class="keyword">if</span> (Calc(ll,a[i].s<span class="number">-1</span>)+Calc(a[i].e+<span class="number">1</span>,rr)+<span class="number">1</span>!=Calc(ll,rr))</div><div class="line">            <span class="keyword">continue</span>;</div><div class="line">        s.insert(le),s.insert(ri);</div><div class="line">        nn--;</div><div class="line">        <span class="keyword">if</span> (nn)</div><div class="line">        	<span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i].id);</div><div class="line">        <span class="keyword">else</span> </div><div class="line">        	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[i].id);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 倍增 </tag>
            
            <tag> 平衡树 </tag>
            
            <tag> STL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4422】[Cerc2015]Cow Confinement]]></title>
      <url>/bzoj4422/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个很有难度的题呦。。。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
4422: [Cerc2015]Cow Confinement
</h2>
</center>
<h2 id="description">Description</h2>
<p>一个<span class="math inline">\(10^6\)</span>行<span class="math inline">\(10^6\)</span>列的网格图，上面有一些牛、花和一些矩形围栏，围栏在格子的边界上，牛和花在格子里，牛只能向下或向右走，牛也不能穿过围栏和地图边界，求每头牛它能到达的花的数量。注意栅栏不会相交</p>
<h2 id="input">Input</h2>
<p>第一行一个数f表示矩形围栏的数量。 接下来f行，每行四个数<span class="math inline">\(x1,y1,x2,y2\)</span>，表示<span class="math inline">\((x1,y1)\)</span>在围栏内部矩形的左上角，<span class="math inline">\((x2,y2)\)</span>在右下角。 接下来一行一个数m表示花的数量。 接下来m行每行两个数<span class="math inline">\(x,y\)</span>，表示在<span class="math inline">\((x,y)\)</span>处有一朵花。 接下来一行一个数<span class="math inline">\(n\)</span>表示牛的数量。 接下来n行每行两个数<span class="math inline">\(x,y\)</span>，表示在<span class="math inline">\((x,y)\)</span>处有一头牛。</p>
<h2 id="output">Output</h2>
<p>总共n行，每行一个数ans，第i个数表示第i头牛能到ans个花。</p>
<h1>
解题报告
</h1>
<br>
<p>
考试的时候连暴力都没有打出来，真是十分的失败。<br> 介绍一点部分分的做法：
</p>
<ol style="list-style-type: decimal">
<li>如果<span class="math inline">\(x,y\)</span>比较小的话，那么很显然可以直接暴力<code>dfs</code></li>
<li>如果<span class="math inline">\(n\)</span>比较小的话，可以离散化，然后暴力$O ( n^3 ) $</li>
<li>同样如果要做到<span class="math inline">\(O \left( n^2 \right)\)</span> ,就需要dp，也就是令<span class="math inline">\(f[i][j]=f[i][j+1]+f[i+1][j]-f[i+1][j+1]\)</span> ，简单易懂。</li>
</ol>
<p>考虑优化上述dp,离线+线段树，有这样一个事情， 就是cows只能向下或者向右走，这样对于一个点<span class="math inline">\((x,y)\)</span>，他可能拥有<span class="math inline">\((x+1,y)\)</span> <span class="math inline">\((x,y+1)\)</span>无法到达的一些flowers，用类似于差分的想法， 令<span class="math inline">\(f[i]\)</span>表示当前行<span class="math inline">\(f[i+1]\)</span>无法到达的花朵，实际上cow<span class="math inline">\((x,y)\)</span>的答案就是找到下方第一个栅栏（实际上是横向的一条边）<span class="math inline">\((x_b,y)\)</span>,查询当前列<span class="math inline">\(y\)</span>一个差分的和<span class="math inline">\((x,x_b)\)</span></p>
<p>问题更加单纯了，就是转移，详细一点说就是从<span class="math inline">\(y+1\)</span>到<span class="math inline">\(y\)</span>，差分信息怎样变化</p>
<ol style="list-style-type: decimal">
<li>没有栅栏，只有花？只需要<strong>单点修改</strong>下就好</li>
<li><img src="http://img.blog.csdn.net/20160810180037807" alt="进入栅栏"> 出现一个栅栏? ，也就是进入栅栏的边界，设<span class="math inline">\((x_l ,x_r)\)</span>是栅栏的上下坐标，很显然，<span class="math inline">\((x_l,x_r)\)</span>部分的差分应该删掉，并且标记为被覆盖，而<span class="math inline">\(x_l-1\)</span>这个位置，会获得<span class="math inline">\((x_l,x_r)\)</span>部分的差分，这点很容易，难以想到的一点是，此时需要询问一下<span class="math inline">\(cow(x_r+1,y+1)\)</span>,并记录这个数值，为3做准备。 <img src="http://img.blog.csdn.net/20160810181056615" alt="出栅栏"><br>
这个首先也需要做一个区间归零，然后要在<span class="math inline">\((x_l-1,y)\)</span>的位置减去这个区间加入时做的询问，原因是没有了栅栏的限制，下方的差分会计算两次。这个我感受了好久。</li>
</ol>
<h1 id="程序的实现">程序的实现</h1>
<p>单点修改，区间覆盖（归零），区间查询，从某位置开始第一个障碍点的添加和查询 好难的样子，但好像一个线段树就艹掉了。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> X=<span class="number">1000001</span>,Y=<span class="number">1000000</span>,N=<span class="number">2000001</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FEN</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> xl,xr,y,i;</div><div class="line">	<span class="keyword">bool</span> flag;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> FEN &amp;o)<span class="keyword">const</span>&#123;</div><div class="line">		<span class="keyword">return</span> y!=o.y?y&gt;o.y:xl&lt;o.xl;</div><div class="line">	&#125;</div><div class="line">&#125; fen[N&lt;&lt;<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FLO</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> x,y;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> FLO &amp;o)<span class="keyword">const</span>&#123;</div><div class="line">		<span class="keyword">return</span> y&gt;o.y;</div><div class="line">	&#125;</div><div class="line">&#125; flo[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CS</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> x,y,i;</div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> CS &amp;o)<span class="keyword">const</span>&#123;</div><div class="line">		<span class="keyword">return</span> y&gt;o.y;</div><div class="line">	&#125;</div><div class="line">&#125; cow[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SS</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> nm;</div><div class="line">	<span class="keyword">bool</span> cover,cut;</div><div class="line">&#125; seg[X&lt;&lt;<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> ans[N],fs[N];;</div><div class="line"><span class="keyword">char</span> * cp=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20000000</span>);</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (;*cp&lt;<span class="string">'0'</span>||*cp&gt;<span class="string">'9'</span>;cp++);</div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;*cp&gt;=<span class="string">'0'</span>&amp;&amp;*cp&lt;=<span class="string">'9'</span>;cp++)</div><div class="line">		x=x*<span class="number">10</span>+*cp-<span class="string">'0'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	seg[x].nm=seg[x&lt;&lt;<span class="number">1</span>].nm+seg[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].nm;</div><div class="line">	seg[x].cut=seg[x&lt;&lt;<span class="number">1</span>].cut|seg[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cut;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	seg[x].cover=<span class="number">1</span>;</div><div class="line">	seg[x].nm=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(seg[x].cover)&#123;</div><div class="line">		paint(x&lt;&lt;<span class="number">1</span>),paint(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</div><div class="line">		seg[x].cover=<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pur,<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">	seg[x].nm+=val;</div><div class="line">	<span class="keyword">if</span> (l==r) <span class="keyword">return</span>; </div><div class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">	pushdown(x);</div><div class="line">	<span class="keyword">if</span>(pur&lt;=mid)</div><div class="line">		add(x&lt;&lt;<span class="number">1</span>,l,mid,pur,val);</div><div class="line">	<span class="keyword">else</span> </div><div class="line">		add(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pur,val);</div><div class="line">	pushup(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cover</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</div><div class="line">		paint(x);</div><div class="line">		<span class="keyword">return</span>;</div><div class="line">	&#125;</div><div class="line">	pushdown(x);</div><div class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span>(L&lt;=mid)cover(x&lt;&lt;<span class="number">1</span>,l,mid,L,R);</div><div class="line">	<span class="keyword">if</span>(R&gt;mid)cover(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</div><div class="line">	pushup(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;</div><div class="line">		<span class="keyword">return</span> seg[x].nm;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,ans=<span class="number">0</span>;</div><div class="line">	pushdown(x);</div><div class="line">	<span class="keyword">if</span>(L&lt;=mid)ans+=query(x&lt;&lt;<span class="number">1</span>,l,mid,L,R);</div><div class="line">	<span class="keyword">if</span>(R&gt;mid)ans+=query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R);</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pur)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(l==r)&#123;</div><div class="line">		seg[x].cut^=<span class="number">1</span>;</div><div class="line">		<span class="keyword">return</span>; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">	pushdown(x);</div><div class="line">	<span class="keyword">if</span>(pur&lt;=mid)</div><div class="line">		update(x&lt;&lt;<span class="number">1</span>,l,mid,pur);</div><div class="line">	<span class="keyword">else</span> </div><div class="line">		update(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pur);</div><div class="line">	pushup(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(l&gt;=L)&#123;</div><div class="line">		<span class="keyword">if</span>(seg[x].cut)&#123;</div><div class="line">			<span class="keyword">while</span>(l!=r)</div><div class="line">				<span class="keyword">if</span>(seg[x&lt;&lt;<span class="number">1</span>].cut)</div><div class="line">					x&lt;&lt;=<span class="number">1</span>,r=l+r&gt;&gt;<span class="number">1</span>;</div><div class="line">				<span class="keyword">else</span> </div><div class="line">					x=x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l=(l+r&gt;&gt;<span class="number">1</span>)+<span class="number">1</span>;</div><div class="line">			<span class="keyword">return</span> l;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> tmp,mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">	pushdown(x);</div><div class="line">	<span class="keyword">if</span>(L&lt;=mid&amp;&amp;(tmp=next(x&lt;&lt;<span class="number">1</span>,l,mid,L)))</div><div class="line">		<span class="keyword">return</span> tmp;</div><div class="line">	<span class="keyword">else</span> </div><div class="line">		<span class="keyword">return</span> next(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("4422.in","r",stdin);</span></div><div class="line">	fread(cp,<span class="number">1</span>,<span class="number">20000000</span>,<span class="built_in">stdin</span>);</div><div class="line">	<span class="keyword">int</span> f,m,n,x1,y1,x2,y2;</div><div class="line">	in(f);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=f;i--;)&#123;</div><div class="line">		in(x1),in(y1),in(x2),in(y2);</div><div class="line">		fen[i&lt;&lt;<span class="number">1</span>]=(FEN)&#123;x1,x2,y1<span class="number">-1</span>,i,<span class="number">0</span>&#125;;</div><div class="line">		fen[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(FEN)&#123;x1,x2,y2,i,<span class="number">1</span>&#125;;</div><div class="line">	&#125;</div><div class="line">	sort(fen,fen+(f&lt;&lt;<span class="number">1</span>));</div><div class="line">	in(m);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=m;i--;)</div><div class="line">		in(flo[i].x),in(flo[i].y);</div><div class="line">	sort(flo,flo+m);</div><div class="line">	in(n);</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</div><div class="line">		in(cow[i].x),in(cow[i].y);</div><div class="line">		cow[i].i=i;</div><div class="line">	&#125;</div><div class="line">	sort(cow,cow+n);</div><div class="line">	f=m=n=<span class="number">0</span>;</div><div class="line">	update(<span class="number">1</span>,<span class="number">1</span>,Y,Y);</div><div class="line">	<span class="keyword">int</span> sum,cut;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=Y;i;--i)&#123;</div><div class="line">		<span class="keyword">for</span>(;fen[f].y==i;++f)</div><div class="line">			<span class="keyword">if</span>(fen[f].flag==<span class="number">0</span>)&#123;</div><div class="line">				cover(<span class="number">1</span>,<span class="number">1</span>,Y,fen[f].xl,fen[f].xr);</div><div class="line">				<span class="keyword">if</span>(fen[f].xl!=<span class="number">1</span>)</div><div class="line">					add(<span class="number">1</span>,<span class="number">1</span>,Y,fen[f].xl<span class="number">-1</span>,-fs[fen[f].i]);</div><div class="line">				<span class="keyword">if</span>(fen[f].xl!=<span class="number">1</span>)</div><div class="line">					update(<span class="number">1</span>,<span class="number">1</span>,Y,fen[f].xl<span class="number">-1</span>);</div><div class="line">				<span class="keyword">if</span>(fen[f].xr!=Y)</div><div class="line">					update(<span class="number">1</span>,<span class="number">1</span>,Y,fen[f].xr);</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				cut=next(<span class="number">1</span>,<span class="number">1</span>,Y,fen[f].xr);</div><div class="line">				sum=query(<span class="number">1</span>,<span class="number">1</span>,Y,fen[f].xl,fen[f].xr);</div><div class="line">				fs[fen[f].i]=query(<span class="number">1</span>,<span class="number">1</span>,Y,fen[f].xr+<span class="number">1</span>,cut);</div><div class="line">				cover(<span class="number">1</span>,<span class="number">1</span>,Y,fen[f].xl,fen[f].xr);</div><div class="line">				<span class="keyword">if</span>(fen[f].xl&gt;<span class="number">1</span>)</div><div class="line">					add(<span class="number">1</span>,<span class="number">1</span>,Y,fen[f].xl<span class="number">-1</span>,sum+fs[fen[f].i]);</div><div class="line">				<span class="keyword">if</span>(fen[f].xl!=<span class="number">1</span>)</div><div class="line">					update(<span class="number">1</span>,<span class="number">1</span>,Y,fen[f].xl<span class="number">-1</span>);</div><div class="line">				<span class="keyword">if</span>(fen[f].xr!=Y)</div><div class="line">					update(<span class="number">1</span>,<span class="number">1</span>,Y,fen[f].xr);</div><div class="line">			&#125;</div><div class="line">		<span class="keyword">for</span>(;flo[m].y==i;++m)&#123;</div><div class="line">			add(<span class="number">1</span>,<span class="number">1</span>,Y,flo[m].x,<span class="number">1</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(;cow[n].y==i;++n)&#123;</div><div class="line">			cut=next(<span class="number">1</span>,<span class="number">1</span>,Y,cow[n].x);</div><div class="line">			ans[cow[n].i]=query(<span class="number">1</span>,<span class="number">1</span>,Y,cow[n].x,cut);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 扫描线 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4245】[ONTAK2015]OR-XOR]]></title>
      <url>/bzoj4245/</url>
      <content type="html"><![CDATA[<blockquote>
<p>花式刷水题。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h4>
4245: [ONTAK2015]OR-XOR
</h4>
Time Limit: 10 Sec Memory Limit: 256 MB Submit: 424 Solved: 232
</center>
<h2 id="description">Description</h2>
<p>给定一个长度为<span class="math inline">\(n\)</span>的序列<span class="math inline">\(a[1],a[2],...,a[n]\)</span>，请将它划分为<span class="math inline">\(m\)</span>段连续的区间，设第<span class="math inline">\(i\)</span>段的费用<span class="math inline">\(c[i]\)</span>为该段内所有数字的异或和，则总费用为<span class="math inline">\(c[1] \ or \ c[2] or ... or \  c[m]\)</span>。请求出总费用的最小值。</p>
<h2 id="input">Input</h2>
<p>第一行包含两个正整数<span class="math inline">\(n,m(1&lt;=m&lt;=n&lt;=500000)\)</span>，分别表示序列的长度和需要划分的段数。 第一行包含<span class="math inline">\(n\)</span>个整数，其中第<span class="math inline">\(i\)</span>个数为<span class="math inline">\(a[i](0&lt;=a[i]&lt;=10^{18})\)</span>。 ## Output 输出一个整数，即总费用的最小值。 # 解题报告 看yveh弄了道题，TA说是水题，我就折腾了下，确实比较容易； 位运算，<span class="math inline">\(or\)</span>的存在，说明分成的所有部分中，只要有一个部分的某个数位为<span class="math inline">\(1\)</span>，那最终结果这一位就是<span class="math inline">\(1\)</span>，所以需要让高位尽可能为<span class="math inline">\(0\)</span>; 显然，如果某一位一共有奇数个，那这一位一定贡献答案； 偶数个的情况下，通过<strong>异或的差分性质</strong>，考虑可以让分成的部分某一位都为0的断点位置； 从高位向下进行，如果当前位满足条件的断点位置<span class="math inline">\(&gt;=m\)</span>个，且最后一个位置可以是断点，那就将当前位不满足条件的端点删除；否则就在答案中当前位，置<span class="math inline">\(1\)</span>； 算是一个贪心吧，我用链表维护了一下，跑得很慢； # 代码 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500002</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> next[N],pre[N];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,m; </div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[N],ans=<span class="number">0</span>; </div><div class="line"><span class="keyword">char</span> *cp=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10000000</span>);</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (;*cp&lt;<span class="string">'0'</span>||*cp&gt;<span class="string">'9'</span>;cp++); </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;*cp&gt;=<span class="string">'0'</span>&amp;&amp;*cp&lt;=<span class="string">'9'</span>;cp++) </div><div class="line">		x=x*<span class="number">10</span>+*cp<span class="number">-48</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("a.in","r",stdin); </span></div><div class="line"><span class="comment">//	freopen("a.out","w",stdout);</span></div><div class="line">	fread(cp,<span class="number">1</span>,<span class="number">10000000</span>,<span class="built_in">stdin</span>);</div><div class="line">	in(n),in(m);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </div><div class="line">		in(a[i]);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++) </div><div class="line">		next[i]=i+<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++) </div><div class="line">		pre[i]=i<span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </div><div class="line">		a[i]=a[i<span class="number">-1</span>]^a[i];</div><div class="line">	<span class="keyword">int</span> tmp;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">59</span>;i&gt;=<span class="number">0</span>;--i) &#123;</div><div class="line">		tmp=<span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=next[<span class="number">0</span>];j!=n+<span class="number">1</span>;j=next[j])</div><div class="line">			<span class="keyword">if</span> (!(a[j]&amp;(<span class="number">1L</span>L&lt;&lt;i))) tmp=tmp+<span class="number">1</span>;</div><div class="line">		<span class="keyword">if</span> (tmp&gt;=m&amp;&amp;!(a[n]&amp;(<span class="number">1L</span>L&lt;&lt;i))) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;next[j]!=n+<span class="number">1</span>;j=next[j]) </div><div class="line">				<span class="keyword">if</span> (a[j]&amp;(<span class="number">1L</span>L&lt;&lt;i)) </div><div class="line">					next[pre[j]]=next[j],pre[next[j]]=pre[j];</div><div class="line">		&#125; <span class="keyword">else</span></div><div class="line">			ans|=(<span class="number">1L</span>L&lt;&lt;i);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans),<span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 位运算 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【2012国家集训队test】calc(by WJMZBMR)]]></title>
      <url>/bzoj2655/</url>
      <content type="html"><![CDATA[<blockquote>
<p>好久不写blog了，屯了接近五十道题，准备好好写写；</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<h2 id="题目描述">题目描述</h2>
<p>一个有序序列 <span class="math inline">\(a_1,...,a_n\)</span> 是合法的，当且仅当 ： * 长度为<span class="math inline">\(n\)</span>； * 其中的数两两不同； * <span class="math inline">\(a_i \in [1,A]\)</span> 对所有的<span class="math inline">\(i\)</span>成立; 一个序列的值<span class="math inline">\(val(a)= \prod_{i=1} ^{i=n} a_i\)</span>; 求所有不同序列的值的和 <span class="math inline">\(\pmod p\)</span>,<span class="math inline">\(p\)</span>为素数.</p>
<h2 id="数据范围">数据范围</h2>
<ul>
<li><span class="math inline">\(100 \% : A,p \leq 10^9, n \leq 500, p&gt;A&gt;n+1\)</span></li>
</ul>
<h1 id="解题报告">解题报告</h1>
<h2 id="第一个做法">第一个做法：</h2>
<ul>
<li>考虑数列中的数是<span class="math inline">\(distinct\)</span>的，那么可以先规定一个递增的顺序，然后乘一个全排列；</li>
<li>观察数据范围，<span class="math inline">\(A\)</span>很大，考虑<strong>倍增</strong>，令<span class="math inline">\(f[A][n]\)</span>表示在<span class="math inline">\([1,A]\)</span>中选<span class="math inline">\(n\)</span>个数；</li>
<li>计算<span class="math inline">\(f[2A][n]\)</span>:记从<span class="math inline">\([A+1,2A]\)</span>中选<span class="math inline">\(n\)</span>个数的值为<span class="math inline">\(b_i\)</span>，考虑在<span class="math inline">\([1,A]\)</span>中选<span class="math inline">\(a\)</span>个数，在<span class="math inline">\([A+1,2A]\)</span>中选<span class="math inline">\(n-a\)</span>个数; <span class="math display">\[b_i= \Sigma_{j=0}^{j=i} A^{i-j} * a_j * C_{i-j}^{A-j}\]</span></li>
<li>如何快速求<span class="math inline">\(C_{i-j}^{A-j}\)</span>,化简得 <span class="math display">\[C_{i-j}^{A-j}= \frac{(A-j)!}{(i-j)!(A-i)!}= \prod_{k=i}^{k=j}(A-k) *(i-j)!^{-1}\]</span> 这就可以做了。</li>
<li>然后？ <span class="math display">\[f[2A][n]=f[A][a]*b[n-a]\]</span></li>
<li>时间复杂度： <span class="math inline">\(O(log A n^2)\)</span> 可以<span class="math inline">\(fft\)</span>优化下，<span class="math inline">\(noip\)</span>后补一下；</li>
</ul>
<hr>
<h2 id="第二个做法">第二个做法：</h2>
<ul>
<li>令<span class="math inline">\(f[A][n]\)</span>表示<span class="math inline">\([1,A]\)</span>中选<span class="math inline">\(n\)</span>个数的值和，写一个粗暴的转移： <span class="math display">\[f[A][n]=f[A-1][n-1]*A+f[A-1][n]\]</span></li>
<li>观察这个转移，<span class="math inline">\(f[x][N]\)</span>是一个多项式的形式，<span class="math inline">\(f[A-1][n]\)</span>相当于前缀和，<span class="math inline">\(f[A-1][n-1] * A\)</span>是一个幂指数向左平移的操作，所以，对<span class="math inline">\(f[x][N] \to f[x][N+1]\)</span>,多项式指数<span class="math inline">\(+2\)</span>，那么<span class="math inline">\(f[x][N]\)</span>指数为<span class="math inline">\(2* n+1\)</span>,可以求出<span class="math inline">\(f[i][n](i=1 \to 2n+1)\)</span>，然后进行<strong>拉格朗日插值</strong>； <span class="math display">\[f(x)=\sum_{i=0}^n a_ix^i=\sum_{i=0}^nf(x_i)\prod_{j=0}^n\frac{x-x_j}{x_i-x_j} [i≠j]\]</span></li>
</ul>
<h2 id="第三个做法">第三个做法：</h2>
<ul>
<li>容斥原理，来自<span class="math inline">\(reflash\)</span>大爷，令<span class="math inline">\(f[i]\)</span>表示<span class="math inline">\([1,A]\)</span>中选<span class="math inline">\(i\)</span>个的方案数； <span class="math display">\[f[i] = g[1] * f[i - 1]  + \sum((-1)^{i - j + 1} * f[j] * C(i - 1,i - 1 - j) * (i - 1 - j)! * g[i - j])\]</span></li>
<li><span class="math inline">\(g[n]=\Sigma_{j=1}^n j^n\)</span>，预处理伯努利数；</li>
<li>就是随便选-至少有一个重复的+至少两个重复的…;</li>
</ul>
<h1 id="代码">代码</h1>
<h2 id="第一个做法-1">第一个做法：</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> p,A,n,C[<span class="number">501</span>][<span class="number">501</span>],g[<span class="number">501</span>],f[<span class="number">501</span>],<span class="built_in">pow</span>[<span class="number">501</span>],jie[<span class="number">501</span>],rej[<span class="number">501</span>],ajie[<span class="number">501</span>],rea[<span class="number">501</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">rev</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> ans=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k=p<span class="number">-2</span>;k;k&gt;&gt;=<span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">if</span> ( k&amp;<span class="number">1</span>) ans=<span class="number">1L</span>L*ans*x%p;</div><div class="line">		x=<span class="number">1L</span>L*x*x%p;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;A,&amp;n,&amp;p); <span class="keyword">long</span> <span class="keyword">long</span> i,j,k,pre;</div><div class="line">	C[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) &#123;</div><div class="line">		C[i][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=i;++j)</div><div class="line">			C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%p;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (jie[<span class="number">0</span>]=<span class="number">1</span>,i=<span class="number">1</span>;i&lt;=n;++i) jie[i]=<span class="number">1L</span>L*jie[i<span class="number">-1</span>]*i%p;</div><div class="line">	<span class="keyword">for</span> (i=n<span class="number">-1</span>,rej[n]=rev(jie[n]);i&gt;=<span class="number">0</span>;--i) rej[i]=<span class="number">1L</span>L*(i+<span class="number">1</span>)*rej[i+<span class="number">1</span>]%p;</div><div class="line">	<span class="keyword">for</span> (j=<span class="number">30</span>;j&gt;=<span class="number">0</span>;--j) <span class="keyword">if</span> (A&amp;(<span class="number">1</span>&lt;&lt;j)) <span class="keyword">break</span>;</div><div class="line">	g[<span class="number">1</span>]=<span class="number">1</span>,g[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (pre=<span class="number">1</span>,<span class="built_in">pow</span>[<span class="number">0</span>]=<span class="number">1</span>,--j;j&gt;=<span class="number">0</span>;--j) &#123;</div><div class="line">		<span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f)); f[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">pow</span>[i]=<span class="number">1L</span>L*<span class="built_in">pow</span>[i<span class="number">-1</span>]*pre%p;</div><div class="line">		<span class="keyword">for</span> (i=<span class="number">1</span>,ajie[<span class="number">0</span>]=<span class="number">1</span>;i&lt;=n&amp;&amp;i&lt;=pre;++i)</div><div class="line">			ajie[i]=<span class="number">1L</span>L*ajie[i<span class="number">-1</span>]%p*(pre-i+<span class="number">1</span>)%p;</div><div class="line">		<span class="keyword">for</span> (i=n&gt;pre?pre<span class="number">-1</span>:n<span class="number">-1</span>,rea[min(n,pre)]=rev(ajie[min(pre,n)]);i&gt;=<span class="number">0</span>;--i)</div><div class="line">			rea[i]=<span class="number">1L</span>L*rea[i+<span class="number">1</span>]*max(<span class="number">1L</span>L,pre-i)%p;  </div><div class="line">		<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=n&amp;&amp;i&lt;=pre;++i) &#123;</div><div class="line">			<span class="keyword">if</span> (!g[i]) <span class="keyword">break</span>;</div><div class="line">			f[i]=<span class="number">0</span>;</div><div class="line">			<span class="keyword">for</span> (k=i;k&gt;=<span class="number">0</span>;--k)</div><div class="line">				(f[i]+=<span class="number">1L</span>L*g[k]*<span class="built_in">pow</span>[i-k]%p*rej[i-k]%p*rea[k]%p)%=p;</div><div class="line">			f[i]=<span class="number">1L</span>L*f[i]*ajie[i]%p;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (i=n;i;--i)</div><div class="line">			<span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;i;++k)</div><div class="line">				(g[i]+=<span class="number">1L</span>L*g[k]*f[i-k]%p)%=p;</div><div class="line">		pre&lt;&lt;=<span class="number">1</span>;</div><div class="line">	 	<span class="keyword">if</span> (A&amp;(<span class="number">1</span>&lt;&lt;j))</div><div class="line">	 		<span class="keyword">for</span> (i=n;i;--i)</div><div class="line">	 			(g[i]+=<span class="number">1L</span>L*g[i<span class="number">-1</span>]*(pre+<span class="number">1</span>)%p)%=p;</div><div class="line">	 	pre+=((A&gt;&gt;j)&amp;<span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">1L</span>L*g[n]*jie[n]%p);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第二种做法">第二种做法</h2>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">510</span>;</div><div class="line"><span class="keyword">int</span> f[N&lt;&lt;<span class="number">2</span>][N],n,p,A,ajie[N&lt;&lt;<span class="number">1</span>],rea[N&lt;&lt;<span class="number">1</span>],jie[N&lt;&lt;<span class="number">1</span>],rej[N&lt;&lt;<span class="number">1</span>],ans,gg[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">rev</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> ans=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> k=p<span class="number">-2</span>;k;k&gt;&gt;=<span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (k&amp;<span class="number">1</span>) ans=<span class="number">1L</span>L*ans*x%p;</div><div class="line">		x=<span class="number">1L</span>L*x*x%p;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> (ans+p)%p;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	freopen(<span class="string">"lu#4.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">	freopen(<span class="string">"lu#4.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;A,&amp;n,&amp;p);</div><div class="line">	f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>; <span class="keyword">int</span> i,j,M,nn=n*<span class="number">2</span>+<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=min(A,nn);++i) &#123;</div><div class="line">		f[i][<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;++j) &#123;</div><div class="line">			f[i][j]=(f[i<span class="number">-1</span>][j]+<span class="number">1L</span>L*f[i<span class="number">-1</span>][j<span class="number">-1</span>]*i%p)%p;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>,gg[<span class="number">0</span>]=<span class="number">1</span>;i&lt;=nn;++i)</div><div class="line">		gg[i]=<span class="number">1L</span>L*gg[i<span class="number">-1</span>]*i%p;</div><div class="line">	<span class="keyword">if</span> (A&lt;=nn) &#123;</div><div class="line">		ans=<span class="number">1L</span>L*f[A][n]*gg[n]%p;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">for</span> (i=<span class="number">1</span>,ajie[<span class="number">0</span>]=<span class="number">1</span>;i&lt;=nn;++i)</div><div class="line">			ajie[i]=<span class="number">1L</span>L*ajie[i<span class="number">-1</span>]*(A-i)%p;  </div><div class="line">		<span class="keyword">for</span> (i=<span class="number">1</span>,jie[<span class="number">0</span>]=<span class="number">1</span>;i&lt;=nn;++i)</div><div class="line">			jie[i]=<span class="number">1L</span>L*jie[i<span class="number">-1</span>]*(p-i)%p;</div><div class="line">		<span class="keyword">int</span> tmp=rev(jie[nn<span class="number">-1</span>]);</div><div class="line">		<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=nn;++i) &#123;</div><div class="line">			(ans+=<span class="number">1L</span>L*f[i][n]*rev(A-i)%p*tmp%p)%=p;</div><div class="line">			tmp=<span class="number">1L</span>L*tmp*(p-nn+i)%p*rev(i)%p;</div><div class="line">		&#125;</div><div class="line">		ans=<span class="number">1L</span>L*ans*ajie[nn]%p*gg[n]%p;</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="第三种做法">第三种做法：</h2>
<p>http://blog.csdn.net/qq_20669971/article/details/52790835</p>
<p>还有TA爷更科学的容斥： http://blog.csdn.net/ta201314/article/details/52753481</p>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 倍增 </tag>
            
            <tag> 容斥原理 </tag>
            
            <tag> 拉格朗日插值 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4516】[Sdoi2016]生成魔咒]]></title>
      <url>/bzoj4516/</url>
      <content type="html"><![CDATA[<blockquote>
<p>去年省选的原题， 现在看还是比较容易的。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
4516: [Sdoi2016]生成魔咒
</h2>
Time Limit: <span class="math inline">\(10\)</span><strong>Sec</strong> Memory Limit:<span class="math inline">\(128\)</span><strong>MB</strong> Submit: <span class="math inline">\(570\)</span> Solved:$ 323$
</center>
<h2 id="description">Description</h2>
<p>魔咒串由许多魔咒字符组成，魔咒字符可以用数字表示。例如可以将魔咒字符<span class="math inline">\(1,2\)</span> 拼凑起来形成一个魔咒串<span class="math inline">\([1,2]\)</span>。 一个魔咒串<span class="math inline">\(S\)</span>的非空字串被称为魔咒串<span class="math inline">\(S\)</span>的生成魔咒。 例如 <span class="math inline">\(S=[1,2,1]\)</span> 时，它的生成魔咒有 <span class="math inline">\([1]、[2]、[1,2]、[2,1]、[1,2,1]\)</span> 五种。<span class="math inline">\(S=[1,1,1]\)</span> 时，它的生成魔咒有 $[1]、[1,1]、[1,1,1] $三种。最初 <span class="math inline">\(S\)</span> 为空串。共进行 <span class="math inline">\(n\)</span> 次操作，每次操作是在 <span class="math inline">\(S\)</span>的结尾加入一个魔咒字符。每次操作后都 需要求出，当前的魔咒串 <span class="math inline">\(S\)</span> 共有多少种生成魔咒。 ## Input 第一行一个整数 <span class="math inline">\(n\)</span>。 第二行 <span class="math inline">\(n\)</span> 个数，第 <span class="math inline">\(i\)</span> 个数表示第 <span class="math inline">\(i\)</span> 次操作加入的魔咒字符。 <span class="math inline">\(1≤n≤100000\)</span>。,用来表示魔咒字符的数字<span class="math inline">\(x\)</span>满足<span class="math inline">\(1≤x≤10^9\)</span> ## Output 输出<span class="math inline">\(n\)</span>行，每行一个数。第<span class="math inline">\(i\)</span>行的数表示第<span class="math inline">\(i\)</span>次操作后<span class="math inline">\(S\)</span>的生成魔咒数量 # 解题报告 学了<strong>后缀自动机</strong>以后，这个题目就简单<strong>许多许多许多</strong>了； 在线做，增加一个字符，增加的<strong>本质不同子串数量</strong>实际上就是<span class="math inline">\(np\)</span>节点<span class="math inline">\(max-min+1\)</span>; 这在<span class="math inline">\(SAM\)</span>中就是<span class="math inline">\(right[np]-right[par[np]]\)</span>,因为<span class="math inline">\(min[x]=max[par[x]]+1\)</span> <span class="math inline">\(SA\)</span>的做法麻烦一些，可以使用常规的<span class="math inline">\(splay\)</span>维护，因为只需要找<span class="math inline">\(sa\)</span>中左右最近的位置，也可以用<strong>树状数组/线段树</strong>，<span class="math inline">\(splay\)</span>的做法可以看下<a href="http://blog.csdn.net/xym_csdn/article/details/51524849" target="_blank" rel="external">xym</a>; 三种做法中<span class="math inline">\(splay\)</span>是<span class="math inline">\(O(nlog^2n)\)</span>的，这个很慢，因为splay是用来搞强制在线的， 这个是<strong>伪在线</strong>，xym虽然用splay，但只实现了树状数组可以实现的部分功能，拥抱常数； 树状数组那个常数很小，但后缀数组本身常数不小，所以最后跑得也不如后缀自动机快； # 代码 <strong>SAM</strong> <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100001</span>;</div><div class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; son[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> n,val[N&lt;&lt;<span class="number">1</span>],par[N&lt;&lt;<span class="number">1</span>],cnt=<span class="number">1</span>,root=<span class="number">1</span>,last=<span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> np,nq,p,q;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans; </div><div class="line"><span class="keyword">char</span> *cp=(<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">2000000</span>); </div><div class="line"><span class="keyword">char</span> *os=(<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">2000000</span>),*ot=os; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (;*cp&lt;<span class="string">'0'</span>||*cp&gt;<span class="string">'9'</span>;cp++); </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>;*cp&gt;=<span class="string">'0'</span>&amp;&amp;*cp&lt;=<span class="string">'9'</span>;cp++) </div><div class="line">        x=x*<span class="number">10</span>+*cp<span class="number">-48</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x) out(x/<span class="number">10</span>),*ot++=x%<span class="number">10</span>+<span class="string">'0'</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x) out(x); <span class="keyword">else</span> *ot++=<span class="string">'0'</span>; </div><div class="line">    *ot++=<span class="string">'\n'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    np=++cnt,p=last; val[np]=val[p]+<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span> (p&amp;&amp;!son[p][x])</div><div class="line">        son[p][x]=np,p=par[p]; </div><div class="line">    <span class="keyword">if</span> (!p) par[np]=root;</div><div class="line">    <span class="keyword">else</span> &#123; </div><div class="line">        q=son[p][x]; </div><div class="line">        <span class="keyword">if</span> (val[p]+<span class="number">1</span>==val[q]) par[np]=q;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            nq=++cnt; <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator i; </div><div class="line">            <span class="keyword">for</span> (i=son[q].begin();i!=son[q].end();++i) </div><div class="line">                son[nq][i-&gt;first]=i-&gt;second; </div><div class="line">            val[nq]=val[p]+<span class="number">1</span>,par[nq]=par[q];</div><div class="line">            par[q]=par[np]=nq; </div><div class="line">            <span class="keyword">while</span> (p&amp;&amp;son[p][x]==q) son[p][x]=nq,p=par[p]; </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ans+=val[np]-val[par[np]]; print(ans);</div><div class="line">    last=np;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//  freopen("bzoj4516.in","r",stdin);</span></div><div class="line"><span class="comment">//  freopen("bzoj4516.out", "w",stdout); </span></div><div class="line">    fread(cp,<span class="number">1</span>,<span class="number">2000000</span>,<span class="built_in">stdin</span>); <span class="keyword">int</span> i,x;</div><div class="line">    <span class="keyword">for</span> (in(n),i=<span class="number">1</span>;i&lt;=n;++i) in(x),insert(x); </div><div class="line">    fwrite(os,<span class="number">1</span>,ot-os, <span class="built_in">stdout</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><span class="math inline">\(SA+BIT\)</span> <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100005</span>; </div><div class="line"><span class="keyword">int</span> sa[N],ss[N],wv[N],wa[N],wb[N];</div><div class="line"><span class="keyword">int</span> height[N],f[N][<span class="number">20</span>],rank[N];</div><div class="line"><span class="keyword">int</span> n,a[N],bl[N],br[N],vec[N],tn;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</div><div class="line"><span class="keyword">char</span> *cp=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10000000</span>); </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> *x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> x[l]==x[r]&amp;&amp;x[l+len]==x[r+len]; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> *s,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> i,j,p,*x=wa,*y=wb,*t; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;++i) ss[i]=<span class="number">0</span>; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;++i) ++ss[x[i]=s[i]]; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;m;++i) ss[i]+=ss[i<span class="number">-1</span>]; </div><div class="line">	<span class="keyword">for</span> (i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i) sa[--ss[x[i]]]=i; </div><div class="line">	<span class="keyword">for</span> (j=<span class="number">1</span>,p=<span class="number">1</span>;j&lt;n&amp;&amp;p&lt;n;m=p,j&lt;&lt;=<span class="number">1</span>) &#123; </div><div class="line">		<span class="keyword">for</span> (p=<span class="number">0</span>,i=n-j;i&lt;n;++i) y[p++]=i; </div><div class="line">		<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;++i) <span class="keyword">if</span> (sa[i]&gt;=j) y[p++]=sa[i]-j; </div><div class="line">		<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;++i) ss[i]=<span class="number">0</span>; </div><div class="line">		<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;++i) wv[i]=x[y[i]]; </div><div class="line">		<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;++i) ++ss[wv[i]]; </div><div class="line">		<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;m;++i) ss[i]+=ss[i<span class="number">-1</span>]; </div><div class="line">		<span class="keyword">for</span> (i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i) sa[--ss[wv[i]]]=y[i];</div><div class="line">		<span class="keyword">for</span> (t=x,x=y,y=t,i=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,p=<span class="number">1</span>;i&lt;n;++i) </div><div class="line">			x[sa[i]]=compare(y,sa[i],sa[i<span class="number">-1</span>],j)?p<span class="number">-1</span>:p++;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (;*cp&lt;<span class="string">'0'</span>||*cp&gt;<span class="string">'9'</span>;cp++);</div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;*cp&gt;=<span class="string">'0'</span>&amp;&amp;*cp&lt;=<span class="string">'9'</span>;cp++) </div><div class="line">		x=x*<span class="number">10</span>+*cp<span class="number">-48</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i,k,j; height[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) rank[sa[i]]=i;</div><div class="line">	<span class="keyword">for</span> (k=<span class="number">0</span>,i=<span class="number">0</span>;i&lt;n;height[rank[i]]=k,++i) </div><div class="line">		<span class="keyword">for</span> (k?k--:<span class="number">0</span>,j=sa[rank[i]<span class="number">-1</span>];a[j+k]==a[i+k];++k); </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) f[i][<span class="number">0</span>]=height[i]; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;<span class="number">18</span>;++i) </div><div class="line">		<span class="keyword">for</span> (j=<span class="number">1</span>;j&lt;=n;++j) <span class="keyword">if</span> (j+(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>&lt;=n) </div><div class="line">			f[j][i]=min(f[j][i<span class="number">-1</span>],f[j+(<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>)][i<span class="number">-1</span>]); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (l&gt;r) swap(l,r); ++l; <span class="keyword">int</span> tmp=r-l+<span class="number">1</span>,lg=log2(tmp);</div><div class="line">	<span class="keyword">return</span> min(f[l][lg],f[r-(<span class="number">1</span>&lt;&lt;lg)+<span class="number">1</span>][lg]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_l</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&lt;=n;i+=i&amp;-i) bl[i]=max(bl[i],x); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add_r</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	 <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i;i-=i&amp;-i) br[i]=min(br[i],x); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query_l</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> tmp=<span class="number">0</span>)</span> </span>&#123;</div><div class="line">	 <span class="keyword">for</span> (<span class="keyword">int</span> i=x;i;i-=i&amp;-i) tmp=max(tmp,bl[i]); </div><div class="line">	 <span class="keyword">return</span> tmp; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query_r</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">int</span> tmp=n+<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=x;i&lt;=n;i+=i&amp;-i) tmp=min(tmp,br[i]); </div><div class="line">	<span class="keyword">return</span> tmp; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("bzoj4516.in","r",stdin); </span></div><div class="line"><span class="comment">//	freopen("bzoj4516.out","w",stdout); </span></div><div class="line">	fread(cp,<span class="number">1</span>,<span class="number">10000000</span>,<span class="built_in">stdin</span>); <span class="keyword">int</span> i,nl,nr; </div><div class="line">	<span class="keyword">for</span> (in(n),i=<span class="number">0</span>;i&lt;n;++i) in(a[i]),vec[i]=a[i]; </div><div class="line">	sort(vec,vec+n); tn=unique(vec,vec+n)-vec; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;++i) a[i]=lower_bound(vec,vec+tn,a[i])-vec+<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;++i) swap(a[i],a[n-i<span class="number">-1</span>]); </div><div class="line">	da(a,sa,n+<span class="number">1</span>,tn+<span class="number">2</span>),calheight(a,sa,n);</div><div class="line">	<span class="built_in">memset</span>(bl,<span class="number">0</span>,<span class="keyword">sizeof</span>(bl)); <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;++i) br[i]=n+<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i) &#123;</div><div class="line">		nl=query_l(rank[i]),nr=query_r(rank[i]); </div><div class="line">		ans+=n-i,ans+=lcp(nl,nr),ans-=lcp(nl,rank[i])+lcp(rank[i],nr);</div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans),add_l(rank[i]),add_r(rank[i]); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="update">UPDATE</h1>
<p>之前速度分析都来自理论，后来我生成了<strong>极限随机数据</strong>进行实测； 只能说完全符合理论分析； <img src="https://leanote.com/api/file/getImage?fileId=57e78466ab64416b5501ca2b" alt="splay"> <img src="https://leanote.com/api/file/getImage?fileId=57e7846aab6441695201cbeb" alt="bit+sa"> <img src="https://leanote.com/api/file/getImage?fileId=57e78466ab6441695201cbea" alt="sam"> 实践是检验真理的唯一标准！</p>
]]></content>
      
        <categories>
            
            <category> 字符串题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 后缀自动机 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 后缀数组 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3956】Count]]></title>
      <url>/bzoj3956/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个送分题？</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
3956: Count
</h2>
Time Limit: 10 Sec Memory Limit: 512 MB
</center>
<h2 id="description">Description</h2>
<p><img src="http://www.lydsy.com/JudgeOnline/upload/201504/11%284%29.png" alt="图片标题"> <!--more--> ## Input</p>
<div class="figure">
<img src="http://www.lydsy.com/JudgeOnline/upload/201504/22%281%29.png" alt="图片标题">
<p class="caption">图片标题</p>
</div>
<h2 id="output">Output</h2>
<div class="figure">
<img src="http://www.lydsy.com/JudgeOnline/upload/201504/22%281%29.png" alt="图片标题">
<p class="caption">图片标题</p>
</div>
<h2 id="hint">HINT</h2>
<p><span class="math inline">\(M,N&lt;=3*10^5,A_i&lt;=10^9\)</span></p>
<h1 id="解题报告">解题报告</h1>
<p>比较简单的一道题，TA给的送分题。</p>
<p>重要结论：满足条件的数对不会超过<span class="math inline">\(2n\)</span>个</p>
<p>证明：假定<span class="math inline">\(i\)</span>是合法数对<span class="math inline">\((i,j)\)</span>中比较小的，那么<span class="math inline">\(j\)</span>只能是<span class="math inline">\(i\)</span>右侧第一个大于<span class="math inline">\(i\)</span>的数，同理假定<span class="math inline">\(j\)</span>是合法数对<span class="math inline">\((i,j)\)</span>中较小的，<span class="math inline">\(i\)</span>只能是<span class="math inline">\(j\)</span>左侧第一个大于<span class="math inline">\(j\)</span>的数，所以，一个数作为较小数，最多只能向左向右产生一个合法数对，所以，满足条件的数对不会超过<span class="math inline">\(2n\)</span>个</p>
<p>寻找合法数对的做法:使用单调栈，维护一个单调变小的数列，每次弹栈和入栈的时候记录数对的左右端点位置,这个做法正确性显然。</p>
<p>统计答案做法:查询区间<span class="math inline">\((l,r)\)</span>最大值的位置<span class="math inline">\(x\)</span>,可以得知，在这个区间中的合法数对一定不会跨越<span class="math inline">\(x\)</span>,那么我们可以确定，起点在<span class="math inline">\((l,x-1)\)</span>的合法数对<span class="math inline">\(+\)</span>终点在<span class="math inline">\((x+1,r)\)</span>的合法数对就是答案！</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1000001</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> K=<span class="number">21</span>;</div><div class="line"><span class="keyword">int</span> sta[N],top,n,f[N][K],type;</div><div class="line"><span class="keyword">int</span> be[N&lt;&lt;<span class="number">1</span>],en[N&lt;&lt;<span class="number">1</span>],a[N],k,m,lg[N];</div><div class="line"><span class="keyword">char</span> * cp=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">30000000</span>);</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</div><div class="line">	x=strtol(cp,&amp;cp,<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">char</span> * os=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20000000</span>),*op=os;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ou</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(x)&#123;</div><div class="line">		ou(x/<span class="number">10</span>);</div><div class="line">		*op++=<span class="string">'0'</span>+x%<span class="number">10</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(x)ou(x);</div><div class="line">	<span class="keyword">else</span> *op++=<span class="string">'0'</span>;</div><div class="line">	*op++=<span class="string">'\n'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (;x&lt;=n;x+=x&amp;-x) a[x]+=val; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!x) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">int</span> tmp=<span class="number">0</span>; </div><div class="line">	<span class="keyword">for</span> (;x;x-=x&amp;-x) tmp+=a[x]; </div><div class="line">	<span class="keyword">return</span> tmp; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">st</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> l=lg[y-x+<span class="number">1</span>],one=f[x][l],two=f[y-(<span class="number">1</span>&lt;&lt;l)+<span class="number">1</span>][l]; </div><div class="line">	<span class="keyword">if</span> (a[one]&gt;a[two]) <span class="keyword">return</span> one; </div><div class="line">	<span class="keyword">else</span> <span class="keyword">return</span> two; </div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("cp.in","r",stdin); </span></div><div class="line"><span class="comment">//	freopen("cp.out","w",stdout);</span></div><div class="line">	fread(cp,<span class="number">1</span>,<span class="number">30000000</span>,<span class="built_in">stdin</span>);</div><div class="line">	in(n),k=log2(n),in(m),in(type),lg[<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>; </div><div class="line">	<span class="keyword">int</span> x,y,j,last=<span class="number">0</span>; top=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">		in(a[i]);</div><div class="line">		<span class="keyword">while</span> (a[i]&gt;a[sta[top]]&amp;&amp;top) &#123;</div><div class="line">			j=sta[top],--top; </div><div class="line">			add(be,j,<span class="number">1</span>),add(en,i,<span class="number">1</span>); </div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (top) &#123;</div><div class="line">			add(be,sta[top],<span class="number">1</span>),add(en,i,<span class="number">1</span>);</div><div class="line">			<span class="keyword">if</span> (a[sta[top]]==a[i]) --top;</div><div class="line">		&#125;</div><div class="line">		sta[++top]=i; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i][<span class="number">0</span>]=i;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++) </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</div><div class="line">			<span class="keyword">if</span> (j+(<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>)&gt;n) f[j][i]=f[j][i<span class="number">-1</span>];</div><div class="line">			<span class="keyword">else</span> </div><div class="line">				<span class="keyword">if</span> (a[f[j][i<span class="number">-1</span>]]&gt;a[f[j+(<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>)][i<span class="number">-1</span>]])</div><div class="line">					f[j][i]=f[j][i<span class="number">-1</span>]; </div><div class="line">				<span class="keyword">else</span></div><div class="line">				 	f[j][i]=f[j+(<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>)][i<span class="number">-1</span>]; </div><div class="line">	<span class="keyword">while</span> (m--) &#123;</div><div class="line">		in(x),in(y); </div><div class="line">		<span class="keyword">if</span> (type) &#123;</div><div class="line">			x=(x+last<span class="number">-1</span>)%n+<span class="number">1</span>,y=(y+last<span class="number">-1</span>)%n+<span class="number">1</span>; </div><div class="line">			<span class="keyword">if</span> (x&gt;y) swap(x,y); </div><div class="line">		&#125;</div><div class="line">		j=st(x,y); </div><div class="line">		last=query(be,j<span class="number">-1</span>)-query(be,x<span class="number">-1</span>);</div><div class="line">		last=last+query(en,y)-query(en,j);</div><div class="line">		out(last);</div><div class="line">	&#125;</div><div class="line">	fwrite(os,<span class="number">1</span>,op-os,<span class="built_in">stdout</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 倍增 </tag>
            
            <tag> 树状数组 </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4548】小奇的糖果]]></title>
      <url>/bzoj4548/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这个题目还是挺有的搞的。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
4548: 小奇的糖果
</h2>
</center>
<h2 id="description">Description</h2>
<p>有<span class="math inline">\(N\)</span>个彩色糖果在平面上。小奇想在平面上取一条水平的线段,并拾起它上方或下方的所有糖果。求出最多能够拾起多少糖果,使得获得的糖果并不包含所有的颜色。</p>
<h2 id="input">Input</h2>
<p>包含多组测试数据,第一行输入一个正整数<span class="math inline">\(T\)</span>表示测试数据组数。 接下来<span class="math inline">\(T\)</span>组测试数据,对于每组测试数据,第一行输入两个正整数<span class="math inline">\(N\)</span>,<span class="math inline">\(K\)</span>,分别表示点数和颜色数。 接下来<span class="math inline">\(N\)</span>行,每行描述一个点,前两个数<span class="math inline">\(x\)</span>,<span class="math inline">\(y\)</span>(<span class="math inline">\(|x|,|y|≤2^30-1\)</span>)描述点的位置,最后一个数<span class="math inline">\(z(1≤z≤k)\)</span>描述点的颜色。 对于<span class="math inline">\(100%\)</span>的数据,<span class="math inline">\(N≤100000,K≤100000,T≤3\)</span> ## Output 对于每组数据在一行内输出一个非负整数<span class="math inline">\(ans\)</span>,表示答案 # 解题报告 考场上光彩爆零-&gt;写了一个很长很长的臭程序，先讲一下考场上的思路：</p>
<p>很容易看出，可以把合法的线段造成的收益看做矩形内部节点数，矩形内部节点数很好求，所以就是要找 出矩形.</p>
<p>矩形显然有三类，一类是枚举<span class="math inline">\(x\)</span>相邻的相同颜色<span class="math inline">\(star\)</span>，之间通天遁地的矩形，一类是下边贴一个<span class="math inline">\(star\)</span>,两边各贴一个相同颜色的<span class="math inline">\(star\)</span>，上边贴顶的矩形，第三类和第二类相似；</p>
<p>所以我就将问题转化成求一个点两端的比它高（低）的第一对点的横坐标； 我现场是用单调栈来搞的，每一个颜色维护上方一个单调递减的栈，每次弹栈就形成矩形，这样每个点可以形成上下两个矩形，加上第一类矩形，一共是<span class="math inline">\(3n\)</span>个矩形；</p>
<hr>
<p>上面那个方法难写难调细节很多；学习了hzwer的姿势，使用双向链表实际上作用就是维护两边最近的相同颜色的点，考虑如果当前的点是该颜色点中最高的那么双向链表所指的横坐标就能确定下矩形左右边界，当这个矩形确定后，这个最高点会对两侧点造成干扰，删掉就好。这样下矩形就确定好了，上矩形将纵坐标上下翻转就好了， 提一句：求矩形内部节点个数-&gt;扫描线+树状数组/树套树随便做。 # 代码 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100001</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poi</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> x,y,color,id; </div><div class="line">	poi()&#123;&#125;</div><div class="line">	poi(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> color,<span class="keyword">int</span> id)</div><div class="line">		:x(x),y(y),color(color),id(id)&#123;&#125;</div><div class="line">&#125; 	point[N];</div><div class="line"><span class="keyword">int</span> T,n,k,ans;</div><div class="line"><span class="keyword">int</span> l[N],r[N],bit[N],vec[N],pre[N],w[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span>&#123;</div><div class="line">	<span class="keyword">char</span> ch=getchar(); </div><div class="line">	<span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar())</div><div class="line">		<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar())</div><div class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">	x=x*f; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">	ans=<span class="number">0</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpx</span><span class="params">(poi a,poi b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.x&lt;b.x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmpy</span><span class="params">(poi a,poi b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.y&lt;b.y;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (;x&lt;=n+<span class="number">1</span>;x+=x&amp;-x)</div><div class="line">		bit[x]+=val; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> tmp=<span class="number">0</span>)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (;x;x-=x&amp;-x)</div><div class="line">		tmp+=bit[x]; </div><div class="line">	<span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span> (l&gt;r) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">int</span> tmp=query(r)-query(l<span class="number">-1</span>); </div><div class="line">	ans=max(tmp,ans); </div><div class="line">&#125;	</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">memset</span>(bit,<span class="number">0</span>,<span class="keyword">sizeof</span>(bit));</div><div class="line">	<span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span>(pre)); </div><div class="line">	w[<span class="number">0</span>]=<span class="number">0</span>,w[n+<span class="number">1</span>]=n+<span class="number">1</span>;</div><div class="line">	sort(point+<span class="number">1</span>,point+<span class="number">1</span>+n,cmpx); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </div><div class="line">		add(point[i].x,<span class="number">1</span>); </div><div class="line">	<span class="keyword">int</span> y,x;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">		x=point[i].id,y=pre[point[i].color];</div><div class="line">		l[x]=y,r[x]=n+<span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (y) r[y]=x; </div><div class="line">		up(w[y]+<span class="number">1</span>,w[x]<span class="number">-1</span>); </div><div class="line">		pre[point[i].color]=x;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</div><div class="line">		up(w[pre[i]]+<span class="number">1</span>,n+<span class="number">1</span>); </div><div class="line">	&#125;</div><div class="line">	sort(point+<span class="number">1</span>,point+<span class="number">1</span>+n,cmpy); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">		x=point[i].id; </div><div class="line">		<span class="keyword">while</span> (j&lt;=n&amp;&amp;point[j].y==point[i].y)&#123;</div><div class="line">			add(point[j].x,<span class="number">-1</span>);</div><div class="line">			j++;</div><div class="line">		&#125;</div><div class="line">		l[r[x]]=l[x],r[l[x]]=r[x];</div><div class="line">		up(w[l[x]]+<span class="number">1</span>,w[r[x]]<span class="number">-1</span>); </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("candy.in","r",stdin); </span></div><div class="line"><span class="comment">//	freopen("candy.out","w",stdout); </span></div><div class="line">	in(T);</div><div class="line">	<span class="keyword">int</span> x,y,z;</div><div class="line">	<span class="keyword">while</span> (T--)&#123;</div><div class="line">		init();</div><div class="line">		in(n),in(k); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">			in(x),in(y),in(z); </div><div class="line">			point[i]=poi(x,y,z,i);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </div><div class="line">			vec[i]=point[i].x; </div><div class="line">		sort(vec+<span class="number">1</span>,vec+<span class="number">1</span>+n); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123; </div><div class="line">			point[i].x=lower_bound(vec+<span class="number">1</span>,vec+<span class="number">1</span>+n,point[i].x)-vec;</div><div class="line">			w[i]=point[i].x;</div><div class="line">		&#125; </div><div class="line">		solve(); </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">			point[i].y=-point[i].y; </div><div class="line">		solve(); </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><big>双倍经验：3658: Jabberwocky</big></strong></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树状数组 </tag>
            
            <tag> 链表 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3652】大新闻]]></title>
      <url>/bzoj3652/</url>
      <content type="html"><![CDATA[<blockquote>
<p>经典的数位DP题目？</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h4>
3652: 大新闻
</h4>
</center>
<h1 id="description">Description</h1>
<p><img src="http://www.lydsy.com/JudgeOnline/upload/201407/1.jpg"> <!--more--> # Input <img src="http://www.lydsy.com/JudgeOnline/upload/201407/2.jpg"></p>
<h1 id="output">Output</h1>
<p><img src="http://www.lydsy.com/JudgeOnline/upload/201407/3.jpg"> <img src="http://www.lydsy.com/JudgeOnline/upload/201407/4.jpg"> <span class="math inline">\(1&lt;=N&lt;=10^18\)</span></p>
<h1 id="解题报告">解题报告</h1>
<p>显然是一道数位dp的题目，观察数据范围可知. 加密和不加密是完全没有关系的两个问题。 1. 加密：等概率的选取两个数异或的期望？<span class="math inline">\(ans_{1*n^2}=\sum_{i=1}^{W}f_i*(n-f_i)*2*(1&lt;&lt;i-1)\)</span>非常显然，就是观察每个数位可以做出的贡献。 2. 未加密：对于<span class="math inline">\(x∈[0,n)\)</span>，寻找<span class="math inline">\(y\)</span>使得<span class="math inline">\(x^y \to max\)</span>,将二进制推广成树状，那么显然最有的策略是对称的走，这样可以让每个数位都做出贡献，而如果不可以对称，就退而求其次好了.</p>
<p>对数位dp问题，我一向是很虚的，学长安利了一种具有普遍性的方法-&gt;疯狂枚举状态法，就是设计<span class="math inline">\(f[i][0/1][0/1][][][]\)</span>这个姿势的式子，<span class="math inline">\(i\)</span>表示枚举到的数位，后面的每个括号都是消除后效性的状态，然后<strong>枚举</strong>出所有的状态，显然有稳定的复杂度。</p>
<p>回到<strong>大新闻</strong>,f[i][1/0][1/0]表示从高开始到第<span class="math inline">\(i\)</span>位，<span class="math inline">\(x\)</span>是否卡边界,<span class="math inline">\(y\)</span>是否卡边界的概率（存收益，期望都没问题）。然后就是很短(？)的代码了。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">70</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line">ll n,mi[N],have[N];</div><div class="line"><span class="keyword">double</span> f[N][<span class="number">2</span>][<span class="number">2</span>],g[N][<span class="number">2</span>][<span class="number">2</span>],p;  </div><div class="line"><span class="keyword">int</span> a[N],w; </div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">one</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> i,j,k,aa,bb,jj,kk; </div><div class="line">	<span class="keyword">double</span> ans=<span class="number">0</span>; </div><div class="line">	g[a[<span class="number">0</span>]+<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1.0</span>/(<span class="keyword">double</span>)n; </div><div class="line">	<span class="keyword">for</span> (i=a[<span class="number">0</span>];i;i--) </div><div class="line">		<span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++)</div><div class="line">			<span class="keyword">for</span> (k=<span class="number">0</span>;k&lt;=<span class="number">1</span>;k++)</div><div class="line">				<span class="keyword">if</span> (g[i+<span class="number">1</span>][j][k]&gt;<span class="number">0.0</span>)</div><div class="line">					<span class="keyword">for</span> (aa=<span class="number">0</span>;aa&lt;=<span class="number">1</span>;aa++)&#123;</div><div class="line">						<span class="keyword">if</span> (j)</div><div class="line">							<span class="keyword">if</span> (aa&lt;a[i]) </div><div class="line">								jj=<span class="number">0</span>; </div><div class="line">							<span class="keyword">else</span></div><div class="line">								<span class="keyword">if</span> (aa==a[i]) </div><div class="line">									jj=<span class="number">1</span>; </div><div class="line">								<span class="keyword">else</span></div><div class="line">									<span class="keyword">continue</span>;</div><div class="line">						<span class="keyword">else</span></div><div class="line">							jj=<span class="number">0</span>; </div><div class="line">						<span class="keyword">if</span> (k)&#123;</div><div class="line">							bb=aa^<span class="number">1</span>; </div><div class="line">							<span class="keyword">if</span> (bb&gt;a[i]) bb^=<span class="number">1</span>; </div><div class="line">							<span class="keyword">if</span> (bb&lt;a[i]) </div><div class="line">								kk=<span class="number">0</span>; </div><div class="line">							<span class="keyword">else</span></div><div class="line">								kk=<span class="number">1</span>; </div><div class="line">						&#125;<span class="keyword">else</span></div><div class="line">							bb=aa^<span class="number">1</span>,kk=<span class="number">0</span>; </div><div class="line">						f[i][jj][kk]+=f[i+<span class="number">1</span>][j][k]+(<span class="keyword">double</span>)mi[i<span class="number">-1</span>]*g[i+<span class="number">1</span>][j][k]*(<span class="keyword">double</span>)(aa^bb); </div><div class="line">						g[i][jj][kk]+=g[i+<span class="number">1</span>][j][k];</div><div class="line">					&#125;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=<span class="number">1</span>;i++)</div><div class="line">		<span class="keyword">for</span> (j=<span class="number">0</span>;j&lt;=<span class="number">1</span>;j++) </div><div class="line">			ans+=f[<span class="number">1</span>][i][j]; </div><div class="line">	<span class="keyword">return</span> ans; </div><div class="line">&#125;	</div><div class="line"><span class="function"><span class="keyword">double</span> <span class="title">two</span><span class="params">()</span></span>&#123;</div><div class="line">	ll x=n;a[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">double</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(n)&#123;</div><div class="line">        a[++a[<span class="number">0</span>]]=(<span class="keyword">int</span>)(n%<span class="number">2</span>);</div><div class="line">		n/=<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">	<span class="keyword">for</span> (n=x,i=a[<span class="number">0</span>];i;i--)&#123;</div><div class="line">        <span class="keyword">if</span> (a[i])&#123;</div><div class="line">            n-=mi[i<span class="number">-1</span>],have[i]+=n;</div><div class="line">            <span class="keyword">for</span> (j=i<span class="number">-1</span>;j;j--) </div><div class="line">				have[j]+=(i<span class="number">-2</span>&gt;=<span class="number">0</span>?mi[i<span class="number">-2</span>]:<span class="number">0L</span>L);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	<span class="keyword">for</span> (n=x,i=a[<span class="number">0</span>];i;--i)</div><div class="line">        ans+=(<span class="keyword">double</span>)have[i]/(<span class="keyword">double</span>)n*(<span class="keyword">double</span>)(n-have[i])/(<span class="keyword">double</span>)n*<span class="number">2.0</span>*(<span class="keyword">double</span>)mi[i<span class="number">-1</span>];</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;											</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"><span class="comment">//	freopen("bignews.in","r",stdin); </span></div><div class="line"><span class="comment">//	freopen("bignews.out","w",stdout);</span></div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;p);</div><div class="line">	ll x=n<span class="number">-1</span>;</div><div class="line">	<span class="keyword">while</span> (x)&#123;</div><div class="line">		a[++a[<span class="number">0</span>]]=(<span class="keyword">int</span>)(x%<span class="number">2</span>); </div><div class="line">		x/=<span class="number">2</span>;</div><div class="line">	&#125;</div><div class="line">	mi[<span class="number">0</span>]=<span class="number">1L</span>L;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a[<span class="number">0</span>];i++) </div><div class="line">		mi[i]=mi[i<span class="number">-1</span>]*<span class="number">2L</span>L; </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,one()*p+two()*(<span class="number">1.0</span>-p));</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数位DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【hihocoder 1034】毁灭者问题]]></title>
      <url>/hiho1034/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个暴力的数据结构题</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
hihocoder1034 : 毁灭者问题
</h2>
时间限制:10000ms 单点时限:1000ms 内存限制:256MB
</center>
<h2 id="描述">描述</h2>
<p>在 Warcraft III 之冰封王座中，毁灭者是不死族打三本后期时的一个魔法飞行单位。 毁灭者的核心技能之一，叫做魔法吸收（Absorb Mana）： <img src="http://media.hihocoder.com//problem_images/20140715/14054064004625.png" alt="图片标题"> <!--more--> 现在让我们来考虑下面的问题： 假设你拥有<span class="math inline">\(n\)</span>个魔法单位，他们从左到有站在一行，编号从<span class="math inline">\(1\)</span>到<span class="math inline">\(n\)</span>。 每个单位拥有三项属性： <span class="math inline">\(s_i\)</span>: 初始法力。 <span class="math inline">\(m_i\)</span>: 最大法力上限。 <span class="math inline">\(r_i\)</span>: 每秒中法力回复速度。 现在你操纵一个毁灭者，有<span class="math inline">\(m\)</span>个操作,<code>t l r</code>，表示时刻<span class="math inline">\(t\)</span>，毁灭者对所有编号从 <span class="math inline">\(l\)</span>到 <span class="math inline">\(r\)</span> 的单位，使用了魔法吸收。操作按照时间顺序给出，计算毁灭者一共吸收了多少法力。</p>
<h2 id="输入">输入</h2>
<p>输入数据的第一行有一个整数 <span class="math inline">\(n(1 ≤ n ≤10^5)\)</span> — 你的魔法单位的数目。</p>
<p>接下来的<span class="math inline">\(n\)</span>行，每行有三个整数$ s_i,m_i,r_i(0≤s_i≤m_i≤10^5, 0≤r_i≤10^5)$ 描述一个魔法单位。</p>
<p>接下来一行又一个整数 <span class="math inline">\(m(1 ≤ m ≤ 10^5)\)</span>， — 操作的数目。</p>
<p>接下来的 <span class="math inline">\(m\)</span> 行，每行描述一个操作 <span class="math inline">\(t, l, r(0 ≤ t ≤ 10^9, 1 ≤ l ≤ r ≤ n)\)</span>，<span class="math inline">\(t\)</span> 非降。</p>
<h2 id="输出">输出</h2>
<p>输出一行一个整数表示毁灭者一共吸收了多少法力。</p>
<h1 id="解题报告">解题报告</h1>
<ul>
<li><p>首先考虑线段树，但是每个点情况都不一样的情况下，区间修改不知道怎么搞;</p></li>
<li>因为每个点都是不同的，考虑分别计算每个点对最终答案的贡献：
<ul>
<li>将询问区间分别按照左右端点排序，然后扫描，碰到左端点加入，右端点删除，就可以得到对每个节点询问的时间；</li>
<li>容易发现，去除当前点第一次询问的贡献，剩余时间段中是否到达<span class="math inline">\(m\)</span>可以通过讨论<span class="math inline">\(\Delta t\)</span>和<span class="math inline">\(\frac{m}{r}\)</span>,如果<span class="math inline">\(\Delta t &lt;= \frac{m}{r}\)</span>,对答案的贡献是<span class="math inline">\(\Sigma_{\Delta t(\Delta t &lt; = \frac{m}{r})}*r\)</span>,否则对答案的贡献是<span class="math inline">\(Times_{(\Delta t&gt;frac{m}{r})}*m\)</span>；</li>
<li>我的做法是用两棵Splay，分别维护<span class="math inline">\(t\)</span>和<span class="math inline">\(\Delta t\)</span>,每次添加、删除<span class="math inline">\(t\)</span>，修改相应<span class="math inline">\(\Delta t\)</span>（<span class="math inline">\(-1+2\)</span>或者<span class="math inline">\(-2+1\)</span>或者左右端特判）；</li>
<li>每次查询的时候，拿出<span class="math inline">\(t\)</span>中第一个点特判，然后分别查询<span class="math inline">\(\Delta t\)</span>中<span class="math inline">\(&lt;\frac{m}{r}+1\)</span>的<span class="math inline">\(sum\)</span>和<span class="math inline">\(sz\)</span>,然后贡献到答案中；</li>
</ul></li>
<li><p>如果上天再给我一次机会，我一定用set+bit艹这个题！</p></li>
</ul>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1500000000</span>;</div><div class="line"><span class="keyword">int</span> n,m,id1[N],id2[N];<span class="comment">//id1右端点排序，id2左端点排序 </span></div><div class="line"><span class="keyword">char</span> *cp=(<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">10000000</span>); </div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> t,l, r; </div><div class="line">	Query(<span class="keyword">int</span> t=<span class="number">0</span>,<span class="keyword">int</span> l=<span class="number">0</span>,<span class="keyword">int</span> r=<span class="number">0</span>) </div><div class="line">		:t(t),l(l), r(r) &#123;&#125;</div><div class="line">&#125; query[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Obj</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> s,m,r; </div><div class="line">	Obj(<span class="keyword">int</span> s=<span class="number">0</span>,<span class="keyword">int</span> m=<span class="number">0</span>,<span class="keyword">int</span> r=<span class="number">0</span>) </div><div class="line">		:s(s),m(m),r(r) &#123;&#125;</div><div class="line">&#125; obj[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Splay</span> &#123;</span> <span class="comment">//单点加、删、询问小于个数，pre,next </span></div><div class="line">	<span class="keyword">int</span> son[N][<span class="number">2</span>],f[N],val[N],sz[N],ts[N],root,cnt,sm[N];</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> v)</span> </span>&#123; </div><div class="line">		x=++cnt, f[x]=son[x][<span class="number">0</span>]=son[x][<span class="number">1</span>]=<span class="number">0</span>; </div><div class="line">		sm[x]=val[x]=v, sz[x]=ts[x]=<span class="number">1</span>; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		 sm[x]=sz[x]=f[x]=son[x][<span class="number">1</span>]=son[x][<span class="number">0</span>]=ts[x]=val[x]=<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	Splay() &#123;</div><div class="line">		root=sz[<span class="number">0</span>]=son[<span class="number">0</span>][<span class="number">0</span>]=son[<span class="number">0</span>][<span class="number">1</span>]=f[<span class="number">0</span>]=val[<span class="number">0</span>]=sm[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">		newnode(root,<span class="number">0</span>),newnode(son[root][<span class="number">1</span>],inf); </div><div class="line">		f[cnt]=root,sz[root]=<span class="number">2</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		sz[x]=ts[x],sm[x]=val[x]*ts[x];</div><div class="line">		<span class="keyword">if</span> (son[x][<span class="number">0</span>]) sz[x]+=sz[son[x][<span class="number">0</span>]],sm[x]+=sm[son[x][<span class="number">0</span>]]; </div><div class="line">		<span class="keyword">if</span> (son[x][<span class="number">1</span>]) sz[x]+=sz[son[x][<span class="number">1</span>]],sm[x]+=sm[son[x][<span class="number">1</span>]]; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> y=f[x],z=f[y],d=son[y][<span class="number">1</span>]==x; </div><div class="line">		f[son[x][d^<span class="number">1</span>]]=y,son[y][d]=son[x][d^<span class="number">1</span>]; </div><div class="line">		<span class="keyword">if</span> (z) son[z][son[z][<span class="number">1</span>]==y]=x; </div><div class="line">		f[x]=z, son[x][d^<span class="number">1</span>]=y,f[y]=x; </div><div class="line">		pushup(y),pushup(x); </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> goal=<span class="number">0</span>)</span> </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> y=f[x];y^goal;rotate(x),y=f[x]) </div><div class="line">			<span class="keyword">if</span> (f[y]^goal)</div><div class="line">			rotate((son[y][<span class="number">1</span>]==x^son[f[y]][<span class="number">1</span>]==y)?x:y); </div><div class="line">		<span class="keyword">if</span> (!goal) root=x;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">findsz</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;<span class="comment">//询问小于个数 </span></div><div class="line">		<span class="keyword">int</span> x=root,	ans=<span class="number">0</span>;</div><div class="line">		<span class="keyword">while</span> (x) &#123;</div><div class="line">		 	<span class="keyword">if</span> (val[x]&gt;=v) x=son[x][<span class="number">0</span>];</div><div class="line">			<span class="keyword">else</span> ans+=(sz[x]-sz[son[x][<span class="number">1</span>]]),x=son[x][<span class="number">1</span>];</div><div class="line">		&#125;	<span class="keyword">return</span> ans;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">findps</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123; </div><div class="line">		<span class="keyword">int</span> x=root, ans=<span class="number">0</span>; </div><div class="line">		<span class="keyword">while</span> (x) &#123;</div><div class="line">			<span class="keyword">if</span> (val[x]&gt;=v) x=son[x][<span class="number">0</span>]; </div><div class="line">			<span class="keyword">else</span> ans+=(sm[x]-sm[son[x][<span class="number">1</span>]]),x=son[x][<span class="number">1</span>]; </div><div class="line">		&#125;	<span class="keyword">return</span> ans; </div><div class="line">	&#125;</div><div class="line">		</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> goal)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> x=son[root][<span class="number">0</span>]; </div><div class="line">		<span class="keyword">while</span> (son[x][<span class="number">1</span>]) x=son[x][<span class="number">1</span>]; </div><div class="line">		splay(x,goal); </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> goal)</span> </span>&#123; </div><div class="line">		<span class="keyword">int</span> x=son[root][<span class="number">1</span>]; </div><div class="line">		<span class="keyword">while</span> (son[x][<span class="number">0</span>]) x=son[x][<span class="number">0</span>]; </div><div class="line">		splay(x,goal); </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">findkth</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> goal=<span class="number">0</span>)</span> </span>&#123; 	</div><div class="line">		<span class="keyword">int</span> x=root; </div><div class="line">		<span class="keyword">while</span> (sz[son[x][<span class="number">0</span>]]^k) &#123;</div><div class="line">			<span class="keyword">if</span> (sz[son[x][<span class="number">0</span>]]&gt;k) x=son[x][<span class="number">0</span>]; </div><div class="line">			<span class="keyword">else</span> k-=sz[son[x][<span class="number">0</span>]]+ts[x],x=son[x][<span class="number">1</span>];</div><div class="line">		&#125;</div><div class="line">		splay(x,goal);</div><div class="line">	&#125;</div><div class="line">			</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">findval</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> x=root;</div><div class="line">		<span class="keyword">while</span> (<span class="number">1</span>) &#123; </div><div class="line">			<span class="keyword">if</span> (!x) &#123;<span class="built_in">printf</span>(<span class="string">"fuck\n"</span>);<span class="keyword">return</span>;&#125;</div><div class="line">			<span class="keyword">if</span> (val[x]==v) &#123;splay(x);<span class="keyword">return</span>;&#125;</div><div class="line">			<span class="keyword">if</span> (val[x]&gt;v) x=son[x][<span class="number">0</span>]; </div><div class="line">			<span class="keyword">else</span> x=son[x][<span class="number">1</span>]; </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> x=root,next; </div><div class="line">		<span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (val[x]==v) &#123;</div><div class="line">				++ts[x],pushup(x),splay(x);<span class="keyword">return</span>;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> (val[x]&gt;v) next=<span class="number">0</span>;<span class="keyword">else</span> next=<span class="number">1</span>; </div><div class="line">			<span class="keyword">if</span> (!son[x][next]) &#123;</div><div class="line">				newnode(son[x][next],v),f[son[x][next]]=x; </div><div class="line">				splay(son[x][next]);<span class="keyword">return</span>; </div><div class="line">			&#125;</div><div class="line">			x=son[x][next];</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123; </div><div class="line">		findval(v); </div><div class="line">		<span class="keyword">if</span> (ts[root]&gt;<span class="number">1</span>) &#123;--ts[root];pushup(root);<span class="keyword">return</span>;&#125;</div><div class="line">		<span class="keyword">if</span> (!son[root][<span class="number">0</span>]) </div><div class="line">			root=son[root][<span class="number">1</span>],cut(f[root]),f[root]=<span class="number">0</span>; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!son[root][<span class="number">1</span>]) </div><div class="line">				root=son[root][<span class="number">0</span>],cut(f[root]),f[root]=<span class="number">0</span>; </div><div class="line">			 <span class="keyword">else</span> &#123;</div><div class="line">			 	pre(root),next(root); </div><div class="line">			 	son[son[root][<span class="number">0</span>]][<span class="number">1</span>]=son[root][<span class="number">1</span>];</div><div class="line">				f[son[root][<span class="number">1</span>]]=son[root][<span class="number">0</span>];</div><div class="line">			 	pushup(son[root][<span class="number">0</span>]),root=son[root][<span class="number">0</span>]; </div><div class="line">			 	cut(f[root]), f[root]=<span class="number">0</span>; </div><div class="line">			 &#125;</div><div class="line">	&#125;</div><div class="line">&#125; delta,body; 		 </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> query[a].r&lt;query[b].r;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; </div><div class="line">	<span class="keyword">return</span> query[a].l&lt;query[b].l; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">	body.insert(t);<span class="keyword">if</span> (body.ts[body.root]&gt;<span class="number">1</span>) <span class="keyword">return</span>;body.pre(body.root),body.next(body.root); </div><div class="line">	<span class="keyword">if</span> (body.val[body.son[body.root][<span class="number">0</span>]]) delta.insert(t-body.val[body.son[body.root][<span class="number">0</span>]]); </div><div class="line">	<span class="keyword">if</span> (body.val[body.son[body.root][<span class="number">1</span>]]!=inf) delta.insert(body.val[body.son[body.root][<span class="number">1</span>]]-t); </div><div class="line">	<span class="keyword">if</span> (body.val[body.son[body.root][<span class="number">0</span>]]&amp;&amp;body.val[body.son[body.root][<span class="number">1</span>]]!=inf)</div><div class="line">		delta.del(body.val[body.son[body.root][<span class="number">1</span>]]-body.val[body.son[body.root][<span class="number">0</span>]]); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">away</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</div><div class="line">	body.findval(t); <span class="keyword">if</span> (body.ts[body.root]&gt;<span class="number">1</span>) &#123;body.ts[body.root]--;<span class="keyword">return</span>;&#125;</div><div class="line">	body.pre(body.root),body.next(body.root);</div><div class="line">	<span class="keyword">if</span> (body.val[body.son[body.root][<span class="number">0</span>]]) delta.del(t-body.val[body.son[body.root][<span class="number">0</span>]]); </div><div class="line">	<span class="keyword">if</span> (body.val[body.son[body.root][<span class="number">1</span>]]!=inf) delta.del(body.val[body.son[body.root][<span class="number">1</span>]]-t); </div><div class="line">	<span class="keyword">if</span> (body.val[body.son[body.root][<span class="number">0</span>]]&amp;&amp;body.val[body.son[body.root][<span class="number">1</span>]]!=inf)</div><div class="line">		delta.insert(body.val[body.son[body.root][<span class="number">1</span>]]-body.val[body.son[body.root][<span class="number">0</span>]]); </div><div class="line">	body.del(t);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> m,<span class="keyword">int</span> r)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (body.sz[body.root]==<span class="number">2</span>) <span class="keyword">return</span>; </div><div class="line">	body.findkth(<span class="number">1</span>); ans+=min(<span class="number">1L</span>L*m,<span class="number">1L</span>L*(s+<span class="number">1L</span>L*body.val[body.root]*r));</div><div class="line">	<span class="keyword">if</span> (delta.sz[delta.root]==<span class="number">2</span>||!r) <span class="keyword">return</span>; </div><div class="line">	<span class="keyword">int</span> tmp=delta.findsz(m/r+<span class="number">1</span>);</div><div class="line">	ans+=<span class="number">1L</span>L*(delta.sz[delta.root]-tmp<span class="number">-1</span>)*m;</div><div class="line">	ans+=<span class="number">1L</span>L*delta.findps(m/r+<span class="number">1</span>)*r;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (;*cp&lt;<span class="string">'0'</span>||*cp&gt;<span class="string">'9'</span>;cp++); </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;*cp&gt;=<span class="string">'0'</span>&amp;&amp;*cp&lt;=<span class="string">'9'</span>;cp++) </div><div class="line">		x=x*<span class="number">10</span>+*cp<span class="number">-48</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	freopen(<span class="string">"hiho1034.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>); </div><div class="line">	freopen(<span class="string">"hiho1034.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>); </div><div class="line">	fread(cp,<span class="number">1</span>,<span class="number">10000000</span>,<span class="built_in">stdin</span>);	in(n); <span class="keyword">int</span> i,j=<span class="number">0</span>,k=<span class="number">0</span>; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) in(obj[i].s),in(obj[i].m),in(obj[i].r); </div><div class="line">	<span class="keyword">for</span> (in(m),i=<span class="number">1</span>;i&lt;=m;++i) </div><div class="line">		in(query[i].t),in(query[i].l),in(query[i].r); </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) id1[i]=i,id2[i]=i; </div><div class="line">	sort(id1+<span class="number">1</span>,id1+<span class="number">1</span>+m,cmp1);sort(id2+<span class="number">1</span>,id2+<span class="number">1</span>+m,cmp2);</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>,j=<span class="number">0</span>,k=<span class="number">0</span>;i&lt;=n;++i) &#123; </div><div class="line">		<span class="keyword">while</span> (j&lt;m&amp;&amp;query[id2[j+<span class="number">1</span>]].l==i) </div><div class="line">			insert(query[id2[++j]].t); </div><div class="line">		calculate(obj[i].s,obj[i].m,obj[i].r); </div><div class="line">		<span class="keyword">while</span> (k&lt;m&amp;&amp;query[id1[k+<span class="number">1</span>]].r==i) </div><div class="line">			away(query[id1[++k]].t); </div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div class="figure">
<img src="https://leanote.com/api/file/getImage?fileId=57ec8256ab644107bb000b68" alt="精神AC">
<p class="caption">精神AC</p>
</div>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 平衡树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3242】[Noi2013]快餐店]]></title>
      <url>/bzoj3242/</url>
      <content type="html"><![CDATA[<blockquote>
<p>很麻烦的一道基环外向树的题。</p>
</blockquote>
<a id="more"></a>
<h1>
题目
</h1>
<center>
<h2>
3242: [Noi2013]快餐店
</h2>
Time Limit: 20 Sec Memory Limit: 512 MB
</center>
<h2 id="description">Description</h2>
<p>小T打算在城市C开设一家外送快餐店。送餐到某一个地点的时间与外卖店到该地点之间最短路径长度是成正比的，小T希望快餐店的地址选在离最远的顾客距离最近的地方。 快餐店的顾客分布在城市C的<span class="math inline">\(N\)</span>个建筑中，这<span class="math inline">\(N\)</span>个建筑通过恰好<span class="math inline">\(N\)</span>条双向道路连接起来，不存在任何两条道路连接了相同的两个建筑。任意两个建筑之间至少存在一条由双向道路连接而成的路径。小T的快餐店可以开设在任一建筑中，也可以开设在任意一条道路的某个位置上（该位置与道路两端的建筑的距离不一定是整数）。 现给定城市C的地图（道路分布及其长度），请找出最佳的快餐店选址，输出其与最远的顾客之间的距离。</p>
<h2 id="input">Input</h2>
<p>第一行包含一个整数<span class="math inline">\(N\)</span>，表示城市<span class="math inline">\(C\)</span>中的建筑和道路数目。 接下来<span class="math inline">\(N\)</span>行，每行<span class="math inline">\(3\)</span>个整数，<span class="math inline">\(A_i\)</span>，<span class="math inline">\(B_i\)</span>，<span class="math inline">\(L_i\)</span>（<span class="math inline">\(1≤i≤N\)</span>；<span class="math inline">\(L_i&gt;0\)</span>），表示一条道路连接了建筑<span class="math inline">\(A_i\)</span>与<span class="math inline">\(B_i\)</span>，其长度为<span class="math inline">\(L_i\)</span> 。</p>
<h2 id="output">Output</h2>
<p>仅包含一个实数，四舍五入保留恰好一位小数，表示最佳快餐店选址距离最远用户的距离。 注意：你的结果必须恰好有一位小数，小数位数不正确不得分。 ## 数据范围 对于 <span class="math inline">\(10\%\)</span>的数据，<span class="math inline">\(N&lt;=80,L_i=1\)</span>； 对于 <span class="math inline">\(30\%\)</span>的数据，<span class="math inline">\(N&lt;=600，L_i&lt;=100\)</span>； 对于 <span class="math inline">\(60\%\)</span> 的数据，<span class="math inline">\(N&lt;=2000，L_i&lt;=10^9\)</span>； 对于 <span class="math inline">\(100\%\)</span> 的数据，<span class="math inline">\(N&lt;=10^5，L_i&lt;=10^9\)</span> # 解题报告 首先这是一颗环套树，这类题的<strong>套路</strong>貌似是把外向树和基环讨论； 1. 首先考虑树上的情况，这就很简单，就是求<strong>树的直径</strong>，然后取直径的终点，到直径两端的距离就是答案，这是显然好证的,所以在每棵外向树上都要跑一遍，复杂度是<span class="math inline">\(O(n)\)</span>的，也就是构成答案的链在一棵外向树上的情况； 2. 考虑如果<strong>构成答案的链经过基环</strong>，我们需要证明这样一个结论：<big>最终答案中一定有一条边是不经过的!</big>这样想：</p>
<ul>
<li>当前找到一对最远点，这两点间的最短路一定不经过基环上一边；</li>
<li>将这条边加入答案，会使<strong>当前最远点变得更远</strong>，从而答案变劣;如果使<strong>其他两对点变为最远点</strong>,这对点必然不如原答案优；</li>
<li>所以得到结论，答案中一定有一条边不经过！</li>
</ul>
<p>所以我们在基环上，<strong>每次删除一个点，求最远点</strong>.有一点可以确定的是，每棵外向树肯定会选择深度最大的点，两颗外向树之间的最远点可以表示为<span class="math inline">\(sum_j+dep_j+dep_i-sum_i\)</span>,其中，<span class="math inline">\(dep\)</span>为外向树的最大深度，<span class="math inline">\(sum\)</span>是基环上的前缀距离。可以维护<span class="math inline">\(sum+dep\)</span>的最大值和<span class="math inline">\(sum-dep\)</span>的最大值，每次求和，但是两个位置不能相同，所以需要同时维护次大值，判断+更新. 具体做法是在基环上枚举删除的边<span class="math inline">\(e_{i,j}\)</span>使用完后，令<span class="math inline">\(sum_j=circlelength+sum_j\)</span>，也就是只能通过绕一圈到达<span class="math inline">\(j\)</span>了. 还有一种做法是用<strong>单调队列</strong>，因为可以证明，<span class="math inline">\(max(sum_j+dep_j+dep_i-sum_i)\)</span>中，<span class="math inline">\(i &lt; j\)</span>,但因为我是调试的时候才发现的， 就愚蠢的又长又慢大线段树搞了。 # 代码 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100005</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> inf=<span class="number">10000000000000000L</span>L;</div><div class="line"><span class="keyword">char</span> *cp=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">6000000</span>);</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> next,to,v; </div><div class="line">	E(<span class="keyword">int</span> next=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,<span class="keyword">int</span> v=<span class="number">0</span>)</div><div class="line">		:next(next),to(to),v(v)&#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">one</span> &#123;</span></div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> mx[N&lt;&lt;<span class="number">2</span>],se[N&lt;&lt;<span class="number">2</span>];</div><div class="line">	<span class="keyword">int</span> mxp[N&lt;&lt;<span class="number">2</span>],sep[N&lt;&lt;<span class="number">2</span>];</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n&lt;&lt;<span class="number">2</span>;i++) </div><div class="line">			mx[i]=se[i]=-inf; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (mx[x&lt;&lt;<span class="number">1</span>]&gt;=mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]) &#123;</div><div class="line">			mx[x]=mx[x&lt;&lt;<span class="number">1</span>],mxp[x]=mxp[x&lt;&lt;<span class="number">1</span>]; </div><div class="line">			se[x]=mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],sep[x]=mxp[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]; </div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			mx[x]=mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],mxp[x]=mxp[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]; </div><div class="line">			se[x]=mx[x&lt;&lt;<span class="number">1</span>],sep[x]=mxp[x&lt;&lt;<span class="number">1</span>]; </div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (se[x&lt;&lt;<span class="number">1</span>]&gt;se[x])</div><div class="line">			se[x]=se[x&lt;&lt;<span class="number">1</span>],sep[x]=sep[x&lt;&lt;<span class="number">1</span>]; </div><div class="line">		<span class="keyword">if</span> (se[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]&gt;se[x])</div><div class="line">			se[x]=se[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],sep[x]=sep[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]; </div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">long</span> <span class="keyword">long</span> *a,<span class="keyword">long</span> <span class="keyword">long</span> *b,<span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (l==r) &#123;</div><div class="line">			<span class="keyword">if</span> (type==<span class="number">1</span>) mx[x]=a[l]+b[l];</div><div class="line">			<span class="keyword">else</span> mx[x]=a[l]-b[l];</div><div class="line">			mxp[x]=l;</div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">			build(x&lt;&lt;<span class="number">1</span>,l,mid,a,b,type); </div><div class="line">			build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,a,b,type); </div><div class="line">			up(x);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> pur,<span class="keyword">long</span> <span class="keyword">long</span> val)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (l==r) &#123;</div><div class="line">			mx[x]=val,mxp[x]=l; </div><div class="line">		&#125;<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span> (pur&lt;=mid) </div><div class="line">				insert(x&lt;&lt;<span class="number">1</span>,l,mid,pur,val); </div><div class="line">			<span class="keyword">else</span></div><div class="line">				insert(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,pur,val); </div><div class="line">			up(x);	</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125; plu,cha;</div><div class="line"><span class="keyword">int</span> n,head[N],tot=<span class="number">1</span>,f[N],fp[N];</div><div class="line"><span class="keyword">int</span> cn,ban[N&lt;&lt;<span class="number">1</span>],mxw,cir[N];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> dp[N],mxdp,tree[N],r[N],sum[N],ans=-inf,cl;</div><div class="line"><span class="keyword">bool</span> vis[N]; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (;*cp&lt;<span class="string">'0'</span>||*cp&gt;<span class="string">'9'</span>;cp++); </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;*cp&gt;=<span class="string">'0'</span>&amp;&amp;*cp&lt;=<span class="string">'9'</span>;cp++)</div><div class="line">		x=x*<span class="number">10</span>+*cp<span class="number">-48</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	e[++tot]=E(head[x],y,v),head[x]=tot;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">BAN</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	ban[x]=ban[x^<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> y; vis[x]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=e[i].next) &#123;</div><div class="line">		y=e[i].to; </div><div class="line">		<span class="keyword">if</span> (y==fa) <span class="keyword">continue</span>;</div><div class="line">		<span class="keyword">if</span> (vis[y]) &#123;</div><div class="line">			f[y]=x,cir[<span class="number">1</span>]=y,fp[y]=i;</div><div class="line">			<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">		f[y]=x,fp[y]=i;</div><div class="line">		<span class="keyword">if</span> (dfs(y,x)) <span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;	</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (dp[x]&gt;mxdp)</div><div class="line">		mxdp=dp[x],mxw=x;</div><div class="line">	<span class="keyword">int</span> y; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=head[x];i;i=e[i].next) &#123;</div><div class="line">		y=e[i].to; </div><div class="line">		<span class="keyword">if</span> (y==fa||ban[i]) <span class="keyword">continue</span>;</div><div class="line">		dp[y]=dp[x]+e[i].v; </div><div class="line">		DFS(y,x); </div><div class="line">	&#125;</div><div class="line">&#125;		</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">findmx</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	dp[cir[x]]=<span class="number">0</span>;</div><div class="line">	DFS(cir[x],<span class="number">0</span>),tree[x]=mxdp;</div><div class="line">	mxdp=<span class="number">-1</span>,dp[mxw]=<span class="number">0</span>; </div><div class="line">	DFS(mxw,<span class="number">0</span>);</div><div class="line">	ans=max(ans,mxdp); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">circle</span><span class="params">()</span> </span>&#123; </div><div class="line">	dfs(<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">	<span class="keyword">int</span> x=cir[<span class="number">1</span>]; cn=<span class="number">0</span>,r[<span class="number">1</span>]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (;f[x]!=cir[<span class="number">1</span>];x=f[x]) &#123;</div><div class="line">		cir[++cn]=f[x];</div><div class="line">		BAN(fp[x]),cl+=(r[cn]=e[fp[x]].v); </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=cn;i++) </div><div class="line">		sum[i]=sum[i<span class="number">-1</span>]+r[i];</div><div class="line">	r[<span class="number">1</span>]=<span class="number">0</span>; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cn;i++) &#123;</div><div class="line">		mxdp=<span class="number">-1</span>,findmx(i); </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">let_s_be_a_big_role</span><span class="params">()</span> </span>&#123;</div><div class="line">	plu.init(cn); </div><div class="line">	cha.init(cn);</div><div class="line">	plu.build(<span class="number">1</span>,<span class="number">1</span>,cn,sum,tree,<span class="number">1</span>); </div><div class="line">	cha.build(<span class="number">1</span>,<span class="number">1</span>,cn,tree,sum,<span class="number">-1</span>); </div><div class="line">	<span class="keyword">int</span> x;<span class="keyword">long</span> <span class="keyword">long</span> tmp,ans2=inf;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cn;i++) &#123;</div><div class="line">		<span class="keyword">if</span> (plu.mxp[<span class="number">1</span>]!=cha.mxp[<span class="number">1</span>])</div><div class="line">			ans2=min(ans2,plu.mx[<span class="number">1</span>]+cha.mx[<span class="number">1</span>]);</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			tmp=plu.mx[<span class="number">1</span>]+cha.se[<span class="number">1</span>];</div><div class="line">			<span class="keyword">if</span> (plu.se[<span class="number">1</span>]+cha.mx[<span class="number">1</span>]&gt;tmp)</div><div class="line">				tmp=plu.se[<span class="number">1</span>]+cha.mx[<span class="number">1</span>];</div><div class="line">			ans2=min(ans2,tmp);</div><div class="line">		&#125;</div><div class="line">		plu.insert(<span class="number">1</span>,<span class="number">1</span>,cn,i,tree[i]+(cl+sum[i])); </div><div class="line">		cha.insert(<span class="number">1</span>,<span class="number">1</span>,cn,i,tree[i]-(cl+sum[i])); </div><div class="line">	&#125;</div><div class="line">	ans=max(ans,ans2);</div><div class="line">&#125;</div><div class="line">			</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("foodshop.in","r",stdin); </span></div><div class="line"><span class="comment">//	freopen("foodshop.out","w",stdout);</span></div><div class="line">	fread(cp,<span class="number">1</span>,<span class="number">6000000</span>,<span class="built_in">stdin</span>);</div><div class="line">	in(n);<span class="keyword">int</span> x,y,v; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">		in(x),in(y),in(v); </div><div class="line">		add(x,y,v),add(y,x,v); </div><div class="line">	&#125;</div><div class="line">	circle();</div><div class="line">	let_s_be_a_big_role();</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%.1lf\n"</span>,(<span class="keyword">double</span>)ans/<span class="number">2</span>); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树链剖分 </tag>
            
            <tag> 启发式合并 </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3107:】[cqoi2013]二进制a+b]]></title>
      <url>/bzoj3107/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个可以DP但是构造更优越的题？</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
3107: [cqoi2013]二进制a+b
</h2>
Time Limit: 10 Sec Memory Limit: 128 MB
</center>
<h2 id="description">Description</h2>
<p>输入三个整数<span class="math inline">\(a\)</span>,<span class="math inline">\(b\)</span>,<span class="math inline">\(c\)</span>，把它们写成无前导<span class="math inline">\(0\)</span>的二进制整数。比如<span class="math inline">\(a=7\)</span>, <span class="math inline">\(b=6\)</span>,<span class="math inline">\(c=9\)</span>，写成二进制为<span class="math inline">\(a=111\)</span>,<span class="math inline">\(b=110\)</span>,<span class="math inline">\(c=1001\)</span>。接下来以位数最多的为基准，其他整数在前面添加前导<span class="math inline">\(0\)</span>，使得<span class="math inline">\(a\)</span>,<span class="math inline">\(b\)</span>,<span class="math inline">\(c\)</span>拥有相同的位数。比如在刚才的例子中，添加完前导<span class="math inline">\(0\)</span>后为<span class="math inline">\(a=0111\)</span>,<span class="math inline">\(b=0110\)</span>,<span class="math inline">\(c=1001\)</span>。最后，把<span class="math inline">\(a\)</span>, <span class="math inline">\(b\)</span>, <span class="math inline">\(c\)</span>的各位进行重排，得到<span class="math inline">\(a’\)</span>, <span class="math inline">\(b’\)</span>,<span class="math inline">\(c’\)</span>，使得<span class="math inline">\(a’+b’=c’\)</span>。比如在刚才的例子中，可以这样重排：<span class="math inline">\(a’=0111\)</span>,<span class="math inline">\(b’=0011\)</span>,<span class="math inline">\(c’=1010\)</span>。 你的任务是让<span class="math inline">\(c’\)</span>最小。如果无解，输出<span class="math inline">\(-1\)</span>。</p>
<h2 id="input">Input</h2>
<p>输入仅一行，包含三个整数<span class="math inline">\(a,b,c\)</span>。</p>
<h2 id="output">Output</h2>
<p>输出仅一行，为<span class="math inline">\(c’\)</span>的最小值。 ## HINT <span class="math inline">\(a,b,c&lt;=2^{30}\)</span> 解题报告 考场现场<strong>构造失败</strong>，<span class="math inline">\(5\)</span>分钟修改<span class="math inline">\(\to AC\)</span>; 之前观察<strong>二进制加法</strong>时得到消<span class="math inline">\(1\)</span>技巧，就是在<span class="math inline">\(11...1\)</span>末位加<span class="math inline">\(1\)</span>,可以变化成<span class="math inline">\(100...0\)</span>； 进行这样一个摆放操作，令原数为连续的<span class="math inline">\(x\)</span>个<span class="math inline">\(1\)</span>，消耗<span class="math inline">\(1\)</span>个<span class="math inline">\(1\)</span>,共使用<span class="math inline">\(x+1\)</span>个<span class="math inline">\(1\)</span>,可以认为收益是消除<span class="math inline">\(x\)</span>个<span class="math inline">\(1\)</span>,代价是<span class="math inline">\(1&lt;&lt;x\)</span>; 现在我们把题意简化成<span class="math inline">\(a\)</span>个<span class="math inline">\(1+\)</span><span class="math inline">\(b\)</span>个<span class="math inline">\(1\)</span>消去<span class="math inline">\(c\)</span>个<span class="math inline">\(1\)</span>的问题，令<span class="math inline">\(a&gt;=b\)</span></p>
<ol style="list-style-type: decimal">
<li>当<span class="math inline">\(a&gt;=c\)</span>，根据上面提到的消<span class="math inline">\(1\)</span>方法，可以在<span class="math inline">\(a\)</span>中拿出<span class="math inline">\(c\)</span>个<span class="math inline">\(1\)</span>摆在连续的位置，然后在末位放置一个<span class="math inline">\(1\)</span>,这样形成<span class="math inline">\(1..00\)</span>共<span class="math inline">\(c\)</span>个0的数段，<span class="math inline">\(b\)</span>中剩余的<span class="math inline">\(b-1\)</span>个<span class="math inline">\(1\)</span>可以从后往前填充这个数段，<span class="math inline">\(a\)</span>中剩余的<span class="math inline">\(1\)</span>和<span class="math inline">\(b-1\)</span>中剩余的<span class="math inline">\(1\)</span>放到数段后方，这样构造出一个满足条件的<span class="math inline">\(c&#39;\)</span>，我们需要证明这个<span class="math inline">\(c&#39;\)</span>是最小的： 观察<span class="math inline">\(c&#39;\)</span>的形态 <span class="math inline">\(100...011...1011...1\)</span> 在<span class="math inline">\(1\)</span>数不变的情况下，可以变小的可能是最靠后的<span class="math inline">\(0\)</span>能否被前方的一个<span class="math inline">\(1\)</span>取代，考虑这个<span class="math inline">\(0\)</span>是消<span class="math inline">\(1\)</span>过程中最末尾的<span class="math inline">\(0\)</span>,如果把这个<span class="math inline">\(0\)</span>提前，消<span class="math inline">\(1\)</span>个数会减少,如果此时要保证消<span class="math inline">\(1\)</span>个数不变，需要重启一段消<span class="math inline">\(1\)</span>,那么新开启的一段消<span class="math inline">\(1\)</span>开头多出的一个<span class="math inline">\(1\)</span>会使结束的<span class="math inline">\(0\)</span>位置后移，<strong>比原构造数劣</strong>;</li>
<li>当<span class="math inline">\(a&lt;c\)</span>,先将<span class="math inline">\(a\)</span>个<span class="math inline">\(1\)</span>消掉，形成<span class="math inline">\(1..a0_s..\)</span>，然后在头部<span class="math inline">\(1\)</span>处放置<span class="math inline">\(b-1\)</span>中的<span class="math inline">\(1\)</span>，每次可以消掉一个<span class="math inline">\(1\)</span>,剩余的<span class="math inline">\(b-1\)</span>中的<span class="math inline">\(1\)</span>放在尾部，得到的构造数形式为<span class="math inline">\(100...011...1\)</span>为最优；</li>
</ol>
<p>时间复杂度<span class="math inline">\(O(logn)\)</span>,有一种<span class="math inline">\(O(log^4n)\)</span>的<span class="math inline">\(DP\)</span>,见<a href="http://blog.csdn.net/xym_CSDN/article/details/52301891" target="_blank" rel="external">xym的blog</a></p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> mi[<span class="number">63</span>];</div><div class="line"><span class="keyword">int</span> t,a,b,c,l;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">len</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">60</span>;i&gt;=<span class="number">0</span>;i--) </div><div class="line">		<span class="keyword">if</span> (x/mi[i]%<span class="number">2</span>) <span class="keyword">return</span> i+<span class="number">1</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">one</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> tmp=<span class="number">0</span>;</div><div class="line">	<span class="keyword">while</span> (x) &#123;</div><div class="line">		tmp+=x&amp;<span class="number">1</span>;</div><div class="line">		x&gt;&gt;=<span class="number">1</span>; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> cut=x+y-z;</div><div class="line">	<span class="keyword">if</span> (x==<span class="number">0</span>&amp;&amp;cut!=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>; </div><div class="line">	<span class="keyword">if</span> (cut==<span class="number">0</span>) <span class="keyword">return</span> mi[x+y]<span class="number">-1</span>;</div><div class="line">	<span class="keyword">if</span> (cut&lt;<span class="number">0</span>||cut&gt;=x+y) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">	<span class="keyword">if</span> (cut&lt;=y) &#123;</div><div class="line">		<span class="keyword">long</span> <span class="keyword">long</span> tmp=mi[cut],l=<span class="number">1</span>; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;cut;i++) &#123;</div><div class="line">			<span class="keyword">if</span> (l==x) <span class="keyword">break</span>; </div><div class="line">			l++; tmp+=mi[i]; </div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=l+<span class="number">1</span>;i&lt;=x;i++) </div><div class="line">			tmp=tmp*<span class="number">2</span>+<span class="number">1</span>; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=cut+<span class="number">1</span>;i&lt;=y;i++) </div><div class="line">			tmp=tmp*<span class="number">2</span>+<span class="number">1</span>; </div><div class="line">		<span class="keyword">return</span> tmp;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">long</span> <span class="keyword">long</span> tmp=mi[y];<span class="keyword">int</span> cnt=<span class="number">1</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=y+<span class="number">1</span>;i&lt;=cut;i++) 	</div><div class="line">			tmp=tmp*<span class="number">2L</span>L,cnt++;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x-cnt;i++) </div><div class="line">			tmp+=mi[i]; </div><div class="line">		<span class="keyword">return</span> tmp;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("binary.in","r",stdin);</span></div><div class="line"><span class="comment">//	freopen("binary.out","w",stdout);</span></div><div class="line">	mi[<span class="number">0</span>]=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">62</span>;i++) </div><div class="line">		mi[i]=mi[i<span class="number">-1</span>]*<span class="number">2L</span>L;</div><div class="line">	l=<span class="number">0</span>;</div><div class="line">	<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c; </div><div class="line">	l=max(l,len(a)); </div><div class="line">	l=max(l,len(b));</div><div class="line">	l=max(l,len(c)); </div><div class="line">	a=one(a),b=one(b),c=one(c);</div><div class="line">	<span class="keyword">if</span> (a&gt;b) swap(a,b);</div><div class="line">	<span class="keyword">if</span> ((tmp=calc(a,b,c))!=<span class="number">1</span>&amp;&amp;len(tmp)&lt;=l)</div><div class="line">		<span class="built_in">cout</span>&lt;&lt;tmp&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">	<span class="keyword">else</span> </div><div class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数学题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 位运算 </tag>
            
            <tag> 构造 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 1604】[Usaco2008 Open]Cow Neighborhoods 奶牛的邻居]]></title>
      <url>/bzoj1604/</url>
      <content type="html"><![CDATA[<blockquote>
<p>曼哈顿距离最小生成树的模板+奇怪的做法</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
1604: [Usaco2008 Open]Cow Neighborhoods 奶牛的邻居
</h2>
Time Limit: 5 Sec Memory Limit: 64 MB
</center>
<h2 id="description">Description</h2>
<p>了解奶牛们的人都知道，奶牛喜欢成群结队．观察约翰的<span class="math inline">\(N(1≤N≤100000)\)</span>只奶牛，你会发现她们已经结成了几个“群”．每只奶牛在吃草的时候有一个独一无二的位置坐标<span class="math inline">\(X_i,Y_i(l≤Xi,Yi≤[1..10^9]\)</span>；<span class="math inline">\(X_i,Y_i∈Z\)</span>．当满足下列两个条件之一，两只奶牛<span class="math inline">\(i\)</span>和<span class="math inline">\(j\)</span>是属于同一个群的： 1．两只奶牛的曼哈顿距离不超过<span class="math inline">\(C(1≤C≤10^9)\)</span>，即<span class="math inline">\(|X_i-X_j|+|Y_i-Y_j|&lt;=c\)</span>. 2．两只奶牛有共同的邻居．即，存在一只奶牛<span class="math inline">\(k\)</span>，使<span class="math inline">\(i\)</span>与<span class="math inline">\(k\)</span>，<span class="math inline">\(j\)</span>与<span class="math inline">\(k\)</span>均同属一个群． 给出奶牛们的位置，请计算草原上有多少个牛群，以及最大的牛群里有多少奶牛 ####Input 第<span class="math inline">\(1\)</span>行输入<span class="math inline">\(N\)</span>和<span class="math inline">\(C\)</span>，之后<span class="math inline">\(N\)</span>行每行输入一只奶牛的坐标． ####Output 仅一行，先输出牛群数，再输出最大牛群里的牛数，用空格隔开． ###解题报告 题目中隐含的<strong>关键字</strong>：<strong>曼哈顿距离</strong>，<strong>并查集可以维护的信息</strong> 加上点数很多，两两连边是<span class="math inline">\(O(n^2)\)</span>级别，而最终答案最最理想的状态就是<strong>生成树</strong>的形态。 直接使用<strong>曼哈顿距离最小生成树</strong>，连好<span class="math inline">\(4n\)</span>左右条边后，按照边权排序，选取可以使用的，用并查集维护信息。 <big>提交-&gt;AC,<strong>速度倒数！！</strong></big> 上网上搜了<strong>题解</strong>：标签是<strong>set+特殊的技巧</strong>（orz iwtwiioi) 做法是这样的，设曼哈顿距离为<span class="math inline">\(M\)</span> ,则有 <span class="math display">\[M=|x_i-x_j|+|y_i-y_j|\]</span> 拆绝对值得， <span class="math display">\[M=(x_i+y_i)-(x_j+y_j) (x_i&gt;x_j,y_i&gt;y_j)①\]</span> <span class="math display">\[M=(x_i-y_i)-(x_j-y_j) (x_i&gt;x_j,y_i&lt;y_j)②\]</span> <span class="math display">\[M=-(x_i-y_i)+(x_j-y_j) (x_i&lt;x_j,y_i&gt;y_j)③\]</span> <span class="math display">\[M=-(x_i+y_i)+(x_j+y_j) (x_i&lt;x_j,y_i&lt;y_j)④\]</span> 其中①④，②③分别可以看成 <span class="math display">\[M_1=|(x_i+y_i)-(x_j+y_j)|\]</span> <span class="math display">\[M_2=|(x_i-y_i)-(x_j-y_j)|\]</span> 两点的曼哈顿距离实际上是<span class="math inline">\(M_1\)</span>和<span class="math inline">\(M_2\)</span>的<strong>较大值</strong> 然后<span class="math inline">\(M&lt;=c &lt;=&gt; M_1&lt;=c且M_2&lt;=c\)</span> 我们考虑对满足这个条件的点对连边； 具体可以将点坐标重设为<span class="math inline">\((x_i+y_i,x_i-y_i)\)</span>按照横坐标排序后，维护一个队列，队列中的点横坐标之差小于等于<span class="math inline">\(c\)</span>,并将这些点的纵坐标加入<code>multiset</code>，每次加入的时候，如果与两侧的点差<span class="math inline">\(&lt;=c\)</span>,就连边。 <strong>细节</strong>： 1. 为什么只判断两侧的点： 设当前点在<code>multiset</code>中下标为<span class="math inline">\(x\)</span>,如果<span class="math inline">\(x\)</span>与<span class="math inline">\(x+2\)</span>差在<span class="math inline">\(c\)</span>之内，那么一定存在<span class="math inline">\(x \to x+1\)</span>和<span class="math inline">\(x+1 \to x+2\)</span>,连通性上没有影响； 2. <code>multiset</code>: 可重元素集合，结构体需要重载运算符，删除时，<code>erase(data)</code>会删除与<code>data</code>相等的所有元素，<code>erase(find(data))</code>只删除一个； ###代码 ####曼哈顿最小生成树 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">2000000000</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span> &#123;</span></div><div class="line">    <span class="keyword">int</span> x,y,v;</div><div class="line">    E(<span class="keyword">int</span> x=<span class="number">0</span>,<span class="keyword">int</span> y=<span class="number">0</span>,<span class="keyword">int</span> v=<span class="number">0</span>)</div><div class="line">        :x(x),y(y),v(v) &#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> bit[N],pos[N],id[N],vec[N],sz[N];</div><div class="line"><span class="keyword">int</span> x[N],y[N],tot,cnt,n,k,f[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpi</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x[a]==x[b]?y[a]&lt;y[b]:x[a]&lt;x[b]; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpe</span><span class="params">(E a,E b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> a.v&lt;b.v; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x[a]-x[b])+<span class="built_in">abs</span>(y[a]-y[b]); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> dis)</span> </span>&#123;</div><div class="line">    e[++tot]=E(x,y,dis); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val,<span class="keyword">int</span> pur)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (;x;x-=x&amp;-x)</div><div class="line">        <span class="keyword">if</span> (val&lt;=bit[x]) </div><div class="line">            bit[x]=val,pos[x]=pur; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp=<span class="number">-1</span>,mn=inf;</div><div class="line">    <span class="keyword">for</span> (;x&lt;=cnt;x+=x&amp;-x) </div><div class="line">        <span class="keyword">if</span> (bit[x]&lt;mn)</div><div class="line">            mn=bit[x],tmp=pos[x]; </div><div class="line">    <span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> lower_bound(vec+<span class="number">1</span>,vec+<span class="number">1</span>+cnt,x)-vec;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (f[x]!=x) f[x]=find(f[x]); </div><div class="line">    <span class="keyword">return</span> f[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mmst</span><span class="params">()</span> </span>&#123;</div><div class="line">    tot=<span class="number">0</span>; </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> dir=<span class="number">0</span>;dir&lt;<span class="number">4</span>;dir++) &#123;</div><div class="line">        <span class="keyword">if</span> (dir==<span class="number">1</span>||dir==<span class="number">3</span>)</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </div><div class="line">                swap(x[i],y[i]); </div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">                x[i]=-x[i]; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </div><div class="line">            id[i]=i; </div><div class="line">        sort(id+<span class="number">1</span>,id+<span class="number">1</span>+n,cmpi);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </div><div class="line">            vec[i]=y[i]-x[i]; </div><div class="line">        sort(vec+<span class="number">1</span>,vec+<span class="number">1</span>+n); </div><div class="line">        cnt=unique(vec+<span class="number">1</span>,vec+<span class="number">1</span>+n)-vec<span class="number">-1</span>; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </div><div class="line">            bit[i]=inf,pos[i]=<span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> u,v;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--) &#123;</div><div class="line">            u=hash(y[id[i]]-x[id[i]]); </div><div class="line">            v=query(u);</div><div class="line">            <span class="keyword">if</span> (v!=<span class="number">-1</span>)</div><div class="line">                add(id[i],v,dis(id[i],v)); </div><div class="line">            update(u,x[id[i]]+y[id[i]],id[i]); </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//	freopen("graph.in","r",stdin); </span></div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]); </div><div class="line">    Mmst(); </div><div class="line">    sort(e+<span class="number">1</span>,e+<span class="number">1</span>+tot,cmpe);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i]=i;  </div><div class="line">    <span class="keyword">int</span> a,b,x,y,tmp=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++) &#123;</div><div class="line">    	<span class="keyword">if</span> (e[i].v&gt;k) <span class="keyword">break</span>;</div><div class="line">        a=e[i].x,b=e[i].y; </div><div class="line">        <span class="keyword">if</span> ((x=find(a))!=(y=find(b))) &#123; </div><div class="line">			f[x]=y; </div><div class="line">		&#125;</div><div class="line"> 	&#125;</div><div class="line"> 	<span class="keyword">int</span> ans1=<span class="number">0</span>,ans2=<span class="number">0</span>; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123; </div><div class="line">		<span class="keyword">if</span> (!sz[find(i)]) ans1++;</div><div class="line">		sz[find(i)]++; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </div><div class="line">		<span class="keyword">if</span> (f[i]==i) ans2=max(ans2,sz[i]);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d %d"</span>,ans1,ans2);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="标算">标算</h4>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100001</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> inf=<span class="number">10000000000000L</span>L;</div><div class="line"><span class="keyword">int</span> n,c,ans,mx;</div><div class="line"><span class="keyword">int</span> f[N],sz[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span></div><div class="line">	<span class="keyword">long</span> <span class="keyword">long</span> x,y;<span class="keyword">int</span> id;</div><div class="line">	point(<span class="keyword">long</span> <span class="keyword">long</span> x=<span class="number">0</span>,<span class="keyword">long</span> <span class="keyword">long</span> y=<span class="number">0</span>,<span class="keyword">int</span> id=<span class="number">0</span>) </div><div class="line">		:x(x),y(y),id(id)&#123;&#125;</div><div class="line">&#125; p[N];</div><div class="line"><span class="built_in">multiset</span> &lt;point&gt; s;</div><div class="line"><span class="built_in">set</span> &lt;point&gt;::iterator it;</div><div class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(point a,point b) &#123;</div><div class="line">    <span class="keyword">return</span> a.y&lt;b.y;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpx</span><span class="params">(point a,point b)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> a.x&lt;b.x;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x==f[x]?x:f[x]=find(f[x]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> p=find(x),q=find(y);</div><div class="line">    <span class="keyword">if</span>(p!=q) f[p]=q,ans--;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    s.insert(point(<span class="number">0</span>,inf,<span class="number">0</span>));</div><div class="line">	s.insert(point(<span class="number">0</span>,-inf,<span class="number">0</span>));   </div><div class="line">    <span class="keyword">int</span> now=<span class="number">1</span>; s.insert(p[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++) &#123;</div><div class="line">        <span class="keyword">while</span>(p[i].x-p[now].x&gt;c) &#123;</div><div class="line">            s.erase(s.find(p[now]));</div><div class="line">            now++;</div><div class="line">        &#125;</div><div class="line">        it=s.lower_bound(p[i]);</div><div class="line">        point r=*it,l=*--it;</div><div class="line">        <span class="keyword">if</span>(p[i].y-l.y&lt;=c)</div><div class="line">            merge(p[i].id,l.id);</div><div class="line">        <span class="keyword">if</span>(r.y-p[i].y&lt;=c)</div><div class="line">            merge(p[i].id,r.id);</div><div class="line">        s.insert(p[i]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>;</div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar())</div><div class="line">		<span class="keyword">if</span> (ch==<span class="string">'-'</span>) f=<span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar())</div><div class="line">		x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">	x*=f;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;c);ans=n;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=i;</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,y;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</div><div class="line">    	in(x),in(y); </div><div class="line">    	p[i]=point(x+y,x-y,i);</div><div class="line">    &#125;</div><div class="line">    sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>,cmpx);</div><div class="line">    solve();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) sz[find(i)]++;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) mx=max(mx,sz[i]);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans,mx);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 平衡树 </tag>
            
            <tag> STL </tag>
            
            <tag> 曼哈顿距离最小生成树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【uoj 29】[IOI201]Holiday]]></title>
      <url>/uoj29/</url>
      <content type="html"><![CDATA[<h1 id="题目">题目</h1>
<center>
<h2>
<ol start="29" style="list-style-type: decimal">
<li>【IOI2014】Holiday
</li></ol></h2>
时间限制：<span class="math inline">\(5s\)</span> ,空间限制：<span class="math inline">\(64\)</span><strong>MB</strong>
</center>

<h2 id="题目描述">题目描述</h2>
<p>健佳正在制定下个假期去台湾的游玩计划。在这个假期，健佳将会在城市之间奔波，并且参观这些城市的景点。 在台湾共有<span class="math inline">\(n\)</span>个城市，它们全部位于一条高速公路上。这些城市连续地编号为<span class="math inline">\(0\)</span>到 <span class="math inline">\(n−1\)</span>。对于城市<span class="math inline">\(i\)</span> <span class="math inline">\((0&lt;i&lt;n−1)\)</span>而言，与其相邻的城市是<span class="math inline">\(i−1\)</span>和<span class="math inline">\(i+1\)</span>。但是对于城市<span class="math inline">\(0\)</span>，唯一与其相邻的是城市<span class="math inline">\(1\)</span>。而对于城市<span class="math inline">\(n−1\)</span>，唯一与其相邻的是城市<span class="math inline">\(n−2\)</span>。 <a id="more"></a> 每个城市都有若干景点。健佳有<span class="math inline">\(d\)</span>天假期并且打算要参观尽量多的景点。健佳已经选择了假期开始要到访的第一个城市。在假期的每一天，健佳可以选择去一个相邻的城市，或者参观所在城市的所有景点，但是不能同时进行。即使健佳在同一个城市停留多次，他也不会去重复参观该城市的景点。请帮助健佳策划这个假期，以便能让他参观尽可能多的景点。</p>
<h2 id="任务">任务</h2>
<p>请实现函数<code>findMaxAttraction</code>，以计算健佳最多可以参观多少个景点。 <code>findMaxAttraction(n, start, d, attraction)</code> <span class="math inline">\(n\)</span>: 城市数。 <span class="math inline">\(start\)</span>: 起点城市的编号。 <span class="math inline">\(d\)</span>: 假期的天数。 <span class="math inline">\(attraction\)</span>: 长度为<span class="math inline">\(n\)</span>的数组；<code>attraction[i]</code> 表示城市<span class="math inline">\(i\)</span>的景点数目，其中 <span class="math inline">\(0≤i≤n−1\)</span>. 该函数应返回健佳最多可以参观的景点数。 <span class="math inline">\(0≤d≤2n+n/2\)</span> 每个城市中的景点数都是非负整数。<span class="math inline">\(2≤n≤100000\)</span></p>
<h2 id="接口信息">接口信息</h2>
<p><code>long long int findMaxAttraction(int n, int start, int d, int attraction[]);</code></p>
<h1 id="解题报告">解题报告</h1>
<p><strong>第一道</strong> AC的 <strong>交互题</strong>，EXCITING!</p>
<p>这道题<span class="math inline">\(fye\)</span>学姐互测中出过，当时写的是<span class="math inline">\(O(n^2logn)\)</span>的暴力：</p>
<ul>
<li>分别预处理出<code>f[i]</code> <code>g[i]</code> <code>ff[i]</code> <code>gg[i]</code>, 分别表示向左走单次花费代价<span class="math inline">\(i\)</span>的最大收益，向右走单向，向左走双向，向右走双向；</li>
<li>这四个数组可以先枚举代价，再枚举最远点，在主席树上选择前<span class="math inline">\(k\)</span>大的和；</li>
</ul>
<p>需要优化这个算法：</p>
<ul>
<li>考虑<strong>决策点的单调性</strong>：以<code>g[i]</code>为例，如果<code>g[i]</code>的决策点为<span class="math inline">\(x\)</span>，则<code>g[i+1]</code>的决策点<span class="math inline">\(y&gt;=x\)</span>，这个可以通过打表找规律/贪心思路得到，归纳下就可以得到决策点的单调性；</li>
<li>有了决策单调性，优化预处理的过程，就是很常见的<code>work(l,r,L,R)</code> <span class="math inline">\(\to\)</span> <code>work(l,mid-1,L,MID),work(mid+1,r,MID,R);</code> 这样 复杂度就是<span class="math inline">\(O(n\log^2 n)\)</span></li>
</ul>
<p>调试过程中出现了极大的问题，最后竟然是<strong>离散化</strong>残了，不是很理解。 # 代码 四个数组一个<code>work</code>，因为<strong>传参数量</strong>影响了效率；</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"holiday.h"</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100005</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pret</span>&#123;</span></div><div class="line">	 <span class="keyword">int</span> l,r,sz; <span class="keyword">long</span> <span class="keyword">long</span> sm;</div><div class="line">&#125; node[<span class="number">2000000</span>];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> f[N*<span class="number">3</span>],g[N*<span class="number">3</span>],ff[N*<span class="number">3</span>],gg[N*<span class="number">3</span>];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> ret;</div><div class="line"><span class="keyword">int</span> cnt,dis[N],head[N],b[N],tn,id[N],maxd;</div><div class="line"><span class="keyword">bool</span> flag=<span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> w,<span class="keyword">long</span> <span class="keyword">long</span> val)</span> </span>&#123;</div><div class="line">	x=++cnt, node[x]=node[from],node[x].sm+=val,node[x].sz+=<span class="number">1</span>; </div><div class="line">	<span class="keyword">if</span> (l==r) <span class="keyword">return</span>; <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">	<span class="keyword">if</span> (w&lt;=mid) update(node[from].l,node[x].l,l,mid,w,val); </div><div class="line">	<span class="keyword">else</span> update(node[from].r,node[x].r,mid+<span class="number">1</span>,r,w,val); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> lson,<span class="keyword">int</span> rson,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (k&lt;=<span class="number">0</span>) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span> (l==r) &#123;</div><div class="line">		ret+=<span class="number">1L</span>L*b[l]*min(node[rson].sz-node[lson].sz,k);</div><div class="line">		<span class="keyword">return</span>; </div><div class="line">	&#125;	</div><div class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,tmp;</div><div class="line">	<span class="keyword">if</span> ((tmp=node[node[rson].r].sz-node[node[lson].r].sz)&gt;=k) </div><div class="line">		query(node[lson].r,node[rson].r,mid+<span class="number">1</span>,r,k); </div><div class="line">	<span class="keyword">else</span> ret+=node[node[rson].r].sm-node[node[lson].r].sm,</div><div class="line">		query(node[lson].l,node[rson].l,l,mid,k-tmp);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> low,<span class="keyword">int</span> up,<span class="keyword">long</span> <span class="keyword">long</span> *f,<span class="keyword">bool</span> type,<span class="keyword">int</span> from)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (l&gt;r) <span class="keyword">return</span>; <span class="keyword">if</span> (low&gt;up) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,i,cho=<span class="number">0</span>; </div><div class="line">	<span class="keyword">if</span> (type) &#123;</div><div class="line">		<span class="keyword">for</span> (i=low;i&lt;=up;++i) &#123;</div><div class="line">			ret=<span class="number">0</span>,query(head[from<span class="number">-1</span>],head[i],<span class="number">1</span>,tn,mid-dis[i]);</div><div class="line">			<span class="keyword">if</span> (ret&gt;f[mid]||!cho) </div><div class="line">				f[mid]=ret, cho=i; </div><div class="line">		&#125;</div><div class="line">		work(l,mid<span class="number">-1</span>,low,cho,f,type,from);</div><div class="line">		work(mid+<span class="number">1</span>,r,cho,up,f,type,from); </div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">for</span> (i=up;i&gt;=low;--i) &#123;</div><div class="line">			ret=<span class="number">0</span>,query(head[i<span class="number">-1</span>],head[from],<span class="number">1</span>,tn,mid-dis[i]);</div><div class="line">			<span class="keyword">if</span> (ret&gt;f[mid]||!cho) &#123;</div><div class="line">				f[mid]=ret, cho=i; </div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		work(l,mid<span class="number">-1</span>,cho,up,f,type,from);</div><div class="line">		work(mid+<span class="number">1</span>,r,low,cho,f,type,from); </div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;	</div><div class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">findMaxAttraction</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> s,<span class="keyword">int</span> d,<span class="keyword">int</span> *a)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i; <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>; maxd=d; s++;	</div><div class="line">	<span class="keyword">for</span> (i=n;i;--i) a[i]=a[i<span class="number">-1</span>];</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) b[i]=a[i],id[i]=i; </div><div class="line">	sort(b+<span class="number">1</span>,b+n+<span class="number">1</span>); tn=unique(b+<span class="number">1</span>,b+n+<span class="number">1</span>)-b<span class="number">-1</span>;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) id[i]=lower_bound(b+<span class="number">1</span>,b+tn+<span class="number">1</span>,a[i])-b; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) </div><div class="line">		update(head[i<span class="number">-1</span>],head[i],<span class="number">1</span>,tn,id[i],a[i]); </div><div class="line">	<span class="keyword">for</span> (i=s;i&lt;=n;++i) dis[i]=i-s; </div><div class="line">	work(<span class="number">1</span>,d,s,min(n,s+d),g,<span class="number">1</span>,s); <span class="comment">//s-&gt;n,dan</span></div><div class="line">	<span class="keyword">for</span> (i=s;i;--i) dis[i]=s-i; </div><div class="line">	work(<span class="number">1</span>,d,max(<span class="number">1</span>,s-d),s<span class="number">-1</span>,f,<span class="number">0</span>,s<span class="number">-1</span>); <span class="comment">//s-1-&gt;1 dan</span></div><div class="line">	<span class="keyword">for</span> (i=s+<span class="number">1</span>;i&lt;=n;++i) dis[i]=(i-s)&lt;&lt;<span class="number">1</span>; </div><div class="line">	work(<span class="number">1</span>,d,s,min(n,s+(d&gt;&gt;<span class="number">1</span>)),gg,<span class="number">1</span>,s);<span class="comment">//s-&gt;n shuang</span></div><div class="line">	<span class="keyword">for</span> (i=s<span class="number">-1</span>;i;--i) dis[i]=(s-i)&lt;&lt;<span class="number">1</span>; </div><div class="line">	work(<span class="number">1</span>,d,max(<span class="number">1</span>,s-(d&gt;&gt;<span class="number">1</span>)),s<span class="number">-1</span>,ff,<span class="number">0</span>,s<span class="number">-1</span>);<span class="comment">//s-1-&gt;1 shuang</span></div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;=d;++i) &#123;</div><div class="line">		ans=max(ans,max(gg[i]+f[d-i],ff[i]+g[d-i]));</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> ans; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 主席树 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 3238】[Ahoi2013]差异]]></title>
      <url>/bzoj3238/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个做法好多的字符串题目。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
bzoj 3238: [Ahoi2013]差异
</h2>
Time Limit:<span class="math inline">\(20\)</span><strong>Sec</strong> Memory Limit: <span class="math inline">\(512\)</span><strong>MB</strong>
</center>
<h2 id="description">Description</h2>
<p><img src="http://www.lydsy.com/JudgeOnline/upload/201306/1%284%29.jpg" alt="图片标题"> <!--more--> ## Input</p>
<p>一行，一个字符串<span class="math inline">\(S\)</span></p>
<h2 id="output">Output</h2>
<p>一行，一个整数，表示所求值</p>
<h1 id="解题报告">解题报告</h1>
<p>看着<span class="math inline">\(ISA\)</span>大爷在学习<span class="math inline">\(SAM\)</span>，这样的话：我也要学~~ 所以我找了这个题，感觉<strong>后缀数组</strong>做非常简单：</p>
<ul>
<li>题目要求<span class="math inline">\(\sum_{1&lt;=i&lt;j&lt;=n} \ (len(S_i)+len(S_j))+ 2* \sum_{1&lt;=i&lt;j&lt;=n} \ lcp(S_i,S_j)\)</span></li>
<li>前半部分可以通过<strong>直接算</strong>得到，后半部分不需要按照字符串原有顺序枚举，可以在<span class="math inline">\(sa\)</span>，数组上，枚举<span class="math inline">\(\sum_{i=1}^{n-1} (\sum_{j=i+1}^{n}lcp(sa[i],sa[j]))\)</span> 括号内的部分是一个<strong>连续区间和</strong>，<span class="math display">\[LCP(sa[i],sa[j])= min  height_k (k=i+1 \to j )\]</span> 所以很显然，从右向左枚举 <span class="math inline">\(sa\)</span> ，在求<span class="math inline">\(\sum_{j=i+1}^n lcp(sa[i],sa[j])\)</span>时，当前 <span class="math inline">\(sa[i]\)</span> 会影响后方一个区间 <span class="math inline">\([i,r]\)</span> ,满足<span class="math inline">\(height_k (k \in [i+1,r]) &gt; height_i\)</span>，所以用一个单调栈，找到这个区间，然后区间覆盖+区间求和就搞定了；</li>
<li>黄学长也使用后缀数组，但是他用了两个单调栈直接求出了每个<span class="math inline">\(height\)</span>贡献答案的区间，比我高到不知道哪里去了；</li>
</ul>
<p>然后强行练<strong>后缀自动机</strong>的模板：</p>
<ul>
<li>因为没学过后缀树，所以想得有些烦；</li>
<li>因为后缀自动机的<span class="math inline">\(parent\)</span>树上存在<span class="math inline">\(right(fa) \supseteq right(x)\)</span> ,并且<span class="math inline">\(max(fa)+1=min(x)\)</span>，思考含义，实际上是从<span class="math inline">\(right\)</span>集合中的每个位置记录向前的子串，在到达<span class="math inline">\(max+1\)</span>长度时出现差异就会在<span class="math inline">\(par\)</span>树上分支，那么<span class="math inline">\(par\)</span>的<span class="math inline">\(max-min\)</span>是<span class="math inline">\(right\)</span>集合元素的<strong>最长公共后缀</strong>的组成部分；</li>
<li>所以反建后缀自动机，在每个节点统计答案：当前<span class="math inline">\(right\)</span>集合任选两个$ (max-min)$</li>
</ul>
<p>后缀数组的代码交时忘关文件<span class="math inline">\(RE\)</span>一波，<span class="math inline">\(SAM\)</span>的反而先<span class="math inline">\(A\)</span>了； 并且显然<span class="math inline">\(SAM\)</span>并没有速度上的优势； ### 代码 <span class="math inline">\(SA\)</span>: <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500002</span>; </div><div class="line"><span class="keyword">char</span> s[N]; </div><div class="line"><span class="keyword">int</span> sa[N],wa[N],wb[N],ss[N],wv[N],n;</div><div class="line"><span class="keyword">int</span> height[N],rank[N],sta[N],top;</div><div class="line"><span class="keyword">int</span> mark[N&lt;&lt;<span class="number">2</span>];<span class="keyword">long</span> <span class="keyword">long</span> sm[N&lt;&lt;<span class="number">2</span>]; </div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>,sum;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> (x[l]==x[r])&amp;&amp;(x[l+len]==x[r+len]); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i,j,p,*x=wa,*y=wb,*t; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;++i) ss[i]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;++i) ss[x[i]=s[i]]++;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;m;++i) ss[i]+=ss[i<span class="number">-1</span>]; </div><div class="line">	<span class="keyword">for</span> (i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i) sa[--ss[x[i]]]=i; </div><div class="line">	<span class="keyword">for</span> (j=<span class="number">1</span>,p=<span class="number">1</span>;j&lt;n&amp;&amp;p&lt;n;m=p,j&lt;&lt;=<span class="number">1</span>) &#123;</div><div class="line">		<span class="keyword">for</span> (p=<span class="number">0</span>,i=n-j;i&lt;n;++i) y[p++]=i; </div><div class="line">		<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;++i) <span class="keyword">if</span> (sa[i]&gt;=j) y[p++]=sa[i]-j;</div><div class="line">		<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;++i) wv[i]=x[y[i]];</div><div class="line">		<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;m;++i) ss[i]=<span class="number">0</span>; </div><div class="line">		<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;++i) ss[wv[i]]++;</div><div class="line">		<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;m;++i) ss[i]+=ss[i<span class="number">-1</span>];</div><div class="line">		<span class="keyword">for</span> (i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i) sa[--ss[wv[i]]]=y[i];</div><div class="line">		<span class="keyword">for</span> (t=x,x=y,y=t,p=<span class="number">1</span>,x[sa[<span class="number">0</span>]]=<span class="number">0</span>,i=<span class="number">1</span>;i&lt;n;++i) </div><div class="line">			x[sa[i]]=cmp(y,sa[i<span class="number">-1</span>],sa[i],j)?p<span class="number">-1</span>:p++;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calheight</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> *sa,<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> k=<span class="number">0</span>,i,j; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) rank[sa[i]]=i;</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;height[rank[i]]=k,++i) &#123;</div><div class="line">		k?k--:<span class="number">0</span>; j=sa[rank[i]<span class="number">-1</span>];<span class="comment">// cout&lt;&lt;i&lt;&lt;' '&lt;&lt;j&lt;&lt;' ';</span></div><div class="line">		<span class="keyword">for</span> (;s[j+k]==s[i+k]&amp;&amp;i+k&lt;n&amp;&amp;j+k&lt;n;)</div><div class="line">			k++;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	sm[x]=sm[x&lt;&lt;<span class="number">1</span>]+sm[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (mark[x]!=<span class="number">-1</span>) &#123;</div><div class="line">		sm[x&lt;&lt;<span class="number">1</span>]=<span class="number">1L</span>L*(mid-l+<span class="number">1</span>)*mark[x]; </div><div class="line">		sm[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">1L</span>L*(r-mid)*mark[x]; </div><div class="line">		mark[x&lt;&lt;<span class="number">1</span>]=mark[x],mark[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=mark[x]; </div><div class="line">		mark[x]=<span class="number">-1</span>; </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (l==r) &#123;sm[x]=height[l];<span class="keyword">return</span>;&#125;</div><div class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">	build(x&lt;&lt;<span class="number">1</span>,l,mid),build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r); </div><div class="line">	up(x);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123; sum+=sm[x]; <span class="keyword">return</span>;&#125;</div><div class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; down(x,l,r); </div><div class="line">	<span class="keyword">if</span> (L&lt;=mid) query(x&lt;&lt;<span class="number">1</span>,l,mid,L,R); </div><div class="line">	<span class="keyword">if</span> (R&gt;mid) query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123; </div><div class="line">		sm[x]=<span class="number">1L</span>L*(r-l+<span class="number">1</span>)*v,mark[x]=v;</div><div class="line">		<span class="keyword">return</span>; </div><div class="line">	&#125;	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; down(x,l,r); </div><div class="line">	<span class="keyword">if</span> (L&lt;=mid) change(x&lt;&lt;<span class="number">1</span>,l,mid,L,R,v); </div><div class="line">	<span class="keyword">if</span> (R&gt;mid) change(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R,v); </div><div class="line">	up(x); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s),n=<span class="built_in">strlen</span>(s); s[n]=<span class="number">0</span>;<span class="keyword">int</span> i,j;</div><div class="line">	da(s,sa,n+<span class="number">1</span>,<span class="number">128</span>);</div><div class="line">	calheight(s,sa,n);</div><div class="line">	build(<span class="number">1</span>,<span class="number">2</span>,n),<span class="built_in">memset</span>(mark,<span class="number">-1</span>,<span class="keyword">sizeof</span>(mark));</div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;++i) ans+=<span class="number">1L</span>L*(n-i)*(n<span class="number">-1</span>);</div><div class="line">	<span class="keyword">for</span> (i=n;i&gt;=<span class="number">2</span>;--i) &#123;</div><div class="line">		<span class="keyword">while</span> (top&amp;&amp;height[sta[top]]&gt;height[i]) --top;</div><div class="line">		<span class="keyword">if</span> (!top) j=n; <span class="keyword">else</span> j=sta[top]<span class="number">-1</span>; sta[++top]=i;</div><div class="line">		<span class="keyword">if</span> (i&lt;j) change(<span class="number">1</span>,<span class="number">2</span>,n,i+<span class="number">1</span>,j,height[i]); </div><div class="line">		sum=<span class="number">0</span>,query(<span class="number">1</span>,<span class="number">2</span>,n,i,n);</div><div class="line">		ans-=sum&lt;&lt;<span class="number">1</span>; </div><div class="line">	&#125;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><span class="math inline">\(SAM\)</span>: <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500010</span>; </div><div class="line"><span class="keyword">char</span> s[N]; </div><div class="line"><span class="keyword">int</span> n,root=<span class="number">1</span>,last=root,cnt=<span class="number">1</span>,head[N&lt;&lt;<span class="number">1</span>],tot,r[N&lt;&lt;<span class="number">1</span>],have[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> next,to; </div><div class="line">	edge (<span class="keyword">int</span> next=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>)</div><div class="line">		:next(next),to(to) &#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> par,go[<span class="number">26</span>],val; </div><div class="line">	node() :par(<span class="number">0</span>),val(<span class="number">0</span>) &#123;</div><div class="line">		<span class="built_in">memset</span>(go,<span class="number">0</span>,<span class="keyword">sizeof</span>(go));</div><div class="line">	&#125;</div><div class="line">&#125; mem[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</div><div class="line">	++cnt,mem[cnt].val=val; <span class="keyword">return</span> cnt; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> p=last; </div><div class="line">	<span class="keyword">int</span> np=newnode(mem[p].val+<span class="number">1</span>);</div><div class="line">	<span class="keyword">while</span> (p &amp;&amp; mem[p].go[w]==<span class="number">0</span>) </div><div class="line">		mem[p].go[w]=np,p=mem[p].par;</div><div class="line">	<span class="keyword">if</span> (p==<span class="number">0</span>) mem[np].par=root; </div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">int</span> q=mem[p].go[w]; </div><div class="line">		<span class="keyword">if</span> (mem[p].val+<span class="number">1</span>==mem[q].val) </div><div class="line">			mem[np].par=q; </div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">int</span> nq=newnode(mem[p].val+<span class="number">1</span>); </div><div class="line">			<span class="built_in">memcpy</span>(mem[nq].go,mem[q].go,<span class="keyword">sizeof</span>(mem[q].go)); </div><div class="line">			mem[nq].par=mem[q].par; </div><div class="line">			mem[q].par=nq,mem[np].par=nq; </div><div class="line">			<span class="keyword">while</span> (p&amp;&amp;mem[p].go[w]==q) </div><div class="line">				mem[p].go[w]=nq,p=mem[p].par;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	last=np; </div><div class="line">	have[np]=<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	e[++tot]=edge(head[x],y),head[x]=tot; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i,y; r[x]=have[x];</div><div class="line">	<span class="keyword">for</span> (i=head[x];i;i=e[i].next) &#123;</div><div class="line">		y=e[i].to; dfs(y);</div><div class="line">		r[x]+=r[y]; </div><div class="line">	&#125;</div><div class="line">	ans-=<span class="number">1L</span>L*r[x]*(r[x]<span class="number">-1</span>)*(mem[x].val-mem[mem[x].par].val);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s); <span class="keyword">int</span> i; n=<span class="built_in">strlen</span>(s);</div><div class="line">	<span class="keyword">for</span> (i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i) extend(s[i]-<span class="string">'a'</span>); </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;=cnt;++i) add(mem[i].par,i); </div><div class="line">	dfs(<span class="number">1</span>); </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;n;++i) ans+=<span class="number">1L</span>L*(n-i)*(n<span class="number">-1</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><span class="math inline">\(SAM\)</span>短很多！</p>
]]></content>
      
        <categories>
            
            <category> 字符串题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 后缀自动机 </tag>
            
            <tag> 后缀数组 </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【poj 3241】Object Clustering]]></title>
      <url>/poj3241/</url>
      <content type="html"><![CDATA[<blockquote>
<p>曼哈顿距离最小生成树： 真·板子题</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
Object Clustering
</h2>
</center>
<h2 id="description">Description</h2>
<p>We have <span class="math inline">\(N\)</span> (<span class="math inline">\(N≤10000\)</span>) objects, and wish to classify them into several groups by judgement of their resemblance. To simply the model, each object has <span class="math inline">\(2\)</span> indexes <span class="math inline">\(a\)</span> and <span class="math inline">\(b\)</span> (<span class="math inline">\(a,b≤500\)</span>). The resemblance of object <span class="math inline">\(i\)</span> and object <span class="math inline">\(j\)</span> is defined by <span class="math inline">\(d_{i,j}=|a_i-a_j|+|b_i-b_j|\)</span>, and then we say <span class="math inline">\(i\)</span> is <span class="math inline">\(d_{i,j}\)</span>resemble to <span class="math inline">\(j\)</span>. Now we want to find the minimum value of <span class="math inline">\(X\)</span>, so that we can classify the <span class="math inline">\(N\)</span> objects into <span class="math inline">\(K\)</span> (<span class="math inline">\(K &lt; N\)</span>) groups, and in each group, one object is at most <span class="math inline">\(X\)</span> resemble to another object in the same group, i.e, for every object <span class="math inline">\(i\)</span>, if <span class="math inline">\(i\)</span> is not the only member of the group, then there exists one object <span class="math inline">\(j\)</span> (<span class="math inline">\(i ≠ j\)</span>) in the same group that satisfies <span class="math inline">\(d_{i,j} ≤ X\)</span> <!--more--> # Input The first line contains two integers <span class="math inline">\(N\)</span> and <span class="math inline">\(K\)</span>. The following <span class="math inline">\(N\)</span> lines each contain two integers <span class="math inline">\(a\)</span> and <span class="math inline">\(b\)</span>, which describe a object. # Output A single line containsthe minimum <span class="math inline">\(X\)</span>. # 题目分析 简述题意：</p>
<p>模板题，学习了曼哈顿最小生成树，简单地描述一下， 就是对于一个点，只要连接八象限中曼哈顿距离最近的点，就一定可以构造出曼哈顿最小生成树。</p>
<p>考虑对于点<span class="math inline">\(i,j\)</span>,<span class="math inline">\(d_{i,j}=|a_i-a_j|+|b_i-b_j|\)</span>,令<span class="math inline">\(a_i&gt;a_j,b_i&gt;b_j\)</span>,则距离<span class="math inline">\(j\)</span>最近的点<span class="math inline">\(i\)</span>具有<span class="math inline">\(min(a_i+b_i)\)</span> 实际上我们<strong>不需要八个象限，只需要四个象限</strong>，利用位置关系的相对性就可以连全所需的边，可以通过<strong>坐标系的旋转</strong>,这样只需要一个函数就搞定了。</p>
<p>现在我们把问题放在<span class="math inline">\(x\)</span>正半轴与直线<span class="math inline">\(y=x\)</span>之间的区域，在这个区域内可以选择的点<span class="math inline">\(j\)</span>满足<span class="math inline">\(a_j-b_j &gt; a_i-b_i\)</span>,只存在添加的后缀最大值？<strong>树状数组</strong>，把<span class="math inline">\(x\)</span>坐标从大到小排个序，对<span class="math inline">\(a-b\)</span>做一个<string>离散化</string>，上树状数组就搞定了（树状数组要反着写，就是把修改和查询的枚举顺序倒一下就好了） # 代码 <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10005</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">2000000000</span>;</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span></div><div class="line">	<span class="keyword">int</span> x,y,v;</div><div class="line">	E(<span class="keyword">int</span> x=<span class="number">0</span>,<span class="keyword">int</span> y=<span class="number">0</span>,<span class="keyword">int</span> v=<span class="number">0</span>)</div><div class="line">		:x(x),y(y),v(v)&#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> bit[N],pos[N],id[N],vec[N];</div><div class="line"><span class="keyword">int</span> x[N],y[N],tot,cnt,n,k,f[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpi</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> x[a]==x[b]?y[a]&lt;y[b]:x[a]&lt;x[b]; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpe</span><span class="params">(E a,E b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> a.v&lt;b.v; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">abs</span>(x[a]-x[b])+<span class="built_in">abs</span>(y[a]-y[b]); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> dis)</span></span>&#123;</div><div class="line">	e[++tot]=E(x,y,dis); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val,<span class="keyword">int</span> pur)</span></span>&#123;</div><div class="line">	<span class="keyword">for</span> (;x;x-=x&amp;-x)</div><div class="line">		<span class="keyword">if</span> (val&lt;bit[x]) </div><div class="line">			bit[x]=val,pos[x]=pur; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">int</span> tmp=<span class="number">-1</span>,mn=inf;</div><div class="line">	<span class="keyword">for</span> (;x&lt;=cnt;x+=x&amp;-x) </div><div class="line">		<span class="keyword">if</span> (bit[x]&lt;mn)</div><div class="line">			mn=bit[x],tmp=pos[x]; </div><div class="line">	<span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> lower_bound(vec+<span class="number">1</span>,vec+<span class="number">1</span>+cnt,x)-vec;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span> (f[x]!=x) f[x]=find(f[x]); </div><div class="line">	<span class="keyword">return</span> f[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Mmst</span><span class="params">()</span></span>&#123;</div><div class="line">	tot=<span class="number">0</span>; </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> dir=<span class="number">0</span>;dir&lt;<span class="number">4</span>;dir++)&#123;</div><div class="line">		<span class="keyword">if</span> (dir==<span class="number">1</span>||dir==<span class="number">3</span>)</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </div><div class="line">				swap(x[i],y[i]); </div><div class="line">		<span class="keyword">else</span></div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">				x[i]=-x[i]; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </div><div class="line">			id[i]=i; </div><div class="line">		sort(id+<span class="number">1</span>,id+<span class="number">1</span>+n,cmpi);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) </div><div class="line">			vec[i]=y[i]-x[i]; </div><div class="line">		sort(vec+<span class="number">1</span>,vec+<span class="number">1</span>+n); </div><div class="line">		cnt=unique(vec+<span class="number">1</span>,vec+<span class="number">1</span>+n)-vec; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) </div><div class="line">			bit[i]=inf,pos[i]=<span class="number">-1</span>;</div><div class="line">		<span class="keyword">int</span> u,v;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=n;i;i--)&#123;</div><div class="line">			u=hash(y[id[i]]-x[id[i]]); </div><div class="line">			v=query(u);</div><div class="line">			<span class="keyword">if</span> (v!=<span class="number">-1</span>)</div><div class="line">				add(id[i],v,dis(id[i],v)); </div><div class="line">			update(u,x[id[i]]+y[id[i]],id[i]); </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line">		</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k)!=EOF)&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">			<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]); </div><div class="line">		Mmst(); </div><div class="line">		sort(e+<span class="number">1</span>,e+<span class="number">1</span>+tot,cmpe);</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) f[i]=i; </div><div class="line">		k=n-k; </div><div class="line">		<span class="keyword">int</span> a,b,x,y;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)&#123;</div><div class="line">			a=e[i].x,b=e[i].y; </div><div class="line">			<span class="keyword">if</span> ((x=find(a))!=(y=find(b)))&#123;</div><div class="line">				--k;</div><div class="line">				f[x]=y; </div><div class="line">				<span class="keyword">if</span> (!k)&#123;</div><div class="line">					<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,e[i].v); </div><div class="line">					<span class="keyword">break</span>; </div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 曼哈顿距离最小生成树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【uoj 228】基础数据结构练习题]]></title>
      <url>/uoj228/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一个并不是很基础的数据结构题</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
<ol start="228" style="list-style-type: decimal">
<li>基础数据结构练习题
</li></ol></h2>
时间限制：<span class="math inline">\(1s\)</span> 空间限制：<span class="math inline">\(256MB\)</span>
</center>
<h2 id="题目描述">题目描述</h2>
sylvia 是一个热爱学习的女孩子，今天她想要学习数据结构技巧。 在看了一些博客学了一些姿势后，她想要找一些数据结构题来练练手。于是她的好朋友九条可怜酱给她出了一道题。 <!--more--> 给出一个长度为<span class="math inline">\(n\)</span>的数列<span class="math inline">\(A\)</span>，接下来有<span class="math inline">\(m\)</span>次操作，操作有三种： 对于所有的<span class="math inline">\(i∈[l,r]\)</span>，将<span class="math inline">\(A_i\)</span>变成<span class="math inline">\(A_i+x\)</span>。 对于所有的<span class="math inline">\(i∈[l,r]\)</span>，将<span class="math inline">\(A_i\)</span>变成<span class="math inline">\(\lfloor \sqrt {A~i~} \rfloor\)</span>。 对于所有的<span class="math inline">\(i∈[l,r]\)</span>，询问<span class="math inline">\(A_i\)</span>的和。 作为一个不怎么熟练的初学者，sylvia想了好久都没做出来。而可怜酱又外出旅游去了，一时间联系不上。于是她决定向你寻求帮助：你能帮她解决这个问题吗。 ## 输入格式 第一行两个数：<span class="math inline">\(n,m\)</span>。 接下来一行<span class="math inline">\(n\)</span>个数<span class="math inline">\(A_i\)</span>。 接下来<span class="math inline">\(m\)</span>行中，第<span class="math inline">\(i\)</span>行第一个数<span class="math inline">\(t_i\)</span> 表示操作类型： 若<span class="math inline">\(t_i=1\)</span>，则接下来三个整数<span class="math inline">\(l_i,r_i,x_i\)</span>，表示操作一。 若<span class="math inline">\(t_i=2\)</span>，则接下来三个整数<span class="math inline">\(l_i,r_i\)</span>，表示操作二。 若<span class="math inline">\(t_i=3\)</span>，则接下来三个整数<span class="math inline">\(l_i,r_i\)</span>,表示操作三。 ## 输出格式 对于每个询问操作，输出一行表示答案。 ## 数据规模 对于所有数据，保证有 <span class="math inline">\(1&lt;=n,m&lt;=100000,1≤l_i≤r_i≤n,1≤A_i,x_i≤10^5\)</span>

<h1 id="解题报告">解题报告</h1>
<p><span class="math inline">\(ISA\)</span>大爷瞬间秒掉了，我却纠结了好久.</p>
<p>因为存在操作一：<span class="math inline">\(A_i+x\)</span>,所以不能像某道只带开方的题目那般暴力了；</p>
<p>但是可以发现，每次添加操作<span class="math inline">\([l,r]\)</span>,不会改变<span class="math inline">\(A[i]-A[i-1] \ (l&lt;i \leqslant r)\)</span> 只会改变 <span class="math inline">\(A[l]-A[l-1]\)</span> 和<span class="math inline">\(A[r+1]-A[r]\)</span>,而如果<span class="math inline">\(A[i]=A[i+1]\)</span>（或者<span class="math inline">\(|A[i]-A[i+1]|=1 \And \space |\sqrt {A[i]} - \sqrt {A[i+1]}|=1\)</span> ),那么修改可以转变为区间减（因为开方后差不变）；</p>
<p>每次开方，线段树上深搜到满足条件, 区间加就直接做咯；</p>
<p>貌似这个讨论差值的想法很经典；</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100001</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</div><div class="line"><span class="keyword">int</span> n,m,a[N];</div><div class="line">ll sm[N&lt;&lt;<span class="number">2</span>],mx[N&lt;&lt;<span class="number">2</span>],mn[N&lt;&lt;<span class="number">2</span>],mark[N&lt;&lt;<span class="number">2</span>];</div><div class="line"><span class="keyword">char</span> *cp=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10000000</span>); </div><div class="line"><span class="keyword">char</span> *os=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">1000000</span>),*ot=os; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (;*cp&lt;<span class="string">'0'</span>||*cp&gt;<span class="string">'9'</span>;cp++); </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;*cp&gt;=<span class="string">'0'</span>&amp;&amp;*cp&lt;=<span class="string">'9'</span>;cp++) </div><div class="line">		x=x*<span class="number">10</span>+*cp<span class="number">-48</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(ll x)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (x) out(x/<span class="number">10</span>) ,*ot++=x%<span class="number">10</span>+<span class="string">'0'</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(ll x)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (x) out(x); <span class="keyword">else</span> *ot++=<span class="string">'0'</span>; *ot++=<span class="string">'\n'</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	sm[x]=sm[x&lt;&lt;<span class="number">1</span>]+sm[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]; </div><div class="line">	mx[x]=max(mx[x&lt;&lt;<span class="number">1</span>],mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]); </div><div class="line">	mn[x]=min(mn[x&lt;&lt;<span class="number">1</span>],mn[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]); </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (mark[x]) &#123;</div><div class="line">		sm[x&lt;&lt;<span class="number">1</span>]+=mark[x]*(ll)(mid-l+<span class="number">1</span>);</div><div class="line">		sm[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=mark[x]*(ll)(r-mid); </div><div class="line">		mx[x&lt;&lt;<span class="number">1</span>]+=mark[x],mx[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=mark[x]; </div><div class="line">		mn[x&lt;&lt;<span class="number">1</span>]+=mark[x],mn[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=mark[x]; </div><div class="line">		mark[x&lt;&lt;<span class="number">1</span>]+=mark[x],mark[x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=mark[x];</div><div class="line">		mark[x]=<span class="number">0</span>; </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">	mark[x]=<span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span> (l==r) </div><div class="line">		sm[x]=mx[x]=mn[x]=a[l];</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">		build(x&lt;&lt;<span class="number">1</span>,l,mid),build(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</div><div class="line">		up(x); </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123; </div><div class="line">		sm[x]+=(ll) v*(r-l+<span class="number">1</span>),mx[x]+=v,mn[x]+=v; </div><div class="line">		mark[x]+=v;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; down(x,l,r); </div><div class="line">		<span class="keyword">if</span> (L&lt;=mid) add(x&lt;&lt;<span class="number">1</span>,l,mid,L,R,v); </div><div class="line">		<span class="keyword">if</span> (R&gt;mid) add(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R,v); </div><div class="line">		up(x); </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) </div><div class="line">		<span class="keyword">return</span> sm[x]; </div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		down(x,l,r);<span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;ll tmp=<span class="number">0</span>; </div><div class="line">		<span class="keyword">if</span> (L&lt;=mid) tmp+=query(x&lt;&lt;<span class="number">1</span>,l,mid,L,R);</div><div class="line">		<span class="keyword">if</span> (R&gt;mid) tmp+=query(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R); </div><div class="line">		<span class="keyword">return</span> tmp; </div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">gen</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (l^r) down(x,l,r); <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">	<span class="keyword">if</span> (L&lt;=l&amp;&amp;r&lt;=R) &#123;</div><div class="line">		<span class="keyword">if</span> ((mx[x]-mn[x]==<span class="number">1</span>&amp;&amp;(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(mx[x])!=(<span class="keyword">int</span>)<span class="built_in">sqrt</span>(mn[x]))||(mx[x]==mn[x]))&#123;</div><div class="line">			ll tmp=(ll)<span class="built_in">sqrt</span>(mx[x])-mx[x]; </div><div class="line">			sm[x]+=tmp*(ll)(r-l+<span class="number">1</span>),mx[x]+=tmp,mn[x]+=tmp,mark[x]+=tmp; </div><div class="line">			<span class="keyword">return</span>; </div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span> (l^r) gen(x&lt;&lt;<span class="number">1</span>,l,mid,L,R),gen(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R); </div><div class="line">		up(x); <span class="keyword">return</span> ; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (L&lt;=mid) gen(x&lt;&lt;<span class="number">1</span>,l,mid,L,R); </div><div class="line">	<span class="keyword">if</span> (R&gt;mid) gen(x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L,R); </div><div class="line">	up(x); </div><div class="line">&#125;</div><div class="line">		</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	freopen(<span class="string">"uoj228.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>); </div><div class="line">	freopen(<span class="string">"uoj228.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>); </div><div class="line">	fread(cp,<span class="number">1</span>,<span class="number">10000000</span>,<span class="built_in">stdin</span>); </div><div class="line">	in(n),in(m); <span class="keyword">int</span> i; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;++i) in(a[i]);</div><div class="line">	build(<span class="number">1</span>,<span class="number">1</span>,n); <span class="keyword">int</span> x,y,type,z; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=m;++i) &#123;</div><div class="line">		in(type),in(x),in(y);</div><div class="line">		<span class="keyword">switch</span> (type) &#123;</div><div class="line">			<span class="keyword">case</span> <span class="number">1</span>: in(z),add(<span class="number">1</span>,<span class="number">1</span>,n,x,y,z);<span class="keyword">break</span>; </div><div class="line">			<span class="keyword">case</span> <span class="number">2</span>: gen(<span class="number">1</span>,<span class="number">1</span>,n,x,y); <span class="keyword">break</span>; </div><div class="line">			<span class="keyword">case</span> <span class="number">3</span>: print(query(<span class="number">1</span>,<span class="number">1</span>,n,x,y)); </div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	fwrite(os,<span class="number">1</span>,ot-os,<span class="built_in">stdout</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 数据结构 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[【bzoj 4543】[Poi2014]Hotel]]></title>
      <url>/bzoj4543/</url>
      <content type="html"><![CDATA[<blockquote>
<p>一道精妙的树链剖分优化DP的题目</p>
</blockquote>
<a id="more"></a>
<h1 id="题目">题目</h1>
<center>
<h2>
bzoj3522&amp;4543: [Poi2014]Hotel
</h2>
Time Limit: 20 Sec Memory Limit: 128 MB Submit: 524 Solved: 305
</center>
<h2 id="description">Description</h2>
<p>有一个树形结构的宾馆，<span class="math inline">\(n\)</span>个房间，<span class="math inline">\(n-1\)</span>条无向边，每条边的长度相同，任意两个房间可以相互到达。吉丽要给他的三个妹子各开（一个）房（间）。三个妹子住的房间要互不相同（否则要打起来了），为了让吉丽满意，你需要让三个房间两两距离相同。 有多少种方案能让吉丽满意？ <!--more--> ## Input 第一行一个数<span class="math inline">\(n\)</span>。 接下来<span class="math inline">\(n-1\)</span>行，每行两个数<span class="math inline">\(x,y\)</span>，表示<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>之间有一条边相连。 ## Output 让吉丽满意的方案数。 ## 数据范围 <span class="math inline">\(n&lt;=5000\)</span>(for T3522), <span class="math inline">\(n&lt;=100000\)</span>(for T4543) # 解题报告 1. <span class="math inline">\(O(n^2)\)</span>的做法； 三个房间<strong>两两距离相同</strong>-&gt;存在一个点到三点距离相同，且三点到该店的路径上没有公共点； 其实实现起来很简单，就是枚举<strong>中间节点</strong>，然后分别<strong>dfs</strong>与它相连的子树（<strong>无根形态</strong>），使用三个数组：<code>s1[i]</code> <code>s2[i]</code> <code>f[i]</code>，分别表示当前子树枚举前深度为<span class="math inline">\(i\)</span>的节点个数，当前子树枚举前深度为<span class="math inline">\(i\)</span>可以贡献答案的点对数，和当前枚举子树中深度为<span class="math inline">\(i\)</span>的节点个数； 然后可以通过<code>s2[i]=s1[i]*f[i],ans+=s2[i]*f[i],s1[i]+=f[i]</code> 进行转移和统计答案； 2. 上面的状态设计应该是不能再优化了，因为相邻节点之间的转移都是<span class="math inline">\(O(n)\)</span>的，所以考虑使用<strong>另一种状态</strong>： <span class="math inline">\(f[i][j]\)</span>表示<span class="math inline">\(i\)</span>节点的子树中，距离<span class="math inline">\(i\)</span>距离为<span class="math inline">\(j\)</span>的节点数，<span class="math inline">\(g[i][j]\)</span>表示在<span class="math inline">\(i\)</span>的子树中，需要和到达<span class="math inline">\(i\)</span>距离为<span class="math inline">\(j\)</span>的节点构成答案的点对数； 得到转移： <span class="math display">\[f[x][0]=1;\]</span> <span class="math display">\[ans+=f[x][0];\]</span> <span class="math display">\[f[x][j]=f[y][j-1]\]</span> <span class="math display">\[g[x][j]=g[y][j+1]\]</span> <span class="math display">\[g[x][j]=f[x][j] * f[y][j-1]\]</span> 如果记每个点下方的深度为<span class="math inline">\(de[i]\)</span>,对于每一个当前点<span class="math inline">\(i\)</span>,总的时间代价是<span class="math inline">\(\Sigma de[y] (father(y)=x)\)</span> 很开心的一点是对于<span class="math inline">\(x\)</span>枚举的第一个儿子<span class="math inline">\(y\)</span>,<code>f[x][j]=f[y][j-1],g[x][j]=g[y][j+1]</code>可以直接通过指针的移动完成，时间复杂度是<span class="math inline">\(O(1)\)</span>的，同时得到的启发式空间也可以共用，如果每次都首先完成当前点下方延伸最深的儿子（也就是<strong>深度重儿子</strong>),那么时间复杂度就可以进化成<span class="math inline">\(\Sigma de[y]-de[x]+1 (father(y)=x)\)</span>发现展开并化简，最后只剩下一层叶节点，时间复杂度是<span class="math inline">\(O(n)\)</span>; 这样做，一条重链共用的也是一段连续的空间，空间复杂度<span class="math inline">\(O(n)\)</span>(可以理解为重链长度*常数）；</p>
<hr>
<p><strong>通过轻重链实现启发式的转移得到极大优化的树形dp;</strong> <figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;  </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100001</span>; </div><div class="line"><span class="keyword">char</span> *cp=(<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="number">10000000</span>); </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></div><div class="line">	<span class="keyword">int</span> next,to;</div><div class="line">	edge(<span class="keyword">int</span> next=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>) </div><div class="line">		:next(next),to(to) &#123;&#125;</div><div class="line">&#125;	e[N&lt;&lt;<span class="number">1</span>];</div><div class="line"><span class="keyword">int</span> n,son[N],dep[N],head[N],tot;</div><div class="line"><span class="keyword">long</span> <span class="keyword">long</span>  *nxt,*f[N],*g[N],mem[N&lt;&lt;<span class="number">3</span>],ans; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">for</span> (;*cp&lt;<span class="string">'0'</span>||*cp&gt;<span class="string">'9'</span>;cp++); </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;*cp&gt;=<span class="string">'0'</span>&amp;&amp;*cp&lt;=<span class="string">'9'</span>;cp++) </div><div class="line">		x=x*<span class="number">10</span>+*cp<span class="number">-48</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">	e[++tot]=edge(head[x],y),head[x]=tot; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">	son[x]=x,dep[x]=dep[fa]+<span class="number">1</span>; <span class="keyword">int</span> i,y;</div><div class="line">	<span class="keyword">for</span> (i=head[x];i;i=e[i].next) &#123;</div><div class="line">		y=e[i].to; <span class="keyword">if</span> (y==fa) <span class="keyword">continue</span>; </div><div class="line">		dfs(y,x); <span class="keyword">if</span> (dep[son[y]]&gt;dep[son[x]]) </div><div class="line">		son[x]=son[y]; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> (i=head[x];i;i=e[i].next) &#123;</div><div class="line">		y=e[i].to; </div><div class="line">		<span class="keyword">if</span> (y!=fa&amp;&amp;(son[y]!=son[x]||x==<span class="number">1</span>)) &#123;</div><div class="line">			y=son[y],nxt+=dep[y]-dep[x]+<span class="number">2</span>,f[y]=nxt; </div><div class="line">			++nxt,++nxt,g[y]=nxt,nxt+=(dep[y]-dep[x]+<span class="number">2</span>)&lt;&lt;<span class="number">1</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> i,y,j;</div><div class="line">	<span class="keyword">for</span> (i=head[x];i;i=e[i].next) &#123;</div><div class="line">		y=e[i].to; <span class="keyword">if</span> (y==fa) <span class="keyword">continue</span>; </div><div class="line">		dp(y,x); <span class="keyword">if</span> (son[y]==son[x])</div><div class="line">			f[x]=f[y]<span class="number">-1</span>,g[x]=g[y]+<span class="number">1</span>; </div><div class="line">	&#125;	f[x][<span class="number">0</span>]=<span class="number">1</span>,ans+=g[x][<span class="number">0</span>];</div><div class="line">	<span class="keyword">for</span> (i=head[x];i;i=e[i].next) &#123;</div><div class="line">		y=e[i].to; <span class="keyword">if</span> (y==fa) <span class="keyword">continue</span>; </div><div class="line">		<span class="keyword">if</span> (son[y]==son[x]) <span class="keyword">continue</span>; </div><div class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=dep[son[y]]-dep[x];j++) &#123;  </div><div class="line">			ans+=f[x][j<span class="number">-1</span>]*g[y][j]+g[x][j+<span class="number">1</span>]*f[y][j];  </div><div class="line">        &#125;  </div><div class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=dep[son[y]]-dep[x];j++) &#123;  </div><div class="line">            g[x][j<span class="number">-1</span>]+=g[y][j];  </div><div class="line">            g[x][j+<span class="number">1</span>]+=f[x][j+<span class="number">1</span>]*f[y][j];  </div><div class="line">            f[x][j+<span class="number">1</span>]+=f[y][j];  </div><div class="line">        &#125; </div><div class="line">	&#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	freopen(<span class="string">"bzoj4543.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>); </div><div class="line">	freopen(<span class="string">"bzoj4543.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</div><div class="line">	fread(cp,<span class="number">1</span>,<span class="number">10000000</span>,<span class="built_in">stdin</span>); </div><div class="line">	in(n); <span class="keyword">int</span> i,j,x,y; </div><div class="line">	<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;n;++i) </div><div class="line">		in(x),in(y),add(x,y),add(y,x);</div><div class="line">	nxt=mem,nxt++,nxt++; </div><div class="line">	dfs(<span class="number">1</span>,<span class="number">0</span>),dp(<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 动态规划 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 树链剖分 </tag>
            
            <tag> 启发式合并 </tag>
            
            <tag> DP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h1 id="hello-the-world">Hello the world</h1>
<h2 id="test">TEST</h2>
<p>this is a formula(inline) <span class="math inline">\(\sum_{j=0}^i a_j*f_{i-j}*C_i^j\)</span></p>
<p>this is another formula(block)</p>
<p><span class="math display">\[\sum_{j=0}^i a_j*f_{i-j}*C_i^j\]</span></p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> a, b;</div><div class="line">	<span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b; </div><div class="line">	<span class="built_in">cout</span>&lt;&lt; a+b&lt;&lt;<span class="built_in">endl</span>; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 奇怪向 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 奇怪向 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
