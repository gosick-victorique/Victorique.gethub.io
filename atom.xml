<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>shallwe|code</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shallwe.ga/"/>
  <updated>2017-06-10T23:48:14.000Z</updated>
  <id>http://shallwe.ga/</id>
  
  <author>
    <name>shallwe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【bzoj 3434】[Wc2014]时空穿梭</title>
    <link href="http://shallwe.ga/bzoj3434/"/>
    <id>http://shallwe.ga/bzoj3434/</id>
    <published>2017-06-11T02:13:57.000Z</published>
    <updated>2017-06-10T23:48:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>听说是冬令营少见的可做的题目？好像比较下我参加过的冬令营， 确实是一个良心的题目啊。</p>
<p>作为一个看上去就像是化式子题的题目， 这个题还是有一点新意的。</p>
<p>就是没有把难点放在怎么“筛”的问题上。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目链接"><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3434" target="_blank" rel="external">题目链接</a></h1>
<h1 id="题目大意">题目大意</h1>
<p>一个<span class="math inline">\(n\)</span>维平面选取一条直线上的<span class="math inline">\(c\)</span>个整点， 第<span class="math inline">\(i\)</span>维坐标<span class="math inline">\(\leqslant m_i\)</span>, 的方案数。</p>
<h1 id="解题报告">解题报告</h1>
<p>因为两点确定一条直线， 加上整点的限定， 所以可以先枚举选取的点构成的<strong>线段</strong>的每一维坐标的长度<span class="math inline">\(l_i\)</span>.</p>
<p>在确定每一维坐标的长度的前提下， 可以得到每一维坐标的最小值的范围<span class="math inline">\(m_i-l_i\)</span>.</p>
<p>在多维空间中的一条线段上的整点个数为<span class="math inline">\(\text{gcd}(l_1,l_2,l_3,...,l_n) - 1\)</span>.</p>
<p>不妨设<span class="math inline">\(m_1 \leqslant \text{min} \lbrace m_2,m_3,...,m_n \rbrace\)</span></p>
<p>然后就可以列出式子： <span class="math display">\[
\begin{aligned}
\text{ans} &amp; = \sum_{l_1=1}^{m_1} \sum_{l_2=1}^{m_2} ... \sum_{l_n=1}^{m_n} \prod_{i=1}^{n} (m_i - l_i) {\text{gcd}(l_1,l_2,...,l_n)-1 \choose c-2}\\
&amp;= \sum_{d=1}^{m_1} {d-1 \choose c-2} \sum_{l_1 d \leqslant m_1} ... \sum_{l_nd \leqslant m_n} \prod_{i=1}^{n}(m_i-l_id) [\text{gcd}(l_1,l_2,...,l_n) = 1] \\
&amp;= \sum_{d=1}^{m_1} {d-1 \choose c-2}  \sum_{dk \leqslant m_1}  \mu(k) \sum_{l_1 kd \leqslant m_1} ... \sum_{l_nkd \leqslant m_n} \prod_{i=1}^{n}(m_i-l_ikd) \\
&amp;= \sum_{k=1}^{m_1} \sum_{l_1k \leqslant m_1} ... \sum_{l_n k \leqslant m_n} \prod_{i=1}^{n}(m_i-l_ik) \sum_{d|k} \mu(\frac{k}{d}){d-1 \choose c-2}
\end{aligned}
\]</span> 这个式子可以重写下： <span class="math display">\[
\text{ans} = \sum_{k=1}^{m_1}  g(k) f(k)
\]</span> 其中， <span class="math inline">\(f(k) = \sum_{d|k} \mu(\frac{k}{d}){d-1 \choose c-2}\)</span> 这个可以使用<span class="math inline">\(n \ln n\)</span>的筛法直接预处理得到。</p>
<p>但是<span class="math inline">\(g(k) = \sum_{l_1k \leqslant m_1} ... \sum_{l_n k \leqslant m_n} \prod_{i=1}^{n}(m_i-l_ik)\)</span> 如果暴力算， 复杂度爆炸。</p>
<p>继续化简 <span class="math display">\[
\begin{aligned}
g(k) &amp; = \prod_{i=1}^{n} \sum_{l_i \leqslant \lfloor \frac{m_i}{k} \rfloor} (m_i-l_ik) \\ 
&amp; = \prod_{i=1}^{n} (m_i * \lfloor \frac{m_i}{k} \rfloor - k*\frac{\lfloor \frac{m_i}{k} \rfloor * (\lfloor \frac{m_i}{k} \rfloor+1) }{2}) \\
&amp; = \sum_{i=0}^{n} g_i * k^i
\end{aligned}
\]</span> 然后， <span class="math display">\[
\begin{aligned}
\text{ans} &amp; = \sum_{k=1}^{m_1} \sum_{i=0}^{n} g_i * k^i f(k) \\
&amp;= \sum_{i=0}^{n} g_i \sum_{k=1}^{m_1} k^if(k)
\end{aligned}
\]</span></p>
<p>这样复杂度是<span class="math inline">\(O(Tn^3\sqrt{m}+ cm \ln m)\)</span>的</p>
<p>有的时候题目难在std过于<strong>暴力</strong>让人不敢相信。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">12</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> C=<span class="number">21</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">100010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> T=<span class="number">1010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">10007</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> f[N][C][M], g[C][M]; </div><div class="line"><span class="keyword">int</span> pm[M], pn, mu[M]; </div><div class="line"><span class="keyword">bool</span> no[M]; </div><div class="line"><span class="keyword">int</span> _n[T],cc[T],mm[T][N],test; </div><div class="line"><span class="keyword">int</span> n,c,m,mi[N],as; </div><div class="line"><span class="keyword">int</span> k[N],bio[M][C]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>?<span class="number">-1</span>:f); </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>; c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmx</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&gt;x?a:x); &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmn</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&lt;x?a:x); &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; x+=y; <span class="keyword">if</span> (x&gt;=p) x-=p; <span class="keyword">if</span>(x&lt;<span class="number">0</span>) x+=p; <span class="keyword">return</span> x; &#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inital</span><span class="params">()</span> </span>&#123; </div><div class="line">	no[<span class="number">1</span>]=<span class="number">1</span>, mu[<span class="number">1</span>]=<span class="number">1</span>; </div><div class="line">	rep(i,<span class="number">2</span>,m) &#123; </div><div class="line">		<span class="keyword">if</span> (!no[i]) pm[++pn]=i, mu[i]=<span class="number">-1</span>; </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=pn&amp;&amp;pm[j]*i&lt;=m; ++j) &#123; </div><div class="line">			no[pm[j]*i]=<span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span> (i%pm[j]==<span class="number">0</span>) <span class="keyword">break</span>; </div><div class="line">			<span class="keyword">else</span> mu[pm[j]*i]=-mu[i]; </div><div class="line">		&#125; </div><div class="line">	&#125; </div><div class="line">	bio[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>; </div><div class="line">	rep(i,<span class="number">1</span>,m) &#123; bio[i][<span class="number">0</span>]=<span class="number">1</span>; rep(j,<span class="number">1</span>,<span class="number">19</span>) </div><div class="line">		bio[i][j]=mo(bio[i<span class="number">-1</span>][j],bio[i<span class="number">-1</span>][j<span class="number">-1</span>]);</div><div class="line">	&#125; </div><div class="line">	</div><div class="line">	rep(c,<span class="number">2</span>,<span class="number">20</span>) rep(i,<span class="number">1</span>,m) <span class="keyword">if</span> (mu[i]) </div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j=i,k=<span class="number">1</span>; j&lt;=m; j+=i,++k) </div><div class="line">			g[c][j]=mo(g[c][j],bio[k<span class="number">-1</span>][c<span class="number">-2</span>]*mu[i]); </div><div class="line">	rep(i,<span class="number">1</span>,m) rep(c,<span class="number">2</span>,<span class="number">20</span>) &#123; </div><div class="line">		<span class="keyword">int</span> t=<span class="number">1</span>; rep(n,<span class="number">0</span>,<span class="number">11</span>) &#123; </div><div class="line">			f[n][c][i]=mo(f[n][c][i<span class="number">-1</span>],t*g[c][i]%p); </div><div class="line">			t=t*i%p; </div><div class="line">		&#125; </div><div class="line">	&#125;	</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">muls</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="built_in">memset</span>(k,<span class="number">0</span>,<span class="keyword">sizeof</span>(k)); k[<span class="number">0</span>]=<span class="number">1</span>;</div><div class="line">	<span class="keyword">int</span> a, b, B; </div><div class="line">	rep(i,<span class="number">1</span>,n) &#123; </div><div class="line">		B=mi[i]/x; </div><div class="line">		a=(ll)B*mi[i]%p, b=mo(p,-(ll)B*(B+<span class="number">1</span>)/<span class="number">2</span>%p); </div><div class="line">		vep(j,n,<span class="number">1</span>) k[j]=mo(k[j]*a%p,k[j<span class="number">-1</span>]*b%p); </div><div class="line">		k[<span class="number">0</span>]=k[<span class="number">0</span>]*a%p; </div><div class="line">	&#125; </div><div class="line">&#125; </div><div class="line">		</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(test); m=<span class="number">0</span>; </div><div class="line">	rep(i,<span class="number">1</span>,test) &#123; </div><div class="line">		in(_n[i]),in(cc[i]); </div><div class="line">		rep(j,<span class="number">1</span>,_n[i]) in(mm[i][j]),cmx(m,mm[i][j]); </div><div class="line"> 	&#125;</div><div class="line"> 	inital(); </div><div class="line"> 	rep(ts, <span class="number">1</span>, test) &#123; </div><div class="line"> 		n=_n[ts], c=cc[ts]; </div><div class="line"> 		m=M, as=<span class="number">0</span>; </div><div class="line"> 		rep(i,<span class="number">1</span>,n) mi[i]=mm[ts][i], cmn(m, mi[i]); </div><div class="line"> 		<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>, j; i&lt;=m; i=j+<span class="number">1</span>) &#123; </div><div class="line"> 			j=M; rep(kk,<span class="number">1</span>,n) cmn(j,mi[kk]/(mi[kk]/i)); </div><div class="line"> 			muls(i); </div><div class="line"> 			rep(kk,<span class="number">0</span>,n) as=mo(as,k[kk]*(f[kk][c][j]-f[kk][c][i<span class="number">-1</span>])%p); </div><div class="line"> 		&#125;</div><div class="line"> 		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, as); </div><div class="line"> 	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;听说是冬令营少见的可做的题目？好像比较下我参加过的冬令营， 确实是一个良心的题目啊。&lt;/p&gt;
&lt;p&gt;作为一个看上去就像是化式子题的题目， 这个题还是有一点新意的。&lt;/p&gt;
&lt;p&gt;就是没有把难点放在怎么“筛”的问题上。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数学题" scheme="http://shallwe.ga/categories/%E6%95%B0%E5%AD%A6%E9%A2%98/"/>
    
    
      <category term="反演" scheme="http://shallwe.ga/tags/%E5%8F%8D%E6%BC%94/"/>
    
      <category term="数论" scheme="http://shallwe.ga/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>【PKUSC 2017】签下卖身契</title>
    <link href="http://shallwe.ga/pkusc2017/"/>
    <id>http://shallwe.ga/pkusc2017/</id>
    <published>2017-05-28T16:00:01.000Z</published>
    <updated>2017-05-25T12:56:23.021Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>SDOI 2017 R2 滚出队的我， THU已经是不给机会了。</p>
<p>但是PKU还是挺有人情味的，没让我这个9年OI直接退役。</p>
<p>就跟着<span class="math inline">\(A队*2+B队*1\)</span> 大爷们去PKU签卖身契了。</p>
<p>可以有学上？</p>
</blockquote>
<a id="more"></a>
<h3 id="day-0">Day 0</h3>
<p>整个人还沉浸在R2爆炸的悲怆中， 感觉已经在心里用各种奇怪的姿势骂了出题人，也没啥新姿势了， 就先把这悲惨的一页翻过去了。。</p>
<p>没回家就从JN做高铁到帝都去了， 一路上真是平稳极了， 所以就全程2K的颓样。</p>
<p>然后下了高铁就转一个subway， 大体剧情就是我和yveh、lzr在前面走着， 上了车发现后面的人都不见了？</p>
<p>据说他们没挤上了？我们也没挤，　就被熙熙攘攘的人流带上了地铁。</p>
<p>反正就在中关村站等了他们一波，　话说高铁３分钟一波是真快。</p>
<p>然后就开始往宾馆走，　本来我和yveh在前面带路， 但是走了一些安全通道之类的奇怪路线， 回头发现lx丢掉了。。 老师把自己弄丢了怎么搞， 在线等， 挺急的。。</p>
<p>然后打电话， lx说去starbucks集合， 但是我们一行人在starbucks等了一波， 两边都说到了， 但没有互相看见。。 据说大城市方圆100米能有好几个starbucks?</p>
<p>然后就各自往宾馆方向走了。 路上买了杯西瓜汁。。第二杯半价感觉划算极了（我就交了第二杯的钱。。）。</p>
<p>在宾馆放下东西就赶着Lx去PKU报道， 先到西南门， 门卫：“我不知道你们这个活动”， 然后是西门？ “我不知道你们这个活动”， 然后是北门， 终于能进了。</p>
<p>已经热成狗了。</p>
<p>而且饥渴难耐。</p>
<p>难受。</p>
<p>报道还排了一个巨长的队， 他们一群人在旁边坐着， 就atp 和 我、yveh排着， 过了一会全过来插了队。。</p>
<blockquote>
<p>这里是PKU, 你们因为插队被捕了。</p>
</blockquote>
<p>然后去吉野家吃了个饭（中间lx带着我们迷路的故事省掉吧， 太惨了）。</p>
<p>lzr, charge， 你们怎么和我要一样的啊？ 什么？ 你就看到了牛肉饭？？？</p>
<p>晚上看前两年的数学题， 挺简单（？！）。。</p>
<h3 id="day-1">　Day 1</h3>
<p>9:00考数学。</p>
<p>第一题暴力展开多项式+系数对比一波？</p>
<p>第二题咦这个式子怎么因式分解啊？</p>
<p>第三题咦这个三次根式怎么有理化啊？</p>
<p>第四题咦这个<span class="math inline">\(300*\log _{10} ^{5}\)</span> 是多少啊？</p>
<p>第五题？ 又一个多项式不会因式分解？</p>
<p>第六题这个排列组合基础啊， md终于有我会的了！ 先把ABC同构除掉， 找一下回文再去掉正反同构， 巨简单送波分啊。</p>
<p>第七题证明<span class="math inline">\(\sin 10\)</span>是个无理数？ 这个不是课本例题么！ 但是怎么做来着， 我把它化成<span class="math inline">\(\sin 30\)</span>看一波？ 咦， 好像是<span class="math inline">\(8x^3+6x+1=0\)</span>的根？ 我偷个懒就说他没有有理数根就好了？（然后我强行写成了无实数根， excuse me ?)</p>
<p>实际上再反证一波<span class="math inline">\(\frac{p}{q}\)</span>这类的很容易的， 但我太智障了啊。</p>
<p>第八题我直接举了一个例子。。</p>
<p>第九题我直接看底面， 然后三角函数推了一波？</p>
<p>第十题花了个反例？ （结果忘抄到答题纸上了）。</p>
<p>怎么今年数学题这么狗啊？</p>
<hr>
<p>然后参观一波实验室， 得到一波结论： 没有理论基础谈个毛实践。</p>
<p>下午去机试， 去晚了(exm &gt;_&lt;) 。</p>
<p>进去的时候已经要开考了， 先配置gvim， 咦， 我的这个编译命令怎么无效了？ 不可能啊， 我一只这么写啊。</p>
<p>这岂不是完蛋？那么就只能用那个什么devc++4.9? 这是个什么玩意。。</p>
<p>散了做题吧， 汉语题太智障了。。直接A掉了（梦回巅峰！）</p>
<p>然后这个A题是个字符串模拟题， gets()读入一波， 然后拆了一下单词和多余字符， 然后循环一波，然后提交， 然后wa？</p>
<p>什么鬼， 我干瞪眼查错一波， 咦， 好像如果句子开头是标点我就挂了， 改， A.</p>
<p>然后看standing. BeiYu好像抢了F的2A? 这个很兹瓷啊，我也冲一波。</p>
<p>就是个树形DP？A了没啥好说了（梦回巅峰！）。</p>
<p>然后读了一波D题， 感觉可以最小割搞搞？ 但是题目意思是可以多个联通块还是一个联通块啊？ 我英死早，GG了半个小时就结束了。</p>
<hr>
<p>晚上继续考。。</p>
<p>汉语题这个整数划分这么僵硬直接交 ？ WA？　没关文件？　罚时＋＋。</p>
<p>看Ａ，这好像又是一个模拟啊， 咦我怎么WA了， 哦，无解条件好像是所有都不满足才无解， 我好想有一个不满足就退出了。</p>
<p>看B, 这不是一个数据结构裸题么， 我强行维护最大最小， 左最大最小， 右最大最小， 再特判一波不能全取， 就A了。</p>
<p>看E, 这个是个博弈啊， 我区间博弈一波， T了， 复杂度好像是<span class="math inline">\(O(n^4)\)</span>, 卡不过去弃了。</p>
<p>出来听说E题XYM直接卡过去了？</p>
<p>怪不得人家是A队， 就是常数优越啊。。</p>
<p>晚上2K一波+复习计算几何（为什么考试前一定要复习计算几何啊？）</p>
<h3 id="day-2">Day 2</h3>
<p>Day 1 好长， 终于到Day 2 了。</p>
<p>今天上午是个五个小时的场， 有点没数怎么办。</p>
<p>还是先看了汉语题， 煞笔背包， A.</p>
<p>咦， 怎么这么多人先做T1啊， 我也没记住是什么题， 反正就直接A了。</p>
<p>看HXY大爷A了E, 计算几何？ 半平面交？ 直接板子一波。</p>
<p>怎么过不了样例 ？我画一波样例？　这个怎么是逆时针啊，题目不是说什么<del>counter</del>clockwise, 什么counter是相反的意思？ 我英死早。</p>
<p>交， A.</p>
<p>然后看D， 这是一个超级稀疏图的哈密顿回路， 我直接跑一波试试， T了， 先弃掉吧。</p>
<p>这个B题是个煞笔模拟呀， A 了。</p>
<p>这个F题好玄学呀， 我写个暴力？ T了， 啊， 这么多人A， 应该暴力可以过啊， 我好难过啊， 我再减减枝， 咦， A了！ 这个ACM赛制感觉真是不一样啊。</p>
<p>还有半个消失了， 可以D缩一下链再暴力一波， 但是C过的人好多， 我看眼C吧。</p>
<p>这好像是个题目巨长的开车主题模拟题？ 好吧读完提还有10分钟， D锁链写惨了炸飞了。。</p>
<hr>
<p>然后只有11题？排名15-30, 那我必须好好面试， 客客气气的， 老老实实的才行啊。</p>
<p>面试官A ：</p>
<p>A: 咱们不谈智商相关的，来点情商题？</p>
<p>S: 好啊， 好啊。</p>
<p>A: 你是家长带着来的还是自己来的。</p>
<p>S: 老师带着来的（还把自己弄丢了）。</p>
<p>A: 特朗普当选对中国是利大于弊还是弊大于利。</p>
<p>S:（我天天看知乎， 你问我这个？妙！） …特朗普是个精明的商人…希拉里是个老辣的政客…既是机遇又是挑战… 双方加深合作…把中美关系…</p>
<p>A: 你怎么评价明朝是中国历史上最后一个汉人执政的朝代？</p>
<p>S:（我学理前天天历史第一我不怕！） … 生于忧患， 死于安乐… 压迫导致抗争… 环境造就性格… 努力通向成功…</p>
<p>（超级熟练）</p>
<p>A: 两个词评论一波自己？</p>
<p>S: 我啥都会， 我巨屌， 我是一个“全面”的人（exm?)</p>
<p>S: 我敢于挑战权威， 我充满批判精神。</p>
<p>A: 你有光明的未来! (???)</p>
<hr>
<p>面试官B（超凶）：</p>
<p>B: 东营？ 这是什么地方？</p>
<p>S: 胜利油田黄河入海口云云。</p>
<p>B: 大学毕业后有什么想法？</p>
<p>S: 我想出国深造， 因为…(被打断)</p>
<p>B: 你为什么会想“出国”深造？</p>
<p>S: 学习先进技术balabala… 国内也会先进balabala…（内心充满波动）</p>
<p>B: 你了解Google公司么？</p>
<p>S: (突然兴奋)我天天用他的搜索引擎！</p>
<p>B: (突然打断)你怎么能用他的搜索引擎！</p>
<p>S:(貌似干了一下违法违规的事情)我…</p>
<p>B: (超凶)你是不是翻墙了！</p>
<p>S:昂昂昂。。。(满脸对不起党对不起人民)</p>
<p>B: 对比评价一下百度和谷歌公司</p>
<p>S: 百度恶性竞争， 谋财害命…</p>
<p>B: （直接打断），你能不能从产品角度分析？</p>
<p>S: 百度全是广告。。。谷歌超好。</p>
<p>B: 你有什么优点么？</p>
<p>S: 我优点超多， （准备开吹）</p>
<p>B: （突然打断）看来没什么张口而出的优点， 那有什么缺点？</p>
<p>S:（exm?)…</p>
<p>被凶了一脸看来没学上了。。</p>
<hr>
<p>面试官C:</p>
<p>C: 简单介绍一下自己。</p>
<p>S: 我十年OI一场空。</p>
<p>C: 你学过这么多年OI! 你一定会好多编程语言吧！</p>
<p>S: 。 不会。</p>
<p>C: 平常读什么书。</p>
<p>S: 《哈利波特怒怼伏地魔》</p>
<p>C: … 时间到了，你走吧。</p>
<p>没学上了++。</p>
<hr>
<p>晚上随便吃点然后2K2K2K2K……</p>
<h3 id="day-3">Day 3</h3>
<p>终于day 3了， 前面过得好慢啊。</p>
<p>淋了一路的雨+ 鞋子完全湿透 + 穿着短裤犯彪 ——&gt; 浑身难受。</p>
<p>在礼堂没有座位了，就一屁股坐在地上。。 然后听讲提+看晚会回放。</p>
<p>什么井冈山打虎好好笑！</p>
<p>然后发协议， 无条件60， 前100一本？ 比想到的好得多？</p>
<p>好像是数学和面试加了不少分， 总成绩17、18？ 然后因为没有D类歧视，所以就有约了？</p>
<p>有学上了， 心情好了点， 但是还要花钱才能有学上， 心情又很难受。</p>
<p>为什么SD省队这么容不下我， SDOI 我RNMB .</p>
<p>然后就会家了， 一个月没在家里待几天，吃了顿pizza, 感觉挺不错。</p>
<p>要为决赛奋斗一波了！为D类选手正名！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;SDOI 2017 R2 滚出队的我， THU已经是不给机会了。&lt;/p&gt;
&lt;p&gt;但是PKU还是挺有人情味的，没让我这个9年OI直接退役。&lt;/p&gt;
&lt;p&gt;就跟着&lt;span class=&quot;math inline&quot;&gt;\(A队*2+B队*1\)&lt;/span&gt; 大爷们去PKU签卖身契了。&lt;/p&gt;
&lt;p&gt;可以有学上？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="奇怪向" scheme="http://shallwe.ga/categories/%E5%A5%87%E6%80%AA%E5%90%91/"/>
    
    
      <category term="奇怪向" scheme="http://shallwe.ga/tags/%E5%A5%87%E6%80%AA%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>【SDOI 2017】Round2离队滚粗记</title>
    <link href="http://shallwe.ga/sdoi2017r2/"/>
    <id>http://shallwe.ga/sdoi2017r2/</id>
    <published>2017-05-28T16:00:00.000Z</published>
    <updated>2017-05-25T03:05:13.204Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>两天省选真是让我体会到了人生无常(呵呵呵~~)。</p>
<p>有的时候说什么“谋事在人，成事在天”， 也是很有道理的， 有些事情真的是把握不住的。</p>
<p>该死的二轮省选对我的小心脏造成了1ww点的打击哈。。</p>
</blockquote>
<a id="more"></a>
<h3 id="day--1">Day -1</h3>
<p>从帝都昏昏碌碌地滚回了DY。</p>
<p>作为一个CTSC、APIO炸成狗的选手，在SLYZ的某体育组(?)接受了一波帝国主义的面试培训。</p>
<del>
(为我进不了面试做了一波铺垫?)
</del>
<p>培训上就是各种婊XYM大爷？ 挺XYM大爷怒婊高考真是带劲！</p>
<blockquote>
<p>我感觉你们现在的这些初高中老师不行的， 看我来做个榜样让你们学习一下什么叫做素质教育！ ——XYM</p>
</blockquote>
<p>真是带劲， 估计只有这样霸气侧漏的选手才可以进入省队吧。</p>
<p>回家发现妈妈狼吞虎咽了给我买的晚饭（pizza！）， 据说是自己减肥没吃晚饭结果忍不住了？？？</p>
<h3 id="day-0">Day 0</h3>
<p>12:00在学校食堂门口出发的， 再次成为一群文化课大佬围观的动物园集装箱。</p>
<p>路上打了波WY， 反正就是各种掉分， 各种掉段， 各种掉线。。。</p>
<p>到了济南时间还很早，（好像是走高速的功劳）， 拉着马胖去吃了一波米线（？！） 没错就是在四大火炉-济南，吃了一碗巨烫巨烫的鸡汤米线， 流汗.jpg。</p>
<p>然后李老师又灌了一波鸡汤， 大体是“你们都有光明的未来”之类的。</p>
<p>强行洗波澡疯狂复习唐老师数学题和什么3D计算几何大模板？</p>
<p>听说你是出题人， 你放屁我都信！</p>
<h3 id="day-1">Day 1</h3>
<p>上午8:00准时开考， 题目读了一遍， 没什么会做的， 就先写了三个暴力(5+30+10?)。</p>
<p>发现第三题链的情况似乎比较easy。。 必然是什么分块|线段树云云的， 先放下一会写。</p>
<p>咦， 第一题这个部分分是不是留给我这个大常数垃圾精度FFT选手的啊？ 一会写一波！</p>
<p>咦这个第二题我怎么没什么想法啊， 应该也有可得的部分分吧， 我想想啊！（时间一分一秒地过去， 大概想了2:00？）, 艹， 我怎么走神了， 看来这个题应该弃疗啊！</p>
<p>还有一个小时了啊， 才45分怎么办。 看第三题好像链上部分常数超小？复杂度算出来<span class="math inline">\(10^9\)</span>但全是异或操作可以跑跑看？ 如果能跑过那线段树就只多10分啦， 那我才不想写呢。。（我也不知道哪里出现这么傲娇的想法啊！）</p>
<p>那我就码个T1部分分！ 一波倍增+FFT20分钟写完调完还有15分钟， 测速测精度T1 貌似有60了， 但是T3 貌似常数没那么优越？ 完蛋20分部分分没了。</p>
<p>最后60+30+10=100？ day1rk 9-12? 总排名<span class="math inline">\(10 \rightarrow 9\)</span>, 好吧还是卡着线。</p>
<p>ISA day1rk2 瞬间翻到rk4 ？不愧是双金选手就是吊啊！</p>
<p>下午睡睡 + 2K一波波 + 继续复习数学题+3D计算几何 ？</p>
<p>还看了一波BIG BANG。 难道这就是死亡FLAG ？？</p>
<h3 id="day-2">Day 2</h3>
<p>咦这个T1我会25啊， 我spfa强行一波！咦， 应该用入边记录状态呀， 如果<span class="math inline">\(k\)</span>很小那好多入边的状态不就一样了？ 那我用点和字符串的标号hash一波状态? 能快一点？（简直在扯淡！！）。</p>
<p>咦这个T2好坑啊， 这个方案明明是唯一的样子为什么要字典序最小啊， 我不会证啊， 写个对拍看看？ 好像没反例？ <span class="math inline">\(n^2\)</span>一波！（得到自己唯一的50分）。这怎么还有20分是五边形数啊， 前两天刚写的我怎么想不起来了呢。。完了蛋了。。</p>
<p>这个T3是不是奇怪的后缀家族题啊？ 我YY一波（1.5h passed), 不会啊， hash来个暴力吧， 自然溢出会不会被卡啊？ 好害怕啊， 我再加个mod来个双hash ? (有病！！)</p>
<p>好像25+50+30 ? 应该比较稳？</p>
<p>吃饭的时候莫名其妙的心情不好。。</p>
<p>看榜0+50+0 = 50 ? rk 25?</p>
<p>听说你本来就卡spfa 我又用hash加了一个常数？</p>
<p>听说你标算是自然溢出的单hash所以只要取模全部T ?</p>
<p>听说。。。 总rk 跌到15 没进面试？</p>
<p>大体上就是无比的生气， 真是气死气死了。</p>
<p>我的rk曲线是11 -&gt; 10 -&gt; 9 -&gt; 15 .　最后这场day2可以说毁了我的OI生涯。</p>
<p>算了一下自己是学了9年OI, 虽然7年都是文化课选手， 但是日久情深， 你用暴力还卡常的做法恶心我， 我真是很难过。真的是难过极了， 难过到自己已经接近退役都没察觉了。。</p>
<p>申请了一波cd, 老师说基本没问题， 但感觉d类歧视也挺难受的， c类又巨贵好气。</p>
<p>好好出题卡什么常数啊， 我就老老实实地打个暴力你卡什么啊。</p>
<p>生气， 难受！</p>
<p>9年OI一场空， D2卡常见祖宗！</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;两天省选真是让我体会到了人生无常(呵呵呵~~)。&lt;/p&gt;
&lt;p&gt;有的时候说什么“谋事在人，成事在天”， 也是很有道理的， 有些事情真的是把握不住的。&lt;/p&gt;
&lt;p&gt;该死的二轮省选对我的小心脏造成了1ww点的打击哈。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="奇怪向" scheme="http://shallwe.ga/categories/%E5%A5%87%E6%80%AA%E5%90%91/"/>
    
    
      <category term="奇怪向" scheme="http://shallwe.ga/tags/%E5%A5%87%E6%80%AA%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 3307】雨天的尾巴</title>
    <link href="http://shallwe.ga/bzoj3307/"/>
    <id>http://shallwe.ga/bzoj3307/</id>
    <published>2017-05-27T08:05:10.000Z</published>
    <updated>2017-05-27T08:12:55.896Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>ATP大爷在做题， 我偷偷地瞥了一眼。</p>
<p>发现自己只会<span class="math inline">\(O(n \log^2 n)\)</span>的愚蠢做法。</p>
<p>问ATP大爷行不行， ATP大爷表示已经有<span class="math inline">\(O(\log n)\)</span>做法， 我的做法太垃圾了。。。</p>
<p>但是我卡了一波常数。就rk3了。。</p>
</blockquote>
<a id="more"></a>
<h1 id="题目大意">题目大意</h1>
<p><span class="math inline">\(n\)</span>个点，形成一个树状结构。有<span class="math inline">\(m\)</span>次发放，每次选择两个点<span class="math inline">\((x,y)\)</span>。</p>
<p>对于<span class="math inline">\(x\)</span>到<span class="math inline">\(y\)</span>的路径上每个点发一袋<span class="math inline">\(z\)</span>类型的物品。完成所有发放后，每个点存放最多的是哪种物品。</p>
<h1 id="解题报告">解题报告</h1>
<p>把每次发放， 用树链剖分转成<span class="math inline">\(\log n\)</span>次序列上的操作， 然后利用扫描线扫描一波。</p>
<p>用线段树维护每个物品在扫描线的当前位置出现次数最多的位置。</p>
<p>因为是单点修改， 全局查询， 所以用一个非递归的线段树就可以了。</p>
<p>而且查询是<span class="math inline">\(O(1)\)</span>的。</p>
<p>复杂度是<span class="math inline">\(O(n \log^2 n + n)\)</span></p>
<p>这个。 跑得不慢。内存比较优秀(<span class="math inline">\(O(n)\)</span>)， 代码长度比较可爱。</p>
<p>但是网上好像都是线段树合并啊。。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(x) (int)(x.size())</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100100</span>;</div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; ii;</div><div class="line"> </div><div class="line"><span class="keyword">int</span> v[N], a[N], mx[N&lt;&lt;<span class="number">2</span>];</div><div class="line"><span class="keyword">int</span> vc[N], vn;</div><div class="line"><span class="keyword">int</span> hd[N], nx[N&lt;&lt;<span class="number">1</span>], ri[N&lt;&lt;<span class="number">1</span>], al;</div><div class="line"><span class="keyword">int</span> fa[N], de[N], sn[N], sz[N];</div><div class="line"><span class="keyword">int</span> bl[N], dn[N], bd[N], ss;</div><div class="line"><span class="built_in">vector</span>&lt;ii&gt; ad[N];</div><div class="line"><span class="keyword">int</span> n, m, _;</div><div class="line"> </div><div class="line"><span class="keyword">char</span> *cp=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">32747</span>), *os=cp, *ot=cp;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> getc() (os==ot&amp;&amp;(ot=(os=cp)+fread(cp,1,32747,stdin),os==ot)?0:*os++)</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> c=getc(); <span class="keyword">int</span> f=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (;c &lt;<span class="string">'0'</span> ||c &gt;<span class="string">'9'</span>; c=getc()) f=(c==<span class="string">'-'</span>?<span class="number">-1</span>:f);</div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>; c &gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>; c=getc()) x=x*<span class="number">10</span>+c<span class="number">-48</span>;</div><div class="line">    x *= f;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> add(x, y) nx[++al]=hd[x],ri[al]=y,hd[x]=al</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> up(o) mx[o]=(a[mx[o<span class="meta-string">&lt;&lt;1|1]]&gt;a[mx[o&lt;&lt;1]]?mx[o&lt;&lt;1|1]:mx[o&lt;&lt;1])</span></span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> y = <span class="number">0</span>;</div><div class="line">    de[x] = de[fa[x]] + <span class="number">1</span>;</div><div class="line">    sz[x] = <span class="number">1</span>, sn[x] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=hd[x];i;i=nx[i])</div><div class="line">        <span class="keyword">if</span> (y=ri[i], y!=fa[x]) &#123;</div><div class="line">            fa[y] = x, dfs(y);</div><div class="line">            sz[x] = sz[x] + sz[y];</div><div class="line">            <span class="keyword">if</span> (sz[y] &gt; sz[sn[x]])</div><div class="line">                sn[x] = y;</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> tp)</span> </span>&#123;</div><div class="line">    bl[x] = tp, dn[x] = ++ss, bd[ss] = x;</div><div class="line">    <span class="keyword">if</span> (sn[x]) &#123;</div><div class="line">        dfs(sn[x], tp);</div><div class="line">        <span class="keyword">int</span> y;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=hd[x];i;i=nx[i])</div><div class="line">            <span class="keyword">if</span> (y=ri[i], y!=fa[x] &amp;&amp; y!=sn[x])</div><div class="line">                dfs(y, y);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> fx = bl[x], fy = bl[y];</div><div class="line">    <span class="keyword">int</span> v = vn<span class="number">-1</span>;</div><div class="line">    <span class="keyword">while</span> (fx != fy) &#123;</div><div class="line">        <span class="keyword">if</span> (de[fx] &lt; de[fy]) </div><div class="line">            swap(fx, fy), swap(x, y);</div><div class="line">        ad[dn[fx]].pb(mp(v,<span class="number">1</span>));</div><div class="line">        ad[dn[x]+<span class="number">1</span>].pb(mp(v,<span class="number">-1</span>));</div><div class="line">        x = fa[fx], fx = bl[x];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (de[x] &gt; de[y]) swap(x,y);</div><div class="line">    ad[dn[x]].pb(mp(v,<span class="number">1</span>));</div><div class="line">    ad[dn[y]+<span class="number">1</span>].pb(mp(v,<span class="number">-1</span>));</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (x) print(x/<span class="number">10</span>), <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="number">48</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!x) <span class="built_in">puts</span>(<span class="string">"0"</span>);</div><div class="line">    <span class="keyword">else</span> print(x), <span class="built_in">puts</span>(<span class="string">""</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    in(n), in(m);</div><div class="line">    <span class="keyword">int</span> x, y, z;</div><div class="line">    xep(i, n<span class="number">-1</span>) &#123;</div><div class="line">        in(x), in(y);</div><div class="line">        add(x,y), add(y,x);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    dfs(<span class="number">1</span>), dfs(<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">    xep(i, m) &#123;</div><div class="line">        in(x), in(y), in(z);</div><div class="line">        v[vn++] = z;</div><div class="line">        vc[vn<span class="number">-1</span>] = z;</div><div class="line">        ins(x, y);</div><div class="line">    &#125;</div><div class="line">    sort(vc, vc+vn);</div><div class="line">    vn = unique(vc,vc+vn)-vc;</div><div class="line">    xep(i, m) v[i] = lower_bound(vc, vc+vn, v[i])-vc;   </div><div class="line"> </div><div class="line">    <span class="keyword">for</span> (_ = <span class="number">1</span>; _&lt;vn; _=_&lt;&lt;<span class="number">1</span>);</div><div class="line">    rep(i, _, _*<span class="number">2</span><span class="number">-1</span>) mx[i] = i-_;</div><div class="line">    vep(i, _<span class="number">-1</span>, <span class="number">1</span>) up(i);</div><div class="line"> </div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> as[N];</div><div class="line"> </div><div class="line">    rep(i, <span class="number">1</span>, n) &#123;</div><div class="line">        xep(j, sz(ad[i])) &#123;</div><div class="line">            x = ad[i][j].fi, z = ad[i][j].se;</div><div class="line">            x = v[x], a[x] = a[x] + z;</div><div class="line">            y = _+x;</div><div class="line">            <span class="keyword">for</span> (y&gt;&gt;=<span class="number">1</span>; y; y&gt;&gt;=<span class="number">1</span>) up(y);</div><div class="line">        &#125;</div><div class="line">        as[bd[i]] = (a[mx[<span class="number">1</span>]]?vc[mx[<span class="number">1</span>]]:<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    rep(i, <span class="number">1</span>, n) out(as[i]); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ATP大爷在做题， 我偷偷地瞥了一眼。&lt;/p&gt;
&lt;p&gt;发现自己只会&lt;span class=&quot;math inline&quot;&gt;\(O(n \log^2 n)\)&lt;/span&gt;的愚蠢做法。&lt;/p&gt;
&lt;p&gt;问ATP大爷行不行， ATP大爷表示已经有&lt;span class=&quot;math inline&quot;&gt;\(O(\log n)\)&lt;/span&gt;做法， 我的做法太垃圾了。。。&lt;/p&gt;
&lt;p&gt;但是我卡了一波常数。就rk3了。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://shallwe.ga/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="线段树" scheme="http://shallwe.ga/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="树链剖分" scheme="http://shallwe.ga/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4451】[Cerc2015]Frightful Formula</title>
    <link href="http://shallwe.ga/bzoj4451/"/>
    <id>http://shallwe.ga/bzoj4451/</id>
    <published>2017-05-27T07:51:19.000Z</published>
    <updated>2017-05-27T08:02:47.914Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>我非常智障的化了一部式子然后直接FFT.</p>
<p>但是因为模数是1000003, 这个模数有点大， 用double的精度显然不是很靠谱。</p>
<p>所以有需要使用什么任意模数FFT.</p>
<p>然后我折腾半天好不容易A了， 发现这个题可以递推做。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4451" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p><span class="math inline">\(f[i,j]=a*f[i,j-1]+b*f[i-1,j]+c\)</span></p>
<p>给出<span class="math inline">\(f[1,i]\)</span> 和<span class="math inline">\(f[i,1]\)</span> , 求<span class="math inline">\(f[n,n] (\mod 1000003)\)</span></p>
<h1 id="解题报告">解题报告</h1>
<p>贡献分3部分：</p>
<ol style="list-style-type: decimal">
<li><p><span class="math inline">\((i, 1)\)</span> 的贡献为<span class="math inline">\(f[i,1]C(2n-i-2,n-i)a^{n-1}b^{n-i}\)</span> ;</p></li>
<li><p><span class="math inline">\((1,i)\)</span>的贡献为<span class="math inline">\(f[1,i]C(2n-i-2,n-i)*a^{n-i}b^{n-1}\)</span>;</p></li>
<li><p><span class="math inline">\((i, j)\)</span>的<span class="math inline">\(c\)</span>的贡献为</p></li>
</ol>
<p>​</p>
<p><span class="math display">\[
\begin{eqnarray*} &amp;&amp;c\sum_{i=2}^n\sum_{j=2}^nC(2n-i-j,n-i)a^{n-j}b^{n-i}\\ &amp;=&amp;c\sum_{i=2}^n\sum_{j=2}^n(2n-i-j)!\times\frac{a^{n-j}}{(n-j)!}\times\frac{b^{n-i}}{(n-i)!} \end{eqnarray*}
\]</span></p>
<p>然后直接FFT？ 把系数写成<span class="math inline">\(aM+b\)</span>的形式，然后做好几次<span class="math inline">\(FFT\)</span>合并起来就不会炸精度了。</p>
<p><a href="http://blog.csdn.net/geotcbrl/article/details/53022967" target="_blank" rel="external">递推做法在这里</a></p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i)</span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ff; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200100</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">1000003</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">1000</span>; </div><div class="line"><span class="keyword">const</span> ff pi=<span class="built_in">acos</span>(<span class="number">-1</span>); </div><div class="line"><span class="keyword">int</span> n,_n,a,b,c,fc[N+N],rv[N+N],h[N],l[N],as,ma[N],mb[N],rr[N*<span class="number">4</span>]; </div><div class="line"><span class="keyword">int</span> A[N*<span class="number">3</span>],B[N*<span class="number">3</span>],C[N*<span class="number">3</span>],a0[N*<span class="number">3</span>],b0[N*<span class="number">3</span>],a1[N*<span class="number">3</span>],b1[N*<span class="number">3</span>];  </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (;c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>?<span class="number">-1</span>:f); </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>;c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>;</div><div class="line">    x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">fast</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k,<span class="keyword">int</span> md=p)</span> </span>&#123; </div><div class="line">    <span class="keyword">int</span> as=<span class="number">1</span>; <span class="keyword">for</span> (; k; k&gt;&gt;=<span class="number">1</span>, x=(ll)x*x%md)</div><div class="line">        <span class="keyword">if</span> (k&amp;<span class="number">1</span>) as=(ll) as*x%md; <span class="keyword">return</span> as; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; x+=y; <span class="keyword">if</span>(x&gt;=p) x-=p; <span class="keyword">if</span> (x&lt;<span class="number">0</span>) x+=p; <span class="keyword">return</span> x;&#125; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmx</span> &#123;</span> </div><div class="line">    ff r, i; cmx(ff r=<span class="number">0</span>, ff i=<span class="number">0</span>) </div><div class="line">        : r(r), i(i) &#123;&#125;</div><div class="line">    cmx <span class="keyword">operator</span> + (<span class="keyword">const</span> cmx &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> cmx(r+b.r, i+b.i); &#125; </div><div class="line">    cmx <span class="keyword">operator</span> - (<span class="keyword">const</span> cmx &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> cmx(r-b.r, i-b.i); &#125; </div><div class="line">    cmx <span class="keyword">operator</span> * (<span class="keyword">const</span> cmx &amp;b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> cmx(r*b.r-i*b.i,r*b.i+i*b.r); &#125; </div><div class="line">&#125; aa[N*<span class="number">3</span>],bb[N*<span class="number">3</span>]; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(cmx *a, <span class="keyword">int</span> f)</span> </span>&#123; </div><div class="line">    xep(i,_n) <span class="keyword">if</span> (rr[i]&gt;i) swap(a[i],a[rr[i]]); </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> m=<span class="number">1</span>; m&lt;_n; m&lt;&lt;=<span class="number">1</span>) &#123; </div><div class="line">        cmx wn=cmx(<span class="built_in">cos</span>(pi/m), f*<span class="built_in">sin</span>(pi/m)); </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;_n; i+=m&lt;&lt;<span class="number">1</span>) &#123; </div><div class="line">            cmx w=cmx(<span class="number">1</span>,<span class="number">0</span>); </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; ++j) &#123; </div><div class="line">                cmx x=a[i+j], y=w*a[i+j+m]; </div><div class="line">                a[i+j]=x+y, a[i+j+m]=x-y; </div><div class="line">                w=w*wn; </div><div class="line">            &#125; </div><div class="line">        &#125; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">if</span> (f==<span class="number">-1</span>) xep(i,_n) a[i].r/=_n; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b,<span class="keyword">int</span> *c)</span> </span>&#123;</div><div class="line">    <span class="built_in">memset</span>(aa,<span class="number">0</span>,<span class="keyword">sizeof</span>(aa)); <span class="built_in">memset</span>(bb, <span class="number">0</span>, <span class="keyword">sizeof</span>(bb)); </div><div class="line">    xep(i,_n) aa[i]=cmx(a[i],<span class="number">0</span>), bb[i]=cmx(b[i],<span class="number">0</span>); </div><div class="line">    fft(aa,<span class="number">1</span>), fft(bb,<span class="number">1</span>); xep(i,_n) aa[i]=aa[i]*bb[i]; </div><div class="line">    fft(aa,<span class="number">-1</span>); xep(i,_n) c[i]=(ll)(aa[i].r+<span class="number">0.5</span>)%p; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FFT_casual</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b,<span class="keyword">int</span> *c)</span> </span>&#123; </div><div class="line">    xep(i,_n) a0[i]=a[i]/M, b0[i]=b[i]/M; <span class="keyword">int</span> i; </div><div class="line">    <span class="keyword">for</span> (mul(a0,b0,a0), i=<span class="number">0</span>; i&lt;_n; ++i) &#123; </div><div class="line">        c[i]=<span class="number">1l</span>l*a0[i]*M%p*M%p; </div><div class="line">        a1[i]=a[i]%M, b1[i]=b[i]%M; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">for</span> (mul(a1,b1,a1), i=<span class="number">0</span>; i&lt;_n; ++i) &#123; </div><div class="line">        c[i]=(a1[i]+c[i])%p, a0[i]=(a0[i]+a1[i])%p; </div><div class="line">        a1[i]=a[i]/M+a[i]%M, b1[i]=b[i]/M+b[i]%M; </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">for</span> (mul(a1,b1,a1), i=<span class="number">0</span>; i&lt;_n;++i) </div><div class="line">        c[i]=(<span class="number">1l</span>l*M*(a1[i]-a0[i]+p)%p+c[i])%p; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;  </div><div class="line">    in(n),in(a),in(b),in(c); </div><div class="line">    rep(i,<span class="number">1</span>,n) in(l[i]); rep(i,<span class="number">1</span>,n) in(h[i]); </div><div class="line">    fc[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,n+n) fc[i]=(ll)fc[i<span class="number">-1</span>]*i%p; </div><div class="line">    rv[n+n]=fast(fc[n+n],p<span class="number">-2</span>); vep(i,n+n<span class="number">-1</span>,<span class="number">0</span>) rv[i]=(ll)rv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%p; </div><div class="line">    ma[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,n) ma[i]=(ll)ma[i<span class="number">-1</span>]*a%p; </div><div class="line">    mb[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,n) mb[i]=(ll)mb[i<span class="number">-1</span>]*b%p; </div><div class="line">    rep(i,<span class="number">2</span>,n) as=mo(as,(ll)h[i]*ma[n-i]%p*mb[n<span class="number">-1</span>]%p*fc[n-i+n<span class="number">-2</span>]%p*rv[n<span class="number">-2</span>]%p*rv[n-i]%p); </div><div class="line">    rep(i,<span class="number">2</span>,n) as=mo(as,(ll)l[i]*ma[n<span class="number">-1</span>]%p*mb[n-i]%p*fc[n-i+n<span class="number">-2</span>]%p*rv[n<span class="number">-2</span>]%p*rv[n-i]%p); </div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="keyword">for</span> (_n=<span class="number">1</span>; _n&lt;=n; _n&lt;&lt;=<span class="number">1</span>) ; _n&lt;&lt;=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; i&lt;_n; ++i) &#123; </div><div class="line">        rr[i]=j; <span class="keyword">for</span> (<span class="keyword">int</span> k=_n&gt;&gt;<span class="number">1</span>; (j^=k)&lt;k;k&gt;&gt;=<span class="number">1</span>); </div><div class="line">    &#125;</div><div class="line">    xep(i,n<span class="number">-1</span>) &#123;</div><div class="line">        A[i]=(ll)ma[i]*rv[i]%p;</div><div class="line">        B[i]=(ll)mb[i]*rv[i]%p; </div><div class="line">    &#125; </div><div class="line">    FFT_casual(A,B,C);</div><div class="line">    xep(i, n+n<span class="number">-3</span>) as=mo(as, (ll)C[i]%p*c%p*fc[i]%p);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, as), <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我非常智障的化了一部式子然后直接FFT.&lt;/p&gt;
&lt;p&gt;但是因为模数是1000003, 这个模数有点大， 用double的精度显然不是很靠谱。&lt;/p&gt;
&lt;p&gt;所以有需要使用什么任意模数FFT.&lt;/p&gt;
&lt;p&gt;然后我折腾半天好不容易A了， 发现这个题可以递推做。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数学题" scheme="http://shallwe.ga/categories/%E6%95%B0%E5%AD%A6%E9%A2%98/"/>
    
    
      <category term="FFT" scheme="http://shallwe.ga/tags/FFT/"/>
    
      <category term="递推" scheme="http://shallwe.ga/tags/%E9%80%92%E6%8E%A8/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4452】[Cerc2015]Export Estimate</title>
    <link href="http://shallwe.ga/bzoj4452/"/>
    <id>http://shallwe.ga/bzoj4452/</id>
    <published>2017-05-27T07:36:29.000Z</published>
    <updated>2017-05-27T07:44:23.836Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一个很不错的题？ 反正我是做得非常蛋疼。</p>
<p>似乎算法和解法都不是很难， 但是性质观察起来有一点困难。</p>
<p>其实最恶心的是， 看出一个性质， 以为是一种特殊情况不敢做。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4452" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>给你一个<span class="math inline">\(n\)</span>个点<span class="math inline">\(m\)</span>条边的无向图，每条边有权值，我们可以选择一个整数lim来生成一个新的图，过程如下：</p>
<ol style="list-style-type: decimal">
<li>先将原图中边权小于lim的边删掉</li>
<li>依次从1到n枚举每个点</li>
<li>如果这个点没有边于它相连，这个点将会被删去</li>
<li>如果这个点只与两条不相同的边x，y相连，设这两条边的另一个点分别为a，b，如果a，b和这个点都不相同（a，b可以相同），则依次做如下操作：
<ol style="list-style-type: decimal">
<li>删去边x，y</li>
<li>删去这个点</li>
<li>在a，b之间建立一条新的边</li>
</ol></li>
</ol>
<h1 id="解题报告">解题报告</h1>
<p>考虑离线， 依次把边权从大到小执行操作。</p>
<p>几个性质：</p>
<ol style="list-style-type: decimal">
<li>被删除的点只会是度数为0， 2的点。</li>
<li>度数为2的点， 如果是一个环内的最后一个点， 那么不会被删除。</li>
<li>删除一个点， 不会改变其他点的度数。</li>
</ol>
<p>然后就需要记录度数为<span class="math inline">\(0\)</span>的点的个数<span class="math inline">\(S_0\)</span>, 度数为<span class="math inline">\(2\)</span>的点的个数<span class="math inline">\(S_2\)</span>, 和环的个数<span class="math inline">\(S_{cycle}\)</span>.</p>
<p>然后就可以得到剩余的点和边的个数。</p>
<h1 id="代码">代码</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt; </div><div class="line">#include &lt;algorithm&gt; </div><div class="line">#include &lt;cstdio&gt; </div><div class="line">#include &lt;cstring&gt; </div><div class="line">#include &lt;cstdlib&gt; </div><div class="line"> </div><div class="line">using namespace std; </div><div class="line"> </div><div class="line">#define rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </div><div class="line">#define vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </div><div class="line">#define xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </div><div class="line"> </div><div class="line">const int N=300100; </div><div class="line"> </div><div class="line">int s0, s2, sc; </div><div class="line">int f[N],du[N],tw[N],sz[N]; </div><div class="line">int n,m,q;</div><div class="line">int a[N],b[N],c[N],k[N]; </div><div class="line">int od[N],oq[N],as1[N],as2[N]; </div><div class="line"> </div><div class="line">inline void in(int &amp;x) &#123; </div><div class="line">    char c=getchar(); int f=1; </div><div class="line">    for (;c&lt;'0'||c&gt;'9';c=getchar()) f=(c=='-'?-1:f); </div><div class="line">    for (x=0; c&gt;='0'&amp;&amp;c&lt;='9';c=getchar()) x=x*10+c-48;</div><div class="line">    x*=f; </div><div class="line">&#125; </div><div class="line">inline bool cmpd(int x, int y) &#123; return c[x]&gt;c[y]; &#125; </div><div class="line">inline bool cmpq(int x, int y) &#123; return k[x]&gt;k[y]; &#125; </div><div class="line"> </div><div class="line">int find(int x) &#123; return (f[x]==x?x:(f[x]=find(f[x]))); &#125; </div><div class="line"> </div><div class="line">inline void come(int id) &#123; </div><div class="line">    int x(a[id]), y(b[id]), v(c[id]); </div><div class="line">    int fx=find(x), fy=find(y); </div><div class="line">    if (tw[fx]==sz[fx]) --sc; </div><div class="line">    if (fy!=fx&amp;&amp;tw[fy]==sz[fy]) --sc; </div><div class="line">    if (du[x]==0) --s0; if (du[y]==0) --s0; </div><div class="line">    if (du[x]==1) ++s2,++tw[fx]; if (du[y]==1) ++s2,++tw[fy]; </div><div class="line">    if (du[x]==2) --s2,--tw[fx]; if (du[y]==2) --s2,--tw[fy]; </div><div class="line">    ++du[x], ++du[y]; </div><div class="line">    if (fx!=fy) f[fx]=fy, sz[fy]+=sz[fx], tw[fy]+=tw[fx]; </div><div class="line">    if (tw[fy]==sz[fy]) ++sc; </div><div class="line">&#125; </div><div class="line">int main() &#123; </div><div class="line">    in(n),in(m);</div><div class="line">    rep(i,1,m) in(a[i]),in(b[i]),in(c[i]),od[i]=i; </div><div class="line">    in(q); rep(i,1,q) in(k[i]),oq[i]=i; </div><div class="line">    sort(od+1,od+1+m, cmpd); </div><div class="line">    sort(oq+1,oq+1+q, cmpq); </div><div class="line">    rep(i,1,n) f[i]=i,du[i]=0,tw[i]=0,sz[i]=1; </div><div class="line">    s0=n, s2=0, sc=0; </div><div class="line">     </div><div class="line">    int i=1, j=1; </div><div class="line">    for (; i&lt;=q; ++i) &#123; </div><div class="line">        while (j&lt;=m&amp;&amp;c[od[j]]&gt;=k[oq[i]]) </div><div class="line">            come(od[j]), ++j; </div><div class="line">        as1[oq[i]]=n-s0-s2+sc; </div><div class="line">        as2[oq[i]]=j-1-s2+sc; </div><div class="line">    &#125; </div><div class="line">    rep(i,1,q) printf("%d %d\n", as1[i],as2[i]);</div><div class="line">    return 0; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个很不错的题？ 反正我是做得非常蛋疼。&lt;/p&gt;
&lt;p&gt;似乎算法和解法都不是很难， 但是性质观察起来有一点困难。&lt;/p&gt;
&lt;p&gt;其实最恶心的是， 看出一个性质， 以为是一种特殊情况不敢做。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://shallwe.ga/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="并查集" scheme="http://shallwe.ga/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4774】修路</title>
    <link href="http://shallwe.ga/bzoj4774/"/>
    <id>http://shallwe.ga/bzoj4774/</id>
    <published>2017-05-27T07:22:49.000Z</published>
    <updated>2017-05-27T07:28:05.929Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个好像就是板子题的样子。</p>
<p>但又没有板子的那么过分， 还有一点子集dp的小trick ?</p>
<p>好吧， 它就是个板子题。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4774" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>联通<span class="math inline">\((i, n-i+1)\)</span>(<span class="math inline">\(1 \leqslant i \leqslant d\)</span>) , 的最小花费。</p>
<h1 id="解题报告">解题报告</h1>
<p>利用斯坦纳树的套路， 令<span class="math inline">\(F[S]\)</span>表示联通状态为<span class="math inline">\(S\)</span>的最小花费。</p>
<p><span class="math inline">\(S\)</span>需要记录的就是<span class="math inline">\(2*d\)</span>个点的联通情况。</p>
<p>然后做一个子集<span class="math inline">\(dp\)</span> ， 因为题目中只是要求<span class="math inline">\((i,n-i+1)\)</span>这样成对的两个点联通。</p>
<p>几对点之间可以不连通。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">10100</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs=<span class="number">310</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> nx,to,v; edge(<span class="keyword">int</span> nx=<span class="number">0</span>,<span class="keyword">int</span> to=<span class="number">0</span>,<span class="keyword">int</span> v=<span class="number">0</span>)</div><div class="line">        :nx(nx),to(to),v(v)&#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"> </div><div class="line"><span class="keyword">int</span> hd[N], tot; </div><div class="line"><span class="keyword">int</span> n, m, d, D;</div><div class="line"><span class="keyword">int</span> f[N][maxs], g[maxs]; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (;c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>?<span class="number">-1</span>:f); </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>; c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>; </div><div class="line">    x*=f;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> v)</span> </span>&#123; </div><div class="line">    e[++tot]=edge(hd[x],y,v); hd[x]=tot; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> S)</span> </span>&#123; </div><div class="line">    rep(i,<span class="number">1</span>,d) <span class="keyword">if</span> (((S&gt;&gt;(i<span class="number">-1</span>))&amp;<span class="number">1</span>)^((S&gt;&gt;(D-i))&amp;<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmn</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&lt;x?a:x); &#125;</div><div class="line"><span class="keyword">bool</span> vs[N]; <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> S)</span> </span>&#123; </div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123; </div><div class="line">        <span class="keyword">int</span> x=q.front(); q.pop(); vs[x]=<span class="number">0</span>; <span class="keyword">int</span> y; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=hd[x];i;i=e[i].nx) </div><div class="line">            <span class="keyword">if</span> (y=e[i].to, f[x][S]+e[i].v&lt;f[y][S]) &#123; </div><div class="line">                f[y][S]=f[x][S]+e[i].v; </div><div class="line">                <span class="keyword">if</span> (!vs[y]) q.push(y), vs[y]=<span class="number">1</span>; </div><div class="line">            &#125; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    in(n),in(m),in(d), D=d+d; <span class="keyword">int</span> u,v,w; </div><div class="line">    xep(i,m) in(u),in(v),in(w), add(u,v,w), add(v,u,w); </div><div class="line">    <span class="built_in">memset</span>(f,<span class="number">127</span>/<span class="number">3</span>, <span class="keyword">sizeof</span>(f)); </div><div class="line">    <span class="built_in">memset</span>(g,<span class="number">127</span>/<span class="number">3</span>, <span class="keyword">sizeof</span>(g)); </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=d; ++i) f[i][<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>]=f[n-i+<span class="number">1</span>][<span class="number">1</span>&lt;&lt;D-i]=<span class="number">0</span>; </div><div class="line">    xep(S, <span class="number">1</span>&lt;&lt;D) &#123; </div><div class="line">        rep(x, <span class="number">1</span>, n) &#123; </div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> sub=S; sub; sub=(sub<span class="number">-1</span>)&amp;S) </div><div class="line">                cmn(f[x][S], f[x][sub]+f[x][S^sub]); </div><div class="line">            <span class="keyword">if</span> (f[x][S]&lt;f[<span class="number">0</span>][<span class="number">0</span>]) q.push(x); </div><div class="line">        &#125; </div><div class="line">        spfa(S); </div><div class="line">    &#125; </div><div class="line">    xep(S, <span class="number">1</span>&lt;&lt;D) <span class="keyword">if</span> (chk(S)) rep(i,<span class="number">1</span>,n) cmn(g[S], f[i][S]); </div><div class="line">    xep(S, <span class="number">1</span>&lt;&lt;D) <span class="keyword">for</span> (<span class="keyword">int</span> sub=S; sub; sub=(sub<span class="number">-1</span>)&amp;S) </div><div class="line">        cmn(g[S], g[sub]+g[S^sub]); </div><div class="line">    <span class="keyword">if</span> (g[(<span class="number">1</span>&lt;&lt;D)<span class="number">-1</span>]&gt;=f[<span class="number">0</span>][<span class="number">0</span>]) <span class="built_in">puts</span>(<span class="string">"-1"</span>); </div><div class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, g[(<span class="number">1</span>&lt;&lt;D)<span class="number">-1</span>]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个好像就是板子题的样子。&lt;/p&gt;
&lt;p&gt;但又没有板子的那么过分， 还有一点子集dp的小trick ?&lt;/p&gt;
&lt;p&gt;好吧， 它就是个板子题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="动态规划" scheme="http://shallwe.ga/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="dp" scheme="http://shallwe.ga/tags/dp/"/>
    
      <category term="斯坦纳树" scheme="http://shallwe.ga/tags/%E6%96%AF%E5%9D%A6%E7%BA%B3%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 2508】简单题</title>
    <link href="http://shallwe.ga/bzoj2508/"/>
    <id>http://shallwe.ga/bzoj2508/</id>
    <published>2017-05-27T07:13:57.000Z</published>
    <updated>2017-05-27T07:22:13.038Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个题是拉格朗日数乘法的裸题。</p>
<p>我做PE的时候了解到的这种方法， 据说是高考几大艹标算大法之一？</p>
<p>看来我这个高考狗就是和这种奇技淫巧有缘分啊。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2508" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>实现以下3种操作：</p>
<ol style="list-style-type: decimal">
<li><p>平面上加入一条直线；</p></li>
<li><p>删除一条已加入的直线；</p></li>
<li><pre><code> 求一个点到平面上所有直线距离平方和最小，你需要输出这个最小值。</code></pre></li>
</ol>
<h1 id="解题报告">解题报告</h1>
<p>一个点<span class="math inline">\((x_0, y_0)\)</span>到直线<span class="math inline">\(Ax+By+C = 0\)</span>的距离平方公式是 <span class="math display">\[
\frac{(Ax_0+By_0+C)^2}{A^2+B^2}
\]</span> 然后就可以把距离平方和表示成<span class="math inline">\(ax^2+by^2+cxy+dx+ey+f\)</span>的鬼畜样子。</p>
<p>然后对<span class="math inline">\(x, y\)</span>分别求一发偏导， 令两个式子都等于零。</p>
<p>就把<span class="math inline">\(x, y\)</span>算出来了。</p>
<p>各种操作复杂度都是<span class="math inline">\(O(1)\)</span>的。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">      </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff;</div><div class="line">      </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span>  N=<span class="number">120010</span>;</div><div class="line">ff a[N],b[N],c[N],A,B,C,D,E,F;</div><div class="line">     </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(ff x)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;<span class="number">1e-6</span>)<span class="built_in">puts</span>(<span class="string">"0.00"</span>);<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,<span class="built_in">fabs</span>(x));</div><div class="line">&#125;</div><div class="line"> </div><div class="line">ff f[<span class="number">3</span>][<span class="number">4</span>],ansx,ansy;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i,j,k;ff t;<span class="keyword">int</span> n=<span class="number">2</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(f[<span class="number">1</span>][<span class="number">1</span>])&lt;<span class="number">1e-6</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(f[<span class="number">1</span>][<span class="number">2</span>])&lt;<span class="number">1e-6</span>)ansx=<span class="number">0</span>,ansy=f[<span class="number">2</span>][<span class="number">3</span>]/f[<span class="number">2</span>][<span class="number">2</span>];</div><div class="line">        <span class="keyword">else</span> ansy=f[<span class="number">1</span>][<span class="number">3</span>]/f[<span class="number">1</span>][<span class="number">2</span>],ansx=(f[<span class="number">2</span>][<span class="number">3</span>]-f[<span class="number">2</span>][<span class="number">2</span>]*ansy)/f[<span class="number">2</span>][<span class="number">1</span>];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(f[<span class="number">2</span>][<span class="number">2</span>])&lt;<span class="number">1e-6</span>) &#123;</div><div class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(f[<span class="number">2</span>][<span class="number">1</span>])&lt;<span class="number">1e-6</span>)ansx=f[<span class="number">1</span>][<span class="number">3</span>]/f[<span class="number">1</span>][<span class="number">1</span>],ansy=<span class="number">0</span>;</div><div class="line">        <span class="keyword">else</span> ansx=f[<span class="number">2</span>][<span class="number">3</span>]/f[<span class="number">2</span>][<span class="number">1</span>],ansy=(f[<span class="number">1</span>][<span class="number">3</span>]-f[<span class="number">1</span>][<span class="number">1</span>]*ansx)/f[<span class="number">1</span>][<span class="number">2</span>];</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    t=-f[<span class="number">2</span>][<span class="number">1</span>]/f[<span class="number">1</span>][<span class="number">1</span>];f[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">0</span>,f[<span class="number">2</span>][<span class="number">2</span>]+=t*f[<span class="number">1</span>][<span class="number">2</span>],f[<span class="number">2</span>][<span class="number">3</span>]+=t*f[<span class="number">1</span>][<span class="number">3</span>];</div><div class="line">    f[<span class="number">2</span>][<span class="number">3</span>]=(<span class="built_in">fabs</span>(f[<span class="number">2</span>][<span class="number">2</span>])&lt;<span class="number">1e-6</span>)?<span class="number">0</span>:f[<span class="number">2</span>][<span class="number">3</span>]/f[<span class="number">2</span>][<span class="number">2</span>],f[<span class="number">1</span>][<span class="number">3</span>]-=f[<span class="number">1</span>][<span class="number">2</span>]*f[<span class="number">2</span>][<span class="number">3</span>],f[<span class="number">1</span>][<span class="number">3</span>]/=f[<span class="number">1</span>][<span class="number">1</span>];</div><div class="line">    ansx=f[<span class="number">1</span>][<span class="number">3</span>],ansy=f[<span class="number">2</span>][<span class="number">3</span>];</div><div class="line">&#125;</div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    ff x0,y0,x1,y1,t; <span class="keyword">int</span> num=<span class="number">0</span>,cnt,now=<span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> q,tp,del; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</div><div class="line">    <span class="keyword">while</span>(q--) &#123;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;tp);</div><div class="line">        <span class="keyword">if</span>(tp==<span class="number">0</span>) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;x0,&amp;y0,&amp;x1,&amp;y1); </div><div class="line">            cnt=++num; ++now;</div><div class="line">            a[cnt]=y0-y1,b[cnt]=x1-x0,c[cnt]=y0*(x0-x1)-x0*(y0-y1);</div><div class="line">            t=a[cnt]*a[cnt]+b[cnt]*b[cnt];</div><div class="line">            A+=a[cnt]*a[cnt]/t,B+=b[cnt]*b[cnt]/t;C+=<span class="number">2</span>*a[cnt]*b[cnt]/t;</div><div class="line">            D+=<span class="number">2</span>*a[cnt]*c[cnt]/t,E+=<span class="number">2</span>*b[cnt]*c[cnt]/t,F+=c[cnt]*c[cnt]/t;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(tp==<span class="number">1</span>) &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;del);</div><div class="line">            cnt=del,t=a[cnt]*a[cnt]+b[cnt]*b[cnt],--now;</div><div class="line">            A-=a[cnt]*a[cnt]/t,B-=b[cnt]*b[cnt]/t,C-=<span class="number">2</span>*a[cnt]*b[cnt]/t;</div><div class="line">            D-=<span class="number">2</span>*a[cnt]*c[cnt]/t,E-=<span class="number">2</span>*b[cnt]*c[cnt]/t,F-=c[cnt]*c[cnt]/t;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">if</span>(now==<span class="number">0</span>) &#123;<span class="built_in">puts</span>(<span class="string">"0.00"</span>);<span class="keyword">continue</span>;&#125;</div><div class="line">            f[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">2</span>*A,f[<span class="number">1</span>][<span class="number">2</span>]=C,f[<span class="number">1</span>][<span class="number">3</span>]=-D,f[<span class="number">2</span>][<span class="number">1</span>]=C,f[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">2</span>*B,f[<span class="number">2</span>][<span class="number">3</span>]=-E;</div><div class="line">            solve();</div><div class="line">            print(A*ansx*ansx+B*ansy*ansy+C*ansx*ansy+D*ansx+E*ansy+F);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个题是拉格朗日数乘法的裸题。&lt;/p&gt;
&lt;p&gt;我做PE的时候了解到的这种方法， 据说是高考几大艹标算大法之一？&lt;/p&gt;
&lt;p&gt;看来我这个高考狗就是和这种奇技淫巧有缘分啊。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数学题" scheme="http://shallwe.ga/categories/%E6%95%B0%E5%AD%A6%E9%A2%98/"/>
    
    
      <category term="拉格朗日数乘法" scheme="http://shallwe.ga/tags/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%95%B0%E4%B9%98%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4433】[Cerc2015]Hovering Hornet</title>
    <link href="http://shallwe.ga/bzoj4433/"/>
    <id>http://shallwe.ga/bzoj4433/</id>
    <published>2017-05-27T07:07:26.000Z</published>
    <updated>2017-05-27T07:14:40.482Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>做了一波ACM比赛中的题， 感觉计算几何真是奇(luan)妙(tao)无(mu)穷(ban).</p>
<p>这个题是？ 挂着期望外衣的计算几何(模板题？)</p>
<p>反正计算几何就是模板在手， 天下我有。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4433" target="_blank" rel="external">传送门</a></p>
<blockquote>
<p>题目大意各位自己去看吧。</p>
</blockquote>
<h1 id="解题报告">解题报告</h1>
<p>乱套一波切割多边形(半平面交？) + 多边形面积的模板， 就过了！</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"> </div><div class="line"><span class="keyword">const</span> ff eps=<span class="number">1e-7</span>; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span> </div><div class="line">    ff x, y; point (ff x=<span class="number">0</span>, ff y=<span class="number">0</span>) :x(x),y(y) &#123;&#125; </div><div class="line">    point <span class="keyword">operator</span> + (<span class="keyword">const</span> point &amp;a) &#123; <span class="keyword">return</span> point(x+a.x, y+a.y);&#125; </div><div class="line">    point <span class="keyword">operator</span> - (<span class="keyword">const</span> point &amp;a) &#123; <span class="keyword">return</span> point(x-a.x, y-a.y);&#125;</div><div class="line">    ff <span class="keyword">operator</span> *(<span class="keyword">const</span> point &amp;a) &#123; <span class="keyword">return</span> x*a.y-y*a.x; &#125; </div><div class="line">    ff <span class="keyword">operator</span> ^(<span class="keyword">const</span> point &amp;a) &#123; <span class="keyword">return</span> x*a.x+y*a.y; &#125; </div><div class="line">    point <span class="keyword">operator</span> *(<span class="keyword">const</span> ff &amp;a) &#123; <span class="keyword">return</span> point(x*a, y*a);&#125; </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123; <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x,&amp;y);&#125; </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">' '</span>&lt;&lt;y; &#125; </div><div class="line">    <span class="function">ff <span class="title">len</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y); &#125; </div><div class="line">&#125; ; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span> &#123;</span> </div><div class="line">    point s, w; line()&#123;&#125;</div><div class="line">    line (point s, point t) :s(s), w(t-s) &#123;&#125;</div><div class="line">&#125; ; </div><div class="line"><span class="function"><span class="keyword">inline</span> ff <span class="title">dists</span><span class="params">(point p, point a, point b)</span> </span>&#123; </div><div class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(b.x-a.x)&lt;eps&amp;&amp;<span class="built_in">abs</span>(b.y-a.y)&lt;eps) <span class="keyword">return</span> (p-a).len(); </div><div class="line">    point v1=b-a, v2=p-a, v3=p-b; </div><div class="line">    <span class="keyword">if</span> ((v1^v2)&lt;eps) <span class="keyword">return</span> v2.len(); </div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((v1^v3)&gt;-eps) <span class="keyword">return</span> v3.len(); </div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">abs</span>(v1*v2)/v1.len(); </div><div class="line">&#125; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span> &#123;</span> </div><div class="line">    point p[<span class="number">10</span>]; <span class="keyword">int</span> n; </div><div class="line">    poly() &#123; n=<span class="number">0</span>; <span class="built_in">memset</span>(p,<span class="number">0</span>,<span class="keyword">sizeof</span>(p)); &#125;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(point &amp;v)</span> </span>&#123; p[++n]=v; &#125; </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">in</span><span class="params">(point P)</span> </span>&#123; </div><div class="line">        ff x=P.x, y=P.y; <span class="keyword">bool</span> wn=<span class="number">0</span>; ff k, d1, d2; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n; ++i) &#123; </div><div class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(dists(P,p[i],p[i+<span class="number">1</span>]))&lt;=eps) <span class="keyword">return</span> <span class="number">1</span> ;</div><div class="line">            k=(p[i+<span class="number">1</span>]-p[i])*(P-p[i]); </div><div class="line">            d1=p[i].y-P.y, d2=p[i+<span class="number">1</span>].y-P.y; </div><div class="line">            <span class="keyword">if</span> (k&gt;eps&amp;&amp;d1&lt;=eps&amp;&amp;d2&gt;eps) wn^=<span class="number">1</span>; </div><div class="line">            <span class="keyword">if</span> (k&lt;-eps&amp;&amp;d1&gt;eps&amp;&amp;d2&lt;=eps) wn^=<span class="number">1</span>; </div><div class="line">        &#125; </div><div class="line">        <span class="keyword">return</span> wn; </div><div class="line">    &#125;</div><div class="line">&#125; po; </div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Ins</span><span class="params">(point a, point b, point c, point d)</span> </span>&#123; </div><div class="line">    point u=b-a, v=d-c, t1, t2; </div><div class="line">    <span class="keyword">if</span> (<span class="built_in">abs</span>(u*v)&lt;eps) <span class="keyword">return</span> <span class="literal">false</span>; </div><div class="line">    t1=c-a, t2=d-a; <span class="keyword">return</span> (u*t1)*(u*t2)&lt;-eps; </div><div class="line">&#125; </div><div class="line"><span class="function">point <span class="title">GLI</span><span class="params">(point p, point u, point q, point v)</span> </span>&#123; </div><div class="line">    point w=p-q; ff t = (v*w)/(u*v);</div><div class="line">    <span class="keyword">return</span> p+u*t; </div><div class="line">&#125; </div><div class="line"><span class="function">poly <span class="title">cutpolygon</span><span class="params">(poly p, point a, point b)</span> </span>&#123; </div><div class="line">    point c, d, ip; poly np=poly(); </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=p.n; ++i) &#123; </div><div class="line">        c=p.p[i], d=p.p[i+<span class="number">1</span>];</div><div class="line">        <span class="keyword">if</span> ((b-a)*(c-a)&gt;-eps) np.add(c); </div><div class="line">        <span class="keyword">if</span> (Ins(a,b,c,d)) ip=GLI(a,b-a,c,d-c),np.add(ip);</div><div class="line">    &#125; </div><div class="line">    np.p[np.n+<span class="number">1</span>]=np.p[<span class="number">1</span>]; </div><div class="line">    <span class="keyword">return</span> np; </div><div class="line">&#125;   </div><div class="line"><span class="function">ff <span class="title">area</span><span class="params">(poly p)</span> </span>&#123; </div><div class="line">    ff as=<span class="number">0</span>; rep(i,<span class="number">1</span>,p.n) as+=p.p[i]*p.p[i+<span class="number">1</span>]/(ff)<span class="number">2</span>; </div><div class="line">    <span class="keyword">return</span> as; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    point a; xep(i,<span class="number">4</span>) a.read(), po.add(a); po.p[<span class="number">5</span>]=po.p[<span class="number">1</span>];</div><div class="line">    ff as=((ff)<span class="number">4</span>*<span class="number">5</span>*<span class="number">5</span>)/((ff)<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span><span class="number">-1</span>)*(ff)<span class="number">5</span>; </div><div class="line">    as+=area(cutpolygon(po,point(<span class="number">-0.5</span>,<span class="number">-0.5</span>),point(<span class="number">-0.5</span>,<span class="number">0.5</span>)))*(ff)<span class="number">5</span>/((ff)<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>-(ff)<span class="number">1</span>*<span class="number">1</span>*<span class="number">1</span>)*(ff)<span class="number">4</span>; </div><div class="line">    as+=area(cutpolygon(po,point(<span class="number">-0.5</span>,<span class="number">0.5</span>),point(<span class="number">0.5</span>,<span class="number">0.5</span>)))*(ff)<span class="number">5</span>/((ff)<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>-(ff)<span class="number">1</span>*<span class="number">1</span>*<span class="number">1</span>)*(ff)<span class="number">6</span>; </div><div class="line">    as+=area(cutpolygon(po,point(<span class="number">0.5</span>,<span class="number">0.5</span>),point(<span class="number">0.5</span>,<span class="number">-0.5</span>)))*(ff)<span class="number">5</span>/((ff)<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>-(ff)<span class="number">1</span>*<span class="number">1</span>*<span class="number">1</span>)*(ff)<span class="number">3</span>; </div><div class="line">    as+=area(cutpolygon(po,point(<span class="number">0.5</span>,<span class="number">-0.5</span>),point(<span class="number">-0.5</span>, <span class="number">-0.5</span>)))*(ff)<span class="number">5</span>/((ff)<span class="number">5</span>*<span class="number">5</span>*<span class="number">5</span>-(ff)<span class="number">1</span>*<span class="number">1</span>*<span class="number">1</span>); </div><div class="line">    <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>, as),<span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;做了一波ACM比赛中的题， 感觉计算几何真是奇(luan)妙(tao)无(mu)穷(ban).&lt;/p&gt;
&lt;p&gt;这个题是？ 挂着期望外衣的计算几何(模板题？)&lt;/p&gt;
&lt;p&gt;反正计算几何就是模板在手， 天下我有。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="计算几何" scheme="http://shallwe.ga/categories/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
    
      <category term="半平面交" scheme="http://shallwe.ga/tags/%E5%8D%8A%E5%B9%B3%E9%9D%A2%E4%BA%A4/"/>
    
      <category term="多边形面积" scheme="http://shallwe.ga/tags/%E5%A4%9A%E8%BE%B9%E5%BD%A2%E9%9D%A2%E7%A7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4537】[Hnoi2016]最小公倍数</title>
    <link href="http://shallwe.ga/bzoj4537/"/>
    <id>http://shallwe.ga/bzoj4537/</id>
    <published>2017-05-27T06:45:55.000Z</published>
    <updated>2017-05-27T07:03:28.474Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>感觉这个题目还是非常好的。</p>
<p>题目中限制最小公倍数是<span class="math inline">\(2^{a}3^{b}\)</span>。</p>
<p>如果限制是<span class="math inline">\(2^a\)</span>， 那么是非常容易做的。</p>
<p>然后就可以联想一波， 得到分块的做法(≧▽≦)啦。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4537" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>多次询问是否存在<span class="math inline">\(u,v\)</span>间的简单路径使得最小公倍数是<span class="math inline">\(2^a3^b\)</span>.</p>
<h1 id="解题报告">解题报告</h1>
<p>如果最小公倍数的形式是<span class="math inline">\(2^a\)</span>, 那就可以排序+并查集直接解决。</p>
<p>现在是<span class="math inline">\((a,b)\)</span>的形式， 相当于从一维拓展到两维。</p>
<p>如果固定住其中一维， 那么第二维的情况可以使用一维的做法解决， 但是这样做的复杂度是<span class="math inline">\(O(m^2\log m)\)</span>的。</p>
<p>发现复杂度糟糕的原因是， 第一维每一次改变， 所有边都要按照第二维的顺序重新加入。</p>
<p>如果第一维不是每次改变都重构， 而是每跳动一个块的大小一重构， 那么复杂度是<span class="math inline">\(O(\sqrt{m}*m \log{m})\)</span>,</p>
<p>然后每次询问的时候， 需要把整块之外零散的边加入， 边的数量是<span class="math inline">\(\sqrt{m}\)</span>的。</p>
<p>因为需要加入再撤消， 所以不能使用路径压缩的并查集， 需要启发式合并一波。</p>
<p>总复杂度是<span class="math inline">\(O(\sqrt{m}*m \log m * \log n + Q \sqrt{m} \log n)\)</span></p>
<p>这种复杂度都能过题？</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> y second </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50100</span>; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</div><div class="line">	<span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>?<span class="number">-1</span>:f); </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> u,v,a,b; info()&#123;&#125; </div><div class="line">	info(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> a,<span class="keyword">int</span> b) :u(u),v(v),a(a),b(b)&#123;&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123; in(u),in(v),in(a),in(b); &#125; </div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>], qs[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">old</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> x,f,sz,a,b; old()&#123;&#125;</div><div class="line">	old(<span class="keyword">int</span> x,<span class="keyword">int</span> f,<span class="keyword">int</span> sz,<span class="keyword">int</span> a,<span class="keyword">int</span> b) </div><div class="line">		:x(x), f(f), sz(sz), a(a),b(b) &#123;&#125;</div><div class="line">&#125;; </div><div class="line"><span class="keyword">int</span> n,m,Q,bb; </div><div class="line"><span class="keyword">int</span> f[N],sz[N],ma[N],mb[N]; <span class="keyword">bool</span> as[N]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpa</span><span class="params">(info a, info b)</span> </span>&#123; <span class="keyword">return</span> a.a&lt;b.a;&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpe</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> e[a].b&lt;e[b].b;&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmpqs</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123; <span class="keyword">return</span> qs[a].b&lt;qs[b].b;&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmx</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&gt;x?a:x); &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmn</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&lt;x?a:x); &#125; </div><div class="line"></div><div class="line"><span class="built_in">vector</span>&lt;old&gt; v; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (f[x]==x?x:find(f[x]));&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(info e, <span class="keyword">bool</span> tp)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> a=find(e.u), b=find(e.v); </div><div class="line">	<span class="keyword">if</span> (sz[a]&gt;sz[b]) swap(a,b); </div><div class="line">	<span class="keyword">if</span> (tp) &#123;</div><div class="line">		v.pb(old(a,a,sz[a],ma[a],mb[a])); </div><div class="line">		v.pb(old(b,b,sz[b],ma[b],mb[b])); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">if</span> (a!=b) &#123; </div><div class="line">		<span class="keyword">if</span> (sz[a]==sz[b]) ++sz[b];</div><div class="line">		f[a]=b, cmx(ma[b],ma[a]), cmx(mb[b],mb[a]); </div><div class="line">	&#125;</div><div class="line">	cmx(ma[b],e.a), cmx(mb[b],e.b); </div><div class="line">&#125;</div><div class="line">		</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">recons</span><span class="params">()</span> </span>&#123; </div><div class="line">	old no; <span class="keyword">int</span> x;</div><div class="line">	vep(i,(<span class="keyword">int</span>)v.size()<span class="number">-1</span>, <span class="number">0</span>)</div><div class="line">		no=v[i], x=v[i].x, f[x]=v[i].f, sz[x]=v[i].sz, ma[x]=v[i].a, mb[x]=v[i].b; </div><div class="line">	v.clear(); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">static</span> <span class="keyword">int</span> a[N&lt;&lt;<span class="number">1</span>],b[N&lt;&lt;<span class="number">1</span>],fa,fb; </div><div class="line">	in(n),in(m); rep(i,<span class="number">1</span>,m) e[i].read(),a[i]=i; </div><div class="line">	sort(e+<span class="number">1</span>,e+<span class="number">1</span>+m,cmpa);  bb=<span class="built_in">sqrt</span>(m); </div><div class="line">	in(Q); rep(i,<span class="number">1</span>,Q) qs[i].read(); </div><div class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=m; i+=bb) &#123; </div><div class="line">		<span class="keyword">int</span> hs=<span class="number">0</span>; </div><div class="line">		rep(j,<span class="number">1</span>,Q) <span class="keyword">if</span> (qs[j].a&gt;=e[i].a&amp;&amp;(i+bb&gt;m||qs[j].a&lt;e[i+bb].a))</div><div class="line">          b[++hs]=j; </div><div class="line">		<span class="keyword">if</span> (hs==<span class="number">0</span>) <span class="keyword">continue</span>; </div><div class="line">		sort(a+<span class="number">1</span>,a+i+<span class="number">1</span>,cmpe); </div><div class="line">		sort(b+<span class="number">1</span>,b+<span class="number">1</span>+hs,cmpqs); </div><div class="line">		rep(j,<span class="number">1</span>,n) f[j]=j,sz[j]=<span class="number">1</span>,ma[j]=<span class="number">-1</span>,mb[j]=<span class="number">-1</span>;  </div><div class="line">		<span class="keyword">int</span> j=<span class="number">1</span>; rep(k,<span class="number">1</span>,hs) &#123; </div><div class="line">			<span class="keyword">while</span> (j&lt;=i&amp;&amp;e[a[j]].b&lt;=qs[b[k]].b)</div><div class="line">             	merge(e[a[j]],<span class="number">0</span>),++j; </div><div class="line">			rep(l,i+<span class="number">1</span>,min(i+bb,m)) </div><div class="line">             	<span class="keyword">if</span> (e[a[l]].a&lt;=qs[b[k]].a) &#123;</div><div class="line">				<span class="keyword">if</span> (e[a[l]].b&lt;=qs[b[k]].b) merge(e[a[l]],<span class="number">1</span>); </div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">break</span>; </div><div class="line">			fa=find(qs[b[k]].u), fb=find(qs[b[k]].v); </div><div class="line">			as[b[k]]=(fa==fb&amp;&amp;ma[fa]==qs[b[k]].a&amp;&amp;mb[fa]==qs[b[k]].b); </div><div class="line">			recons(); </div><div class="line">		&#125; </div><div class="line">	&#125;</div><div class="line">	rep(i,<span class="number">1</span>,Q) <span class="built_in">puts</span>((as[i]?<span class="string">"Yes"</span>:<span class="string">"No"</span>)); </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;感觉这个题目还是非常好的。&lt;/p&gt;
&lt;p&gt;题目中限制最小公倍数是&lt;span class=&quot;math inline&quot;&gt;\(2^{a}3^{b}\)&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;如果限制是&lt;span class=&quot;math inline&quot;&gt;\(2^a\)&lt;/span&gt;， 那么是非常容易做的。&lt;/p&gt;
&lt;p&gt;然后就可以联想一波， 得到分块的做法(≧▽≦)啦。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://shallwe.ga/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="并查集" scheme="http://shallwe.ga/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="分块" scheme="http://shallwe.ga/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 3489】A simple rmq problem</title>
    <link href="http://shallwe.ga/bzoj3489/"/>
    <id>http://shallwe.ga/bzoj3489/</id>
    <published>2017-05-27T06:22:27.000Z</published>
    <updated>2017-05-27T06:32:23.361Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>标准无脑数据结构题？</p>
<p>一眼看过去有一种数据结构嵌套的冲动。 然后发现就是可以数据结构嵌套， 还需要可持久化。。</p>
<p>然后， 发现可以用“暴力”（KD-tree)艹掉？</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3489" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>给出一个长度为<span class="math inline">\(n\)</span>的序列，给出<span class="math inline">\(M\)</span>个询问：在<span class="math inline">\([l,r]\)</span>之间找到一个在这个区间里只出现过一次的数，并且要求找的这个数尽可能大。如果找不到这样的数，则直接输出0。强制在线。</p>
<h1 id="解题报告">解题报告</h1>
<p>题目中的在<span class="math inline">\([l,r]\)</span>中只出现一次的意思， 是前一个在<span class="math inline">\([0,l-1]\)</span>, 后一个在<span class="math inline">\([r+1,n+1]\)</span>, 自己在<span class="math inline">\([l,r]\)</span>的意思。</p>
<p>显然可以线性预处理前一个和后一个的位置， 记为<span class="math inline">\(l_x, n_x\)</span>.</p>
<p>那就是要查询<span class="math inline">\(l_x \in [0, l-1], n_x \in [r+1,n+1], x \in [l,r]\)</span>的最大值</p>
<ul>
<li>解法一</li>
</ul>
<p>可以将<span class="math inline">\(l_x\)</span>可持久化， 然后<span class="math inline">\(n_x\)</span>嵌套<span class="math inline">\(x\)</span>, 做一个可持久化线段树套线段树。</p>
<p>时间复杂度<span class="math inline">\(O(n \log^2 n)\)</span></p>
<p>空间复杂度不知道， 反正巨卡但是能过。</p>
<ul>
<li>解法二</li>
</ul>
<p>相当于一个三维空间的空间最大点问题。</p>
<p>这个可以用KD-tree暴力的做。</p>
<p>复杂度是<span class="math inline">\(O(n^{\frac{5}{3}})\)</span></p>
<p>但是跑得更快。</p>
<h1 id="代码">代码</h1>
<ul>
<li>树套树（可持久化）</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> x first</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> y second</span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100010</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> sn[<span class="number">40000000</span>][<span class="number">2</span>],rt[N],v[<span class="number">40000000</span>],ts; </div><div class="line"><span class="keyword">int</span> a[N], ls[N], nx[N], co[N], las,n,m; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">info</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> l,r,x,v; info(<span class="keyword">int</span> l=<span class="number">0</span>,<span class="keyword">int</span> r=<span class="number">0</span>,<span class="keyword">int</span> x=<span class="number">0</span>,<span class="keyword">int</span> v=<span class="number">0</span>) </div><div class="line">		:l(l),r(r),x(x),v(v) &#123;&#125;</div><div class="line">&#125; p[N]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (; c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:f; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>; c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&gt;x?a:x); &#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">inmo</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> fm,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> w,<span class="keyword">int</span> va)</span> </span>&#123; </div><div class="line">	x=++ts; <span class="built_in">memcpy</span>(sn[x],sn[fm],<span class="keyword">sizeof</span>(sn[fm])),v[x]=v[fm];</div><div class="line">	cmax(v[x], va); <span class="keyword">if</span> (l==r) <span class="keyword">return</span>; <span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">	<span class="keyword">if</span> (w&lt;=md) inmo(sn[x][<span class="number">0</span>],sn[fm][<span class="number">0</span>],l,md,w,va); </div><div class="line">	<span class="keyword">else</span> inmo(sn[x][<span class="number">1</span>],sn[fm][<span class="number">1</span>],md+<span class="number">1</span>,r,w,va); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">outmo</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> fm,<span class="keyword">int</span> l,<span class="keyword">int</span> r,info p)</span> </span>&#123; </div><div class="line">	x=++ts; <span class="built_in">memcpy</span>(sn[x],sn[fm],<span class="keyword">sizeof</span>(sn[fm])),v[x]=v[fm];</div><div class="line">	inmo(v[x],v[fm],<span class="number">1</span>,n,p.x,p.v); </div><div class="line">	<span class="keyword">if</span> (l==r) <span class="keyword">return</span>; <span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">	<span class="keyword">if</span> (p.r&lt;=md) outmo(sn[x][<span class="number">0</span>],sn[fm][<span class="number">0</span>],l,md,p); </div><div class="line">	<span class="keyword">else</span> outmo(sn[x][<span class="number">1</span>],sn[fm][<span class="number">1</span>],md+<span class="number">1</span>,r,p); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">inqy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,pii p)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> mx=<span class="number">0</span>; <span class="keyword">if</span> (!x) <span class="keyword">return</span> mx; </div><div class="line">	<span class="keyword">if</span> (p.x&lt;=l&amp;&amp;r&lt;=p.y) <span class="keyword">return</span> v[x]; </div><div class="line">	<span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">	<span class="keyword">if</span> (p.x&lt;=md) cmax(mx,inqy(sn[x][<span class="number">0</span>],l,md,p)); </div><div class="line">	<span class="keyword">if</span> (p.y&gt;md) cmax(mx,inqy(sn[x][<span class="number">1</span>],md+<span class="number">1</span>,r,p)); </div><div class="line">	<span class="keyword">return</span> mx; </div><div class="line">&#125;  </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">outqy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r,pii p)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> mx=<span class="number">0</span>; <span class="keyword">if</span> (!x) <span class="keyword">return</span> mx; </div><div class="line">	<span class="keyword">if</span> (p.y+<span class="number">1</span>&lt;=l&amp;&amp;r&lt;=n+<span class="number">1</span>) &#123; cmax(mx,inqy(v[x],<span class="number">1</span>,n,p)); <span class="keyword">return</span> mx;&#125; </div><div class="line">	<span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">	<span class="keyword">if</span> (p.y+<span class="number">1</span>&lt;=md) cmax(mx,outqy(sn[x][<span class="number">0</span>],l,md,p)); </div><div class="line">	<span class="keyword">if</span> (n+<span class="number">1</span>&gt;md) cmax(mx,outqy(sn[x][<span class="number">1</span>],md+<span class="number">1</span>,r,p));</div><div class="line">	<span class="keyword">return</span> mx; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(info a, info b)</span> </span>&#123; <span class="keyword">return</span> a.l&lt;b.l; &#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> l,r; in(n),in(m); </div><div class="line">	rep(i,<span class="number">1</span>,n) in(a[i]), ls[i]=co[a[i]], nx[co[a[i]]]=i, co[a[i]]=i; </div><div class="line">	rep(i,<span class="number">1</span>,n) nx[i]=(nx[i]?nx[i]:n+<span class="number">1</span>), p[i]=info(ls[i],nx[i],i,a[i]); </div><div class="line">	sort(p+<span class="number">1</span>, p+<span class="number">1</span>+n, cmp);</div><div class="line">	<span class="keyword">int</span> j=<span class="number">1</span>; xep(i, n) &#123; </div><div class="line">		rt[i]=(i?rt[i<span class="number">-1</span>]:<span class="number">0</span>); </div><div class="line">		<span class="keyword">while</span> (j&lt;=n&amp;&amp;p[j].l==i) </div><div class="line"> 			outmo(rt[i],rt[i],<span class="number">2</span>,n+<span class="number">1</span>,p[j]), ++j; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">while</span> (m--) &#123; </div><div class="line">		in(l), in(r), l=(l+las)%n+<span class="number">1</span>, r=(r+las)%n+<span class="number">1</span>; <span class="keyword">if</span>(l&gt;r) swap(l,r); </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>, las=outqy(rt[l<span class="number">-1</span>],<span class="number">2</span>,n+<span class="number">1</span>,mp(l,r))); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>KD-tree</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">100100</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> di, n,m,a[N],ls[N],nx[N],co[N],las; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> mn[<span class="number">3</span>],mx[<span class="number">3</span>],d[<span class="number">3</span>],l,r,v,as; </div><div class="line">&#125; v[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ques</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> mn[<span class="number">3</span>],mx[<span class="number">3</span>]; ques() &#123;&#125; ques(<span class="keyword">int</span> l,<span class="keyword">int</span> r) &#123; </div><div class="line">		mn[<span class="number">0</span>]=<span class="number">0</span>,mx[<span class="number">0</span>]=l<span class="number">-1</span>,mn[<span class="number">1</span>]=r+<span class="number">1</span>,mx[<span class="number">1</span>]=n+<span class="number">1</span>,mn[<span class="number">2</span>]=l,mx[<span class="number">2</span>]=r; </div><div class="line">	&#125; </div><div class="line">&#125; qs; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>?<span class="number">-1</span>:f); </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>; </div><div class="line">	x*=f;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmx</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&gt;x?a:x); &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmn</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=(a&lt;x?a:x); &#125; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span> </span>&#123; <span class="keyword">return</span> a.d[di]&lt;b.d[di]; &#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">int</span> y; </div><div class="line">	<span class="keyword">if</span> (y=v[x].l) &#123; xep(i,<span class="number">3</span>) cmn(v[x].mn[i],v[y].mn[i]), cmx(v[x].mx[i],v[y].mx[i]); cmx(v[x].as,v[y].as);&#125; </div><div class="line">	<span class="keyword">if</span> (y=v[x].r) &#123; xep(i,<span class="number">3</span>) cmn(v[x].mn[i],v[y].mn[i]), cmx(v[x].mx[i],v[y].mx[i]); cmx(v[x].as,v[y].as);&#125; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> d)</span> </span>&#123; </div><div class="line">	di=d; <span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; nth_element(v+l,v+md,v+r+<span class="number">1</span>,cmp); </div><div class="line">	xep(i,<span class="number">3</span>) v[md].mn[i]=v[md].mx[i]=v[md].d[i]; </div><div class="line">	v[md].as=v[md].v; </div><div class="line">	<span class="keyword">if</span> (md!=l) v[md].l=build(l,md<span class="number">-1</span>,(d+<span class="number">1</span>)%<span class="number">3</span>); </div><div class="line">	<span class="keyword">if</span> (md!=r) v[md].r=build(md+<span class="number">1</span>,r,(d+<span class="number">1</span>)%<span class="number">3</span>); </div><div class="line">	push(md); <span class="keyword">return</span> md; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">enough</span><span class="params">(node &amp;v)</span> </span>&#123; </div><div class="line">	<span class="keyword">bool</span> may=<span class="number">1</span>; xep(i,<span class="number">3</span>) <span class="keyword">if</span> (qs.mn[i]&gt;v.mn[i]||v.mx[i]&gt;qs.mx[i]) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">illegal</span><span class="params">(node &amp;v)</span> </span>&#123; </div><div class="line">	xep(i,<span class="number">3</span>) <span class="keyword">if</span> (v.mn[i]&gt;qs.mx[i]||v.mx[i]&lt;qs.mn[i]) <span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">legal</span><span class="params">(node &amp;v)</span> </span>&#123; </div><div class="line">	xep(i,<span class="number">3</span>) <span class="keyword">if</span> (v.d[i]&lt;qs.mn[i]||v.d[i]&gt;qs.mx[i]) <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">	<span class="keyword">return</span> <span class="number">1</span>; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(node &amp;v)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (illegal(v)) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">else</span> <span class="keyword">return</span> v.as; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line">	di=d; <span class="keyword">int</span> l=<span class="number">0</span>, la=<span class="number">0</span>, r=<span class="number">0</span>, ra=<span class="number">0</span>; </div><div class="line">	<span class="keyword">if</span> (enough(v[x])) cmx(las,v[x].as);</div><div class="line">	<span class="keyword">if</span> (legal(v[x])) cmx(las, v[x].v); </div><div class="line">	<span class="keyword">if</span> (l=v[x].l) la=count(v[l]); </div><div class="line">	<span class="keyword">if</span> (r=v[x].r) ra=count(v[r]); </div><div class="line">	<span class="keyword">if</span> (la&lt;ra) swap(la,ra), swap(l,r); </div><div class="line">	<span class="keyword">if</span> (la&gt;las) query(l,(d+<span class="number">1</span>)%<span class="number">3</span>); </div><div class="line">	<span class="keyword">if</span> (ra&gt;las) query(r,(d+<span class="number">1</span>)%<span class="number">3</span>); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(n),in(m); rep(i,<span class="number">1</span>,n) in(a[i]); <span class="keyword">int</span> l, r;</div><div class="line">	rep(i,<span class="number">1</span>,n) ls[i]=co[a[i]], nx[co[a[i]]]=i, co[a[i]]=i; </div><div class="line">	rep(i,<span class="number">1</span>,n) &#123; </div><div class="line">		nx[i]=(nx[i]?nx[i]:n+<span class="number">1</span>);</div><div class="line">		v[i].d[<span class="number">0</span>]=ls[i],v[i].d[<span class="number">1</span>]=nx[i],v[i].d[<span class="number">2</span>]=i,v[i].v=a[i]; </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">int</span> rt=build(<span class="number">1</span>,n,<span class="number">0</span>); </div><div class="line">	<span class="keyword">while</span> (m--) &#123; </div><div class="line">		in(l),in(r),l=(l+las)%n+<span class="number">1</span>, r=(r+las)%n+<span class="number">1</span>; <span class="keyword">if</span> (l&gt;r) swap(l,r); </div><div class="line">		qs=ques(l,r),las=<span class="number">0</span>,query(rt,<span class="number">0</span>), <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, las); </div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;标准无脑数据结构题？&lt;/p&gt;
&lt;p&gt;一眼看过去有一种数据结构嵌套的冲动。 然后发现就是可以数据结构嵌套， 还需要可持久化。。&lt;/p&gt;
&lt;p&gt;然后， 发现可以用“暴力”（KD-tree)艹掉？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://shallwe.ga/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="KD树" scheme="http://shallwe.ga/tags/KD%E6%A0%91/"/>
    
      <category term="可持久化数据结构" scheme="http://shallwe.ga/tags/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树套树" scheme="http://shallwe.ga/tags/%E6%A0%91%E5%A5%97%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4035】[HAOI2015]数组游戏</title>
    <link href="http://shallwe.ga/bzoj4035/"/>
    <id>http://shallwe.ga/bzoj4035/</id>
    <published>2017-05-27T06:00:02.000Z</published>
    <updated>2017-05-27T06:14:07.293Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>是SDOI2016R2D1T1的加强版？ 感觉比sdoi那个题有意思许多。</p>
<p>适当打表有利身心健康？</p>
<p>适当猜结论有利身心健康？</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4035" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>每次选择一个白子<span class="math inline">\(x\)</span>， 选择一个整数<span class="math inline">\(k \leqslant \lfloor n/x \rfloor\)</span>, 翻转<span class="math inline">\(x, 2x, ... , kx\)</span>.</p>
<p>不能操作者输。</p>
<h1 id="解题报告">解题报告</h1>
<p>首先初始棋盘上的每个白子是独立的， <span class="math inline">\(f[x]\)</span> 表示<span class="math inline">\(x\)</span>位置的白子的<span class="math inline">\(sg\)</span>值。</p>
<p>很容易发现</p>
<p><span class="math display">\[f[x] = \text{mex} \left \lbrace f[x] \text{^} f[2x] \text{^} ... \text{^} f[kx]  \right \rbrace , k \in [1,\lfloor \frac{n}{x} \rfloor]\]</span>.</p>
<p>如果直接用这个式子转移， 复杂度是<span class="math inline">\(O(\sum_{i=1}^{n} \lfloor \frac{n}{i} \rfloor)\)</span> .</p>
<p>可以发现， 一个位置的<span class="math inline">\(sg\)</span>值可以由<span class="math inline">\(\lfloor \frac{n}{x} \rfloor\)</span> 确定， 因为转移是完全一样的。</p>
<p>所示有用的状态就是<span class="math inline">\(O(\sqrt{n})\)</span>的。</p>
<p>时间复杂度是<span class="math inline">\(O(n)\)</span> ?</p>
<p>可以过了。。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">int</span> c[<span class="number">2</span>][<span class="number">100000</span>],k,w,n,B; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> &amp;i, <span class="keyword">int</span> n)</span> </span>&#123; i=(i==n?i+<span class="number">1</span>:n/(n/(i+<span class="number">1</span>)));&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">inital</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> vs[<span class="number">100000</span>]; <span class="keyword">static</span> <span class="keyword">int</span> tot,a[<span class="number">100000</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;nxt(i,n)) &#123; </div><div class="line">        <span class="keyword">int</span> no=<span class="number">0</span>; tot=<span class="number">0</span>; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">2</span>;j&lt;=i;nxt(j,i)) &#123; </div><div class="line">            <span class="keyword">int</span> x=i/j,t=x&gt;=B?c[<span class="number">1</span>][n/x]:c[<span class="number">0</span>][x]; </div><div class="line">            a[++tot]=no^t, vs[a[tot]]=<span class="number">1</span>;  </div><div class="line">            <span class="keyword">if</span> ((i/x-i/(x+<span class="number">1</span>))&amp;<span class="number">1</span>) no^=t; </div><div class="line">        &#125;   </div><div class="line">        no=<span class="number">1</span>; <span class="keyword">while</span> (vs[no]) ++no; </div><div class="line">        <span class="keyword">if</span> (i&gt;=B) c[<span class="number">1</span>][n/i]=no; <span class="keyword">else</span> c[<span class="number">0</span>][i]=no; </div><div class="line">        <span class="keyword">while</span> (tot) vs[a[tot--]]=<span class="number">0</span>; </div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line">             </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n); B=<span class="built_in">sqrt</span>(n); </div><div class="line">    inital(); <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k); <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">while</span> (k--) &#123; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;w); <span class="keyword">int</span> as=<span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span> (w--) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x), x=n/x,as^=(x&gt;=B)? c[<span class="number">1</span>][n/x]:c[<span class="number">0</span>][x]; </div><div class="line">        <span class="built_in">puts</span>((as?<span class="string">"Yes"</span>:<span class="string">"No"</span>)); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;是SDOI2016R2D1T1的加强版？ 感觉比sdoi那个题有意思许多。&lt;/p&gt;
&lt;p&gt;适当打表有利身心健康？&lt;/p&gt;
&lt;p&gt;适当猜结论有利身心健康？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="游戏题" scheme="http://shallwe.ga/categories/%E6%B8%B8%E6%88%8F%E9%A2%98/"/>
    
    
      <category term="sg函数" scheme="http://shallwe.ga/tags/sg%E5%87%BD%E6%95%B0/"/>
    
      <category term="博弈" scheme="http://shallwe.ga/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 3616】War</title>
    <link href="http://shallwe.ga/bzoj3616/"/>
    <id>http://shallwe.ga/bzoj3616/</id>
    <published>2017-05-27T03:15:49.000Z</published>
    <updated>2017-05-27T03:31:15.025Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>跟着A队大爷XYM做的一个题，想到算法都不敢写系列？</p>
<p>用KD-tree维护些bitset相关的信息， 然后竟然卡得如此巧妙不炸内存？</p>
<p>感觉KD-tree越来越像暴力+剪枝了。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3616" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>炮台分为<span class="math inline">\(k\)</span>个阵营， 每个阵营的炮台会攻击一定范围内所有其他阵营的炮台， 随机<span class="math inline">\(m\)</span>轮， 每轮选择一个炮台攻击， 问期望剩下的完整的阵营数。</p>
<h1 id="解题报告">解题报告</h1>
<p><span class="math display">\[
\text{ans} = \sum_{i=1}^{k} P(i)
\]</span></p>
<p><span class="math inline">\(P(i)\)</span> 表示<span class="math inline">\(i\)</span>阵营不被攻击的概率； <span class="math display">\[
P(i) = (1-\frac{x}{n})^m
\]</span> 其中， <span class="math inline">\(x\)</span>表示能够攻击到任意一个炮塔的炮塔个数。</p>
<p>那只要求出<span class="math inline">\(x\)</span>就好了， 实际上就是能够攻击到阵营中的某个炮塔的集合的并集。</p>
<p>利用KD-tree+bitset得到每个炮塔能被哪些炮塔攻击到， 然后对于一个阵营， 直接<span class="math inline">\(\text{or}\)</span>起来， 再除去阵营内部的炮塔就可以了。</p>
<p>时间复杂度是<span class="math inline">\(O(n^2 \sqrt{n} /W )\)</span>的。</p>
<p>空间复杂度是<span class="math inline">\(O(n^2/8)\)</span>的。</p>
<p>反正就是各种虚， 但是好像数据非常弱？</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">35010</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=a&gt;x?a:x; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=a&lt;x?a:x; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;	<span class="keyword">return</span> x&gt;=<span class="number">0</span>?x:-x; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sqr</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x*x;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;<span class="keyword">return</span> a&gt;b?a:b;&#125;</div><div class="line"></div><div class="line">ff res;</div><div class="line"><span class="keyword">int</span> n,m,K,i,j,k,root,_d,_x,_y,_r,_a,cnt[N],od[N];</div><div class="line"><span class="keyword">int</span> g[N],v[N],nxt[N],ed;</div><div class="line"><span class="built_in">bitset</span>&lt;N&gt;ok,b[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span> &#123;</span><span class="keyword">int</span> x,y,r,a,p;&#125; a[N];</div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span><span class="keyword">int</span> d[<span class="number">2</span>],l,r,mx[<span class="number">2</span>],mn[<span class="number">2</span>],p;&#125; t[N];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> node &amp;a,<span class="keyword">const</span> node &amp;b)</span> </span>&#123;<span class="keyword">return</span> a.d[_d]&lt;b.d[_d];&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; v[++ed]=y;nxt[ed]=g[x];g[x]=ed;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">	add(t[x].p,x);</div><div class="line">	<span class="keyword">if</span>(t[x].l)&#123;</div><div class="line">	    cmax(t[x].mx[<span class="number">0</span>],t[t[x].l].mx[<span class="number">0</span>]);</div><div class="line">	    cmin(t[x].mn[<span class="number">0</span>],t[t[x].l].mn[<span class="number">0</span>]);</div><div class="line">	    cmax(t[x].mx[<span class="number">1</span>],t[t[x].l].mx[<span class="number">1</span>]);</div><div class="line">	    cmin(t[x].mn[<span class="number">1</span>],t[t[x].l].mn[<span class="number">1</span>]);</div><div class="line">	 &#125;</div><div class="line">	<span class="keyword">if</span>(t[x].r)&#123;</div><div class="line">	    cmax(t[x].mx[<span class="number">0</span>],t[t[x].r].mx[<span class="number">0</span>]);</div><div class="line">	    cmin(t[x].mn[<span class="number">0</span>],t[t[x].r].mn[<span class="number">0</span>]);</div><div class="line">	    cmax(t[x].mx[<span class="number">1</span>],t[t[x].r].mx[<span class="number">1</span>]);</div><div class="line">	    cmin(t[x].mn[<span class="number">1</span>],t[t[x].r].mn[<span class="number">1</span>]);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> D)</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>;</div><div class="line">	_d=D,nth_element(t+l+<span class="number">1</span>,t+md+<span class="number">1</span>,t+r+<span class="number">1</span>,cmp);</div><div class="line">	t[md].mx[<span class="number">0</span>]=t[md].mn[<span class="number">0</span>]=t[md].d[<span class="number">0</span>];</div><div class="line">	t[md].mx[<span class="number">1</span>]=t[md].mn[<span class="number">1</span>]=t[md].d[<span class="number">1</span>];</div><div class="line">	<span class="keyword">if</span>(l!=md) t[md].l=build(l,md<span class="number">-1</span>,!D);</div><div class="line">	<span class="keyword">if</span>(r!=md) t[md].r=build(md+<span class="number">1</span>,r,!D);</div><div class="line">	<span class="keyword">return</span> up(md),md;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(node &amp;x, <span class="keyword">int</span> xx)</span></span>&#123;</div><div class="line">	<span class="keyword">if</span>(sqr(max(max(_x-x.mx[<span class="number">0</span>],x.mn[<span class="number">0</span>]-_x),<span class="number">0</span>))+sqr(max(max(_y-x.mx[<span class="number">1</span>],x.mn[<span class="number">1</span>]-_y),<span class="number">0</span>))&gt;_r</div><div class="line">    &amp;&amp; max(x.mn[<span class="number">0</span>]-_x,<span class="number">0</span>)+max(_x-x.mx[<span class="number">0</span>],<span class="number">0</span>)+max(x.mn[<span class="number">1</span>]-_y,<span class="number">0</span>)+max(_y-x.mx[<span class="number">1</span>],<span class="number">0</span>)&gt;_a) <span class="keyword">return</span>;</div><div class="line">	<span class="keyword">if</span>(max(sqr(_x-x.mn[<span class="number">0</span>]),sqr(_x-x.mx[<span class="number">0</span>]))+max(sqr(_y-x.mn[<span class="number">1</span>]),sqr(_y-x.mx[<span class="number">1</span>]))&lt;=_r</div><div class="line">    || max(<span class="built_in">abs</span>(_x-x.mx[<span class="number">0</span>]),<span class="built_in">abs</span>(x.mn[<span class="number">0</span>]-_x))+max(<span class="built_in">abs</span>(_y-x.mx[<span class="number">1</span>]),<span class="built_in">abs</span>(x.mn[<span class="number">1</span>]-_y))&lt;=_a) &#123;	b[xx][i]=<span class="number">1</span>; <span class="keyword">return</span>;&#125;</div><div class="line">	<span class="comment">//if(sqr(x.d[0]-_x)+sqr(x.d[1]-_y)&lt;=_r||abs(x.d[0]-_x)+abs(x.d[1]-_y)&lt;=_a) ADD(x.p,i);</span></div><div class="line">  	<span class="keyword">if</span>(x.l) modify(t[x.l],x.l);</div><div class="line">  	<span class="keyword">if</span>(x.r) modify(t[x.r],x.r);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(node &amp;x,<span class="keyword">int</span> _x,<span class="keyword">int</span> y)</span></span>&#123; b[_x]|=b[y];</div><div class="line">	<span class="keyword">if</span>(x.l) dfs(t[x.l],x.l,_x); <span class="keyword">if</span>(x.r) dfs(t[x.r],x.r,_x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;K);</div><div class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">    	<span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;a[i].x,&amp;a[i].y,&amp;a[i].r,&amp;a[i].a,&amp;a[i].p);</div><div class="line">    	t[i].d[<span class="number">0</span>]=a[i].x,t[i].d[<span class="number">1</span>]=a[i].y,t[i].p=a[i].p;</div><div class="line">    	cnt[a[i].p]++;</div><div class="line">  	&#125;</div><div class="line">  	root=build(<span class="number">1</span>,n,<span class="number">1</span>);</div><div class="line">  	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) _x=a[i].x,_y=a[i].y,_r=sqr(a[i].r),_a=a[i].a,modify(t[root],root);</div><div class="line">  	dfs(t[root],root,<span class="number">0</span>);</div><div class="line">  	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=K;i++)&#123;</div><div class="line">    	ok.reset(); <span class="keyword">for</span>(j=g[i];j;j=nxt[j]) ok|=b[v[j]]; </div><div class="line">    	res+=<span class="built_in">pow</span>(<span class="number">1.0</span>*(n-ok.count()+cnt[i])/n,m);</div><div class="line">  	&#125;</div><div class="line">  	<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>,res),<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;跟着A队大爷XYM做的一个题，想到算法都不敢写系列？&lt;/p&gt;
&lt;p&gt;用KD-tree维护些bitset相关的信息， 然后竟然卡得如此巧妙不炸内存？&lt;/p&gt;
&lt;p&gt;感觉KD-tree越来越像暴力+剪枝了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://shallwe.ga/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="KD树" scheme="http://shallwe.ga/tags/KD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 2716】[Violet 3]天使玩偶</title>
    <link href="http://shallwe.ga/bzoj2716/"/>
    <id>http://shallwe.ga/bzoj2716/</id>
    <published>2017-05-24T12:31:10.000Z</published>
    <updated>2017-05-24T12:35:38.571Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>模板题？ 没有想出如果不会kd-tree该怎么做， 但是有了kd-tree确实是模板题哎。</p>
<p>有时候科技的力量真是耐人寻味。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2716" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>支持两个操作：</p>
<ol style="list-style-type: decimal">
<li>插入一个点</li>
<li>询问最近点</li>
</ol>
<h1 id="解题报告">解题报告</h1>
<p>KD-tree 模板题。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x7fffffff</span>; </div><div class="line"></div><div class="line"><span class="keyword">bool</span> D; <span class="keyword">int</span> n,m,rt,as; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KDT</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> d[<span class="number">2</span>],sn[<span class="number">2</span>],mn[<span class="number">2</span>],mx[<span class="number">2</span>]; </div><div class="line">	<span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> KDT &amp;a) <span class="keyword">const</span> &#123; <span class="keyword">return</span> d[D]&lt;a.d[D];&#125;</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123; xep(i,<span class="number">2</span>) mn[i]=mx[i]=d[i];&#125; </div><div class="line">&#125; v[N&lt;&lt;<span class="number">1</span>],qy; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; <span class="keyword">char</span> c=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>;c=getchar()) f=(c==<span class="string">'-'</span>)?<span class="number">-1</span>:f; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>; c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>;c=getchar()) x=x*<span class="number">10</span>+c<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=a&gt;x?a:x; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=a&lt;x?a:x; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x&gt;y?x:y; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> x&lt;y?x:y; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">abs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> (x&gt;=<span class="number">0</span>)?x:-x; &#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; xep(i,<span class="number">2</span>) <span class="keyword">if</span> (v[x].sn[i]) &#123; <span class="keyword">int</span> y=v[x].sn[i]; </div><div class="line">	xep(j,<span class="number">2</span>) cmin(v[x].mn[j],v[y].mn[j]),cmax(v[x].mx[j],v[y].mx[j]); </div><div class="line">&#125; &#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l=<span class="number">1</span>, <span class="keyword">int</span> r=n, <span class="keyword">bool</span> d=<span class="number">0</span>)</span> </span>&#123; D=d; <span class="keyword">int</span> md=(l+r)&gt;&gt;<span class="number">1</span>; </div><div class="line">	nth_element(v+l,v+md,v+r+<span class="number">1</span>); v[md].init(); </div><div class="line">	<span class="keyword">if</span> (l!=md) v[md].sn[<span class="number">0</span>]=build(l,md<span class="number">-1</span>,!d); </div><div class="line">	<span class="keyword">if</span> (r!=md) v[md].sn[<span class="number">1</span>]=build(md+<span class="number">1</span>,r,!d);</div><div class="line">	up(md); <span class="keyword">return</span> md; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x, KDT p)</span> </span>&#123; <span class="keyword">int</span> rc=<span class="number">0</span>; xep(i,<span class="number">2</span>) </div><div class="line">	rc+=max(<span class="number">0</span>,v[x].mn[i]-p.d[i])+max(<span class="number">0</span>,p.d[i]-v[x].mx[i]);</div><div class="line">	<span class="keyword">return</span> rc; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x=rt, <span class="keyword">bool</span> d=<span class="number">0</span>)</span> </span>&#123; <span class="keyword">bool</span> fg=v[n].d[d]&gt;v[x].d[d]; </div><div class="line">	<span class="keyword">if</span> (v[x].sn[fg]) insert(v[x].sn[fg], !d); </div><div class="line">	<span class="keyword">else</span> v[x].sn[fg]=n; up(x); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">dis</span><span class="params">(KDT a, KDT b)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">abs</span>(a.d[<span class="number">0</span>]-b.d[<span class="number">0</span>])+<span class="built_in">abs</span>(a.d[<span class="number">1</span>]-b.d[<span class="number">1</span>]);&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x=rt,<span class="keyword">bool</span> d=<span class="number">0</span>)</span> </span>&#123; </div><div class="line">	<span class="keyword">int</span> ds=dis(v[x],qy), dl=inf, dr=inf; cmin(as,ds); </div><div class="line">	<span class="keyword">if</span> (v[x].sn[<span class="number">0</span>]) dl = ask(v[x].sn[<span class="number">0</span>],qy); </div><div class="line">	<span class="keyword">if</span> (v[x].sn[<span class="number">1</span>]) dr = ask(v[x].sn[<span class="number">1</span>],qy); </div><div class="line">	<span class="keyword">if</span> (dl&lt;dr) &#123;  <span class="keyword">if</span> (dl&lt;as) query(v[x].sn[<span class="number">0</span>],!d); <span class="keyword">if</span> (dr&lt;as) query(v[x].sn[<span class="number">1</span>],!d);&#125; </div><div class="line">	<span class="keyword">else</span> &#123; <span class="keyword">if</span> (dr&lt;as) query(v[x].sn[<span class="number">1</span>],!d); <span class="keyword">if</span> (dl&lt;as) query(v[x].sn[<span class="number">0</span>],!d);&#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; 	</div><div class="line">	in(n), in(m); rep(i,<span class="number">1</span>,n) in(v[i].d[<span class="number">0</span>]), in(v[i].d[<span class="number">1</span>]); <span class="keyword">int</span> t;</div><div class="line">	<span class="keyword">for</span> (rt=build(); m; --m) &#123; in(t), as=inf; </div><div class="line">		<span class="keyword">if</span> (t==<span class="number">1</span>) in(v[++n].d[<span class="number">0</span>]),in(v[n].d[<span class="number">1</span>]),v[n].init(),insert(); </div><div class="line">		<span class="keyword">else</span> in(qy.d[<span class="number">0</span>]),in(qy.d[<span class="number">1</span>]),query(),<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,as);</div><div class="line">	&#125; </div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;模板题？ 没有想出如果不会kd-tree该怎么做， 但是有了kd-tree确实是模板题哎。&lt;/p&gt;
&lt;p&gt;有时候科技的力量真是耐人寻味。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://shallwe.ga/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="KD树" scheme="http://shallwe.ga/tags/KD%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4773】负环</title>
    <link href="http://shallwe.ga/bzoj4773/"/>
    <id>http://shallwe.ga/bzoj4773/</id>
    <published>2017-05-24T12:20:39.000Z</published>
    <updated>2017-05-24T12:26:05.182Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个是一个板子题哎， 就是倍增然后floyed跑一下。</p>
<p>但是时间限制是30s, 相对比较宽松的， 所以可以直接<span class="math inline">\(O(n^4)\)</span>的跑。</p>
<p>不过还是没有偷这个小懒。。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4773" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>求一个点数最少的负环， 输出点数。</p>
<h1 id="解题报告">解题报告</h1>
<p>记<span class="math inline">\(f[i][j][k]\)</span>表示<span class="math inline">\(i\)</span>到<span class="math inline">\(j\)</span>经过<span class="math inline">\(k\)</span>个点的最短路。</p>
<p>枚举<span class="math inline">\(k\)</span>和<span class="math inline">\(i\)</span>, 如果存在<span class="math inline">\(f[i][j][k]\)</span>是负数， 那么就是一个负环。</p>
<p>可以发现这个<span class="math inline">\(k\)</span>不需要枚举，满足二分的性质，实际上进行倍增是非常科学的。</p>
<p>复杂度是<span class="math inline">\((n^3\log n)\)</span>的。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">310</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> lg=<span class="number">10</span>; </div><div class="line"></div><div class="line"><span class="keyword">int</span> n,m,f[lg][N][N],g[N][N],h[N][N],as;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> a)</span> </span>&#123; x=a&lt;x?a:x; &#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m); <span class="keyword">int</span> u,v,w,l; </div><div class="line">	<span class="built_in">memset</span>(h,<span class="number">127</span>/<span class="number">3</span>,<span class="keyword">sizeof</span>(h)); </div><div class="line">	<span class="built_in">memset</span>(f,<span class="number">127</span>/<span class="number">3</span>,<span class="keyword">sizeof</span>(f)); </div><div class="line">	rep(i,<span class="number">1</span>,n) f[<span class="number">0</span>][i][i]=h[i][i]=<span class="number">0</span>; </div><div class="line">	rep(i,<span class="number">1</span>,m) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w),f[<span class="number">0</span>][u][v]=w; </div><div class="line">	<span class="keyword">for</span> (l=<span class="number">1</span>;l&lt;=<span class="number">9</span>;++l) &#123; <span class="keyword">bool</span> flag=<span class="number">0</span>; </div><div class="line">		rep(k,<span class="number">1</span>,n) rep(i,<span class="number">1</span>,n) rep(j,<span class="number">1</span>,n) </div><div class="line">			cmin(f[l][i][j],f[l<span class="number">-1</span>][i][k]+f[l<span class="number">-1</span>][k][j]); </div><div class="line">		rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (f[l][i][i]&lt;<span class="number">0</span>) flag=<span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (flag) <span class="keyword">break</span>; <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;l)&gt;=n) <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"0"</span>), <span class="number">0</span>; </div><div class="line">	&#125;</div><div class="line">	as=<span class="number">0</span>; </div><div class="line">	<span class="keyword">while</span> (~l) &#123; <span class="built_in">memcpy</span>(g,h,<span class="keyword">sizeof</span>(h)); <span class="keyword">bool</span> flag=<span class="number">0</span>; </div><div class="line">		rep(k,<span class="number">1</span>,n) rep(i,<span class="number">1</span>,n) rep(j,<span class="number">1</span>,n) </div><div class="line">			cmin(h[i][j],g[i][k]+f[l][k][j]); </div><div class="line">		rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (h[i][i]&lt;<span class="number">0</span>) flag=<span class="number">1</span>; </div><div class="line">		<span class="keyword">if</span> (flag) <span class="built_in">memcpy</span>(h,g,<span class="keyword">sizeof</span>(g)); </div><div class="line">		<span class="keyword">else</span> as+=(<span class="number">1</span>&lt;&lt;l); -- l; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,as+<span class="number">1</span>),<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个是一个板子题哎， 就是倍增然后floyed跑一下。&lt;/p&gt;
&lt;p&gt;但是时间限制是30s, 相对比较宽松的， 所以可以直接&lt;span class=&quot;math inline&quot;&gt;\(O(n^4)\)&lt;/span&gt;的跑。&lt;/p&gt;
&lt;p&gt;不过还是没有偷这个小懒。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="图论题" scheme="http://shallwe.ga/categories/%E5%9B%BE%E8%AE%BA%E9%A2%98/"/>
    
    
      <category term="倍增" scheme="http://shallwe.ga/tags/%E5%80%8D%E5%A2%9E/"/>
    
      <category term="floyed" scheme="http://shallwe.ga/tags/floyed/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 3028】食物</title>
    <link href="http://shallwe.ga/bzoj3028/"/>
    <id>http://shallwe.ga/bzoj3028/</id>
    <published>2017-05-24T11:04:50.000Z</published>
    <updated>2017-05-27T06:15:35.997Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一个非常基础（甚至不需要）的生成函数题？</p>
<p>感觉生成函数这种神通广大， 名字吓人的东西， 能够有这么平易近人的入门题， 对我这种弱鸡真是太友善了。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3028" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>一些物品， 分别可以购买奇数个， 偶数个， 三的倍数个， 四的倍数个，0个（两种）， 0个， 0个。</p>
<p>问凑出<span class="math inline">\(n\)</span>个物品的方案数。</p>
<h1 id="解题报告">解题报告</h1>
<h4 id="算法一">算法一</h4>
<p>把{奇数个，0个}, {偶数个，0个}，{三的倍数个，0}, {四的倍数个， 0} 这四类拆开看， 可以发现除了第一类必须占<span class="math inline">\(&gt;=1\)</span>个物品外， 其他类组成任意个物品的方案数都是唯一的。</p>
<p>所以答案是将<span class="math inline">\(n-1\)</span>个物品分成<span class="math inline">\(4\)</span>分， 每一份可以为0的方案数， 也就是<span class="math inline">\({n+2} \choose{3}\)</span>.</p>
<h4 id="算法二">算法二</h4>
<p>化一发生成函数： <span class="math display">\[
\begin{aligned}
&amp;F(odd)=x+x^3+x^5+...=\frac{x}{1-x^2}\\
&amp;F(even)=1+x^2+x^4+...=\frac{1}{1-x^2}\\
&amp;F^2(0|1)=(1+x)^2\\
&amp;F(0|1|2)=1+x+x^2=\frac{1-x^3}{1-x}\\
&amp;F(0|1|2|3)=1+x+x^2+x^3=\frac{1-x^4}{1-x}
\end{aligned}
\]</span> 乘起来得到</p>
<p><span class="math display">\[F(\text{all}) = \frac{x}{(1-x)^4}\]</span></p>
<p>再展开得到：</p>
<p><span class="math display">\[F(\text{all})=x*\left(1+{1+4-1\choose 4-1}x+{2+4-1 \choose 4-1}x^2+...\right)\]</span></p>
<p>答案是<span class="math inline">\(x^n\)</span>项的系数， 也就是<span class="math inline">\({n-1+4-1 \choose 4-1}\)</span>.</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(a);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">10007</span>;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">  	<span class="keyword">long</span> <span class="keyword">long</span> as=<span class="number">0</span>; <span class="keyword">char</span> c=getchar();</div><div class="line">	<span class="keyword">for</span> (;c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>; c=getchar())as=(as*<span class="number">10</span>+c<span class="number">-48</span>)%p;</div><div class="line">	as=as*(as+<span class="number">1</span>)*(as+<span class="number">2</span>)/<span class="number">1</span>/<span class="number">2</span>/<span class="number">3</span>%p; </div><div class="line">  	<span class="keyword">return</span> <span class="built_in">cout</span>&lt;&lt;as&lt;&lt;<span class="built_in">endl</span>,<span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个非常基础（甚至不需要）的生成函数题？&lt;/p&gt;
&lt;p&gt;感觉生成函数这种神通广大， 名字吓人的东西， 能够有这么平易近人的入门题， 对我这种弱鸡真是太友善了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数学题" scheme="http://shallwe.ga/categories/%E6%95%B0%E5%AD%A6%E9%A2%98/"/>
    
    
      <category term="组合数学" scheme="http://shallwe.ga/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="生成函数" scheme="http://shallwe.ga/tags/%E7%94%9F%E6%88%90%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 4144】[AMPPZ2014]Petrol</title>
    <link href="http://shallwe.ga/bzoj4144/"/>
    <id>http://shallwe.ga/bzoj4144/</id>
    <published>2017-05-24T09:21:51.000Z</published>
    <updated>2017-05-27T06:03:24.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一个图论题， 需要一些性质， 需要足够的又不能超时的最短路信息来确保关键点的最小生成树不改变。</p>
<p>这个性质还是不是特别容易发现的啊。。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=4144" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p><span class="math inline">\(n\)</span>个点， <span class="math inline">\(m\)</span>条边， 无向图， <span class="math inline">\(S\)</span>个关键点， 多次询问， 问是否存在路径<span class="math inline">\(x \rightarrow y\)</span>, 使得相邻两个关键点的距离不超过<span class="math inline">\(b\)</span> 。</p>
<p>（题目保证<span class="math inline">\(x\)</span>, <span class="math inline">\(y\)</span>为关键点）。</p>
<h1 id="解题报告">解题报告</h1>
<p>首先如果求出关键点之间两两的最短路， 那么题目就与非关键点没有什么关系了。</p>
<p>但是关键点的数量级是<span class="math inline">\(O(n)\)</span>的， 所以非常的不支持。</p>
<p>考虑存在在最终的最小生成树上的关键点之间的路径具有什么性质。</p>
<p>如果<span class="math inline">\(a,b\)</span>两点的最短路径中，存在点<span class="math inline">\(x\)</span>到关键点<span class="math inline">\(c\)</span>的距离小于到关键点<span class="math inline">\(a\)</span>和<span class="math inline">\(b\)</span>的距离的任何一个， 那么<span class="math inline">\(a \rightarrow b\)</span>的路径一定不在最终的最小生成树中。</p>
<p>因为<span class="math inline">\(a \rightarrow c \rightarrow b\)</span>一定是比<span class="math inline">\(a \rightarrow b\)</span>更好的策略。</p>
<p>所以需要的路径一定是“双色的”， 也就是一部分到<span class="math inline">\(x\)</span>最近， 一部分到<span class="math inline">\(y\)</span>最近。</p>
<p>那么枚举<span class="math inline">\(m\)</span>条边， 如果两个点颜色不一样， 分别是<span class="math inline">\(a,b\)</span>, 那么就添加<span class="math inline">\(a \rightarrow b\)</span>的最短路。</p>
<p>这些边足够组成最终的生成树。</p>
<p>所以就边权排序一波， 然后并查集维护一波。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(a);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200100</span>; </div><div class="line"> </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> nx,to,v; edge()&#123;&#125;</div><div class="line">    edge(<span class="keyword">int</span> nx,<span class="keyword">int</span> to,<span class="keyword">int</span> v) </div><div class="line">        :nx(nx),to(to),v(v)&#123;&#125;</div><div class="line">&#125; e[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ques</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> x,y,lm,t,id;</div><div class="line">    ques(<span class="keyword">int</span> x=<span class="number">0</span>,<span class="keyword">int</span> y=<span class="number">0</span>,<span class="keyword">int</span> lm=<span class="number">0</span>,<span class="keyword">int</span> t=<span class="number">0</span>,<span class="keyword">int</span> id=<span class="number">0</span>) </div><div class="line">        :x(x),y(y),lm(lm),t(t),id(id)&#123;&#125;</div><div class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> ques &amp;b) <span class="keyword">const</span>&#123; <span class="keyword">return</span> lm==b.lm?t&lt;b.t:lm&lt;b.lm;&#125;  </div><div class="line">&#125; qy[N&lt;&lt;<span class="number">1</span>]; </div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">side</span> &#123;</span> </div><div class="line">    <span class="keyword">int</span> x,y,d; side()&#123;&#125;</div><div class="line">    side(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d) </div><div class="line">        :x(x),y(y),d(d) &#123;&#125;</div><div class="line">&#125; sd[N]; </div><div class="line"><span class="keyword">int</span> hd[N],tot,n,s,m,c[N],Q,ds[N],co[N],un,f[N]; </div><div class="line"><span class="keyword">bool</span> vs[N],as[N]; <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">    <span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">    <span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">    <span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">    x*=f; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> d)</span> </span>&#123; </div><div class="line">    e[++tot]=edge(hd[x],y,d), hd[x]=tot; </div><div class="line">    e[++tot]=edge(hd[y],x,d), hd[y]=tot; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">if</span> (f[x]!=x) f[x]=find(f[x]);<span class="keyword">return</span> f[x]; &#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; </div><div class="line">  	<span class="keyword">int</span> a=find(x),b=find(y); <span class="keyword">if</span> (a!=b) f[a]=b;</div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    in(n),in(s),in(m); rep(i,<span class="number">1</span>,s) in(c[i]); </div><div class="line">    <span class="keyword">int</span> u,v,d; rep(i,<span class="number">1</span>,m)  &#123;</div><div class="line">        in(u),in(v),in(d),sd[i]=side(u,v,d); </div><div class="line">        add(u,v,d), add(v,u,d); </div><div class="line">    &#125;</div><div class="line">    rep(i,<span class="number">1</span>,n) ds[i]=<span class="number">2000000001</span>; </div><div class="line">    rep(i,<span class="number">1</span>,s) ds[c[i]]=<span class="number">0</span>,co[c[i]]=c[i],q.push(c[i]),vs[c[i]]=<span class="number">1</span>; </div><div class="line">    <span class="keyword">while</span> (!q.empty()) &#123; </div><div class="line">        u=q.front(); q.pop(); vs[u]=<span class="number">0</span>; </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=hd[u];i;i=e[i].nx) </div><div class="line">            <span class="keyword">if</span> (v=e[i].to, ds[u]+e[i].v&lt;ds[v]) &#123; </div><div class="line">                ds[v]=ds[u]+e[i].v, co[v]=co[u]; </div><div class="line">                <span class="keyword">if</span> (!vs[v]) vs[v]=<span class="number">1</span>, q.push(v); </div><div class="line">            &#125; </div><div class="line">    &#125;</div><div class="line">    in(Q),un=Q; rep(i,<span class="number">1</span>,n) f[i]=i; </div><div class="line">    rep(i,<span class="number">1</span>,Q) in(u),in(v),in(d),qy[i]=ques(u,v,d,<span class="number">1</span>,i);</div><div class="line">    rep(i,<span class="number">1</span>,m) &#123; </div><div class="line">      	u=sd[i].x,v=sd[i].y; </div><div class="line">      	<span class="keyword">if</span> (co[u]!=co[v])</div><div class="line">        	qy[++un]=ques(co[u],co[v],ds[u]+ds[v]+sd[i].d,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    sort(qy+<span class="number">1</span>,qy+<span class="number">1</span>+un); </div><div class="line">    rep(i,<span class="number">1</span>,un) &#123;</div><div class="line">        <span class="keyword">if</span> (qy[i].t) as[qy[i].id]=find(qy[i].x)==find(qy[i].y); </div><div class="line">        <span class="keyword">else</span> merge(qy[i].x,qy[i].y); </div><div class="line">    &#125;</div><div class="line">    rep(i,<span class="number">1</span>,Q) <span class="built_in">puts</span>((as[i])?<span class="string">"TAK"</span>:<span class="string">"NIE"</span>); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个图论题， 需要一些性质， 需要足够的又不能超时的最短路信息来确保关键点的最小生成树不改变。&lt;/p&gt;
&lt;p&gt;这个性质还是不是特别容易发现的啊。。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="图论题" scheme="http://shallwe.ga/categories/%E5%9B%BE%E8%AE%BA%E9%A2%98/"/>
    
    
      <category term="并查集" scheme="http://shallwe.ga/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="最短路" scheme="http://shallwe.ga/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 2244】[SDOI2011]拦截导弹</title>
    <link href="http://shallwe.ga/bzoj2244/"/>
    <id>http://shallwe.ga/bzoj2244/</id>
    <published>2017-05-24T08:48:14.000Z</published>
    <updated>2017-05-24T12:00:14.256Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>cdq分治优化dp的题目， 不是很了解当时省选这个题目的得分情况。</p>
<p>不过感觉对于日益简单SD一轮， 这个题目放在现在算是难度适中。</p>
<p>比较好写的一个题目。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2244" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>求最长三维偏序， 并求对于一个位置， 所在最长偏序的方案数。</p>
<h1 id="解题报告">解题报告</h1>
<p>三维偏序， 可以cdq分治 + 树状数组做。</p>
<p>最长三维偏序比较容易解决， 统计一个位置所在的最长三维偏序的方案数， 需要记录正反两个方向的最大值和方案数， 如果最大值的和等于答案， 则方案数为两侧方案数的乘积， 否则为0。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt; </span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ff; </div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50010</span>; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1000000000</span>; </div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span> &#123;</span> </div><div class="line">	<span class="keyword">int</span> a,b,id; point(<span class="keyword">int</span> a=<span class="number">0</span>,<span class="keyword">int</span> b=<span class="number">0</span>,<span class="keyword">int</span> id=<span class="number">0</span>) </div><div class="line">		:a(a),b(b),id(id) &#123;&#125;</div><div class="line">&#125; p[N]; </div><div class="line"><span class="keyword">int</span> vc[N],vas; </div><div class="line"><span class="keyword">int</span> n,m,f[<span class="number">2</span>][N]; ff g[<span class="number">2</span>][N]; </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(point x,point y)</span> </span>&#123;<span class="keyword">return</span> x.a==y.a?x.id&lt;y.id:x.a&lt;y.a;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123; </div><div class="line">	<span class="keyword">char</span> ch=getchar(); <span class="keyword">int</span> f=<span class="number">1</span>; </div><div class="line">	<span class="keyword">for</span> (;ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>;ch=getchar()) <span class="keyword">if</span>(ch==<span class="string">'-'</span>) f=<span class="number">-1</span>; </div><div class="line">	<span class="keyword">for</span> (x=<span class="number">0</span>;ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;ch=getchar()) x=x*<span class="number">10</span>+ch<span class="number">-48</span>; </div><div class="line">	x*=f; </div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> v[N],vv[N],mx[N]; ff hs[N]; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> a,ff b,<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> (;x&lt;=n;x+=x&amp;-x) <span class="keyword">if</span> (mx[x]==a) hs[x]+=b; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (mx[x]&lt;a) mx[x]=a,hs[x]=b; </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	<span class="keyword">for</span> (;x&lt;=n;x+=x&amp;-x) hs[x]=mx[x]=<span class="number">0</span>; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> &amp;a,ff &amp;b,<span class="keyword">int</span> x)</span> </span>&#123; </div><div class="line">	a=b=<span class="number">0</span>; <span class="keyword">for</span> (;x;x-=x&amp;-x) <span class="keyword">if</span> (mx[x]==a) b+=hs[x]; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (mx[x]&gt;a) a=mx[x], b=hs[x];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cdq</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> t)</span> </span>&#123; </div><div class="line">	<span class="keyword">if</span> (l==<span class="number">1</span>&amp;&amp;r==n) rep(i,l,r) v[i]=i; </div><div class="line">	<span class="keyword">if</span> (l==r) &#123; <span class="keyword">int</span> x=p[v[l]].id; </div><div class="line">		<span class="keyword">if</span> (f[t][x]==<span class="number">1</span>) g[t][x]+=<span class="number">1</span>; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (!f[t][x]) f[t][x]=<span class="number">1</span>, g[t][x]=<span class="number">1</span>; </div><div class="line">		<span class="keyword">return</span>; </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">int</span> _l,_r,md; md=(l+r)&gt;&gt;<span class="number">1</span>,_l=l<span class="number">-1</span>, _r=md; </div><div class="line">	rep(i,l,r) &#123; <span class="keyword">int</span> x=v[i];</div><div class="line">		<span class="keyword">if</span> (p[x].id&lt;=md) vv[++_l]=x; <span class="keyword">else</span> vv[++_r]=x; </div><div class="line">	&#125;</div><div class="line">	rep(i,l,r) v[i]=vv[i]; </div><div class="line">	cdq(l,md,t), _l=l; </div><div class="line">	rep(i,md+<span class="number">1</span>,r) &#123; <span class="keyword">int</span> x=v[i],_mx; ff _hs; </div><div class="line">		<span class="keyword">while</span> (_l&lt;=md&amp;&amp;p[v[_l]].a&lt;=p[x].a) </div><div class="line">			insert(f[t][p[v[_l]].id],g[t][p[v[_l]].id],p[v[_l]].b),++_l; </div><div class="line">		query(_mx,_hs,p[x].b) ;</div><div class="line">		<span class="keyword">int</span> d=p[x].id; </div><div class="line">		<span class="keyword">if</span> (_mx+<span class="number">1</span>==f[t][d]) g[t][d]+=_hs; </div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(_mx+<span class="number">1</span>&gt;f[t][d]) f[t][d]=_mx+<span class="number">1</span>,g[t][d]=_hs; </div><div class="line">	&#125;</div><div class="line">	rep(i,l,md) erase(p[v[i]].b); </div><div class="line">	cdq(md+<span class="number">1</span>,r,t); </div><div class="line">	_l=l,_r=md+<span class="number">1</span>; <span class="keyword">int</span> x=l<span class="number">-1</span>; </div><div class="line">	<span class="keyword">while</span> (_l&lt;=md||_r&lt;=r) &#123; </div><div class="line">		<span class="keyword">if</span> ((_l&lt;=md)&amp;&amp;(_r&gt;r||p[v[_l]].a&lt;p[v[_r]].a))</div><div class="line">			vv[++x]=v[_l++]; </div><div class="line">		<span class="keyword">else</span> vv[++x]=v[_r++];</div><div class="line">	&#125;</div><div class="line">	rep(i,l,r) v[i]=vv[i]; </div><div class="line">&#125;	</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">	in(n); rep(i,<span class="number">1</span>,n) &#123;</div><div class="line">		in(p[i].a),in(p[i].b),p[i].id=i; </div><div class="line">		vc[vas++]=p[i].b; </div><div class="line">	&#125;</div><div class="line">	sort(vc,vc+vas), vas=unique(vc,vc+vas)-vc; </div><div class="line">	rep(i,<span class="number">1</span>,n) p[i].b=lower_bound(vc,vc+vas,p[i].b)-vc+<span class="number">1</span>; </div><div class="line">	rep(i,<span class="number">1</span>,n/<span class="number">2</span>) swap(p[i].a,p[n-i+<span class="number">1</span>].a),swap(p[i].b,p[n-i+<span class="number">1</span>].b); </div><div class="line">	sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n,cmp),cdq(<span class="number">1</span>,n,<span class="number">0</span>); </div><div class="line">	rep(i,<span class="number">1</span>,n) p[i].b=vas-p[i].b+<span class="number">1</span>,p[i].a=inf-p[i].a+<span class="number">1</span>,p[i].id=n-p[i].id+<span class="number">1</span>; 	</div><div class="line">	sort(p+<span class="number">1</span>,p+<span class="number">1</span>+n,cmp),cdq(<span class="number">1</span>,n,<span class="number">1</span>); </div><div class="line">	<span class="keyword">int</span> as=<span class="number">0</span>; ff total=<span class="number">0</span>; </div><div class="line">	rep(i,<span class="number">1</span>,n) <span class="keyword">if</span> (f[<span class="number">0</span>][i]+f[<span class="number">1</span>][n-i+<span class="number">1</span>]<span class="number">-1</span>==as) total+=g[<span class="number">0</span>][i]*g[<span class="number">1</span>][n-i+<span class="number">1</span>]; </div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (f[<span class="number">0</span>][i]+f[<span class="number">1</span>][n-i+<span class="number">1</span>]<span class="number">-1</span>&gt;as) as=f[<span class="number">0</span>][i]+f[<span class="number">1</span>][n-i+<span class="number">1</span>]<span class="number">-1</span>,total=g[<span class="number">0</span>][i]*g[<span class="number">1</span>][n-i+<span class="number">1</span>]; </div><div class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,as); total/=as;</div><div class="line">	vep(i,n,<span class="number">1</span>) <span class="keyword">if</span> (f[<span class="number">0</span>][i]+f[<span class="number">1</span>][n-i+<span class="number">1</span>]<span class="number">-1</span>==as) </div><div class="line">		<span class="built_in">printf</span>(<span class="string">"%lf "</span>, g[<span class="number">0</span>][i]*g[<span class="number">1</span>][n-i+<span class="number">1</span>]/total); </div><div class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"0 "</span>); </div><div class="line">	<span class="built_in">puts</span>(<span class="string">""</span>); <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;cdq分治优化dp的题目， 不是很了解当时省选这个题目的得分情况。&lt;/p&gt;
&lt;p&gt;不过感觉对于日益简单SD一轮， 这个题目放在现在算是难度适中。&lt;/p&gt;
&lt;p&gt;比较好写的一个题目。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="动态规划" scheme="http://shallwe.ga/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="dp" scheme="http://shallwe.ga/tags/dp/"/>
    
      <category term="cdq分治" scheme="http://shallwe.ga/tags/cdq%E5%88%86%E6%B2%BB/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 3453】tyvj1858 XLkxc</title>
    <link href="http://shallwe.ga/bzoj3453/"/>
    <id>http://shallwe.ga/bzoj3453/</id>
    <published>2017-05-24T08:25:56.000Z</published>
    <updated>2017-05-27T06:14:53.680Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>从FJWC看到的一个题， 比较容易想到的做法是分析多项式的次数， 并使用LAG插值法进行求解。</p>
<p>但是有比较优美但是颇为繁琐的STD做法？ 用的是伯努利数那套理论。</p>
</blockquote>
<a id="more"></a>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=3453" target="_blank" rel="external">传送门</a></p>
<h1 id="题目大意">题目大意</h1>
<p>求：</p>
<p><span class="math display">\[\sum_{i=0}^{n} \sum_{j=1}^{a+i \times d} \sum_{l=1}^{j}l^k\]</span></p>
<h1 id="解题报告">解题报告</h1>
<ul>
<li>算法一
<ul>
<li>令<span class="math inline">\(f[n]=S(n,k)=\sum_{i=1}^{n} i^k\)</span>, 则<span class="math inline">\(f\)</span>为对一个<span class="math inline">\(k\)</span>次多项式求前缀和，所以<span class="math inline">\(f\)</span>为<span class="math inline">\(k+1\)</span>次多项式；</li>
<li>同理<span class="math inline">\(g[n]=\sum_{i=1}^{n} f[i]\)</span>，则<span class="math inline">\(g\)</span>为对<span class="math inline">\(f\)</span>求前缀和，<span class="math inline">\(g\)</span>为<span class="math inline">\(k+2\)</span>次多项式。</li>
<li>继续<span class="math inline">\(h[x]=g[a+x \times d]\)</span>, 则<span class="math inline">\(h[x]\)</span>次数界与<span class="math inline">\(g\)</span>相同， 为<span class="math inline">\(k+2\)</span>次多项式。</li>
<li>最后，<span class="math inline">\(ans[n]=\sum_{i=0}^{n}h[x]\)</span>，<span class="math inline">\(ans\)</span>为对<span class="math inline">\(h\)</span>求前缀和，所以<span class="math inline">\(ans\)</span>为<span class="math inline">\(k+4\)</span>次多项式。</li>
<li>因为<span class="math inline">\(g\)</span>为<span class="math inline">\(k+2\)</span>次多项式，<span class="math inline">\(O(k \log{k})\)</span> 预处理处<span class="math inline">\(g\)</span>的前<span class="math inline">\(k+3\)</span>项后，可以使用拉格朗日插值<span class="math inline">\(O(k)\)</span>插出一个<span class="math inline">\(h[x]\)</span>, <span class="math inline">\(O(k^2)\)</span>插出<span class="math inline">\(k+4\)</span>个<span class="math inline">\(h\)</span>并求前缀和得到<span class="math inline">\(k+4\)</span>个<span class="math inline">\(ans[x]\)</span>,再使用<span class="math inline">\(k+4\)</span>个<span class="math inline">\(ans[x]\)</span>进行插值得到<span class="math inline">\(ans[n]\)</span></li>
</ul></li>
<li>算法二
<ul>
<li><p>题目中给出伯努利数，主要目的是提示多项式的次数界。</p></li>
<li><p>但实际上可以使用伯努利数求解。</p></li>
<li><p>承接算法一中的定义，<span class="math inline">\(g(x)=\sum_{i=0}^{n+2} g_i x^i\)</span></p></li>
<li><p><span class="math display">\[
  \begin{aligned}
  ans[n] &amp;=\sum_{i=0}^{n} g(a+i*d) \\
  &amp;= \sum_{i=0}^{n} \sum_{t=0}^{n+2} g_t (a+i*d)^t \\
  &amp;= \sum_{i=0}^{n} \sum_{t=0}^{n+2} g_t \sum_{k=0}^{t} \binom{t}{k}a^{t-k}(i \times d)^{k} \\
  &amp;= \sum_{t=0}^{n+2} g_t \sum_{k=0}^{t} \binom{t}{k}a^{t-k}d^k \sum_{i=0}^n i^k
  \end{aligned}
  \]</span></p></li>
</ul></li>
<li><ul>
<li><p>然后发现， 如果能求出<span class="math inline">\(g_t\)</span>， 并能预处理<span class="math inline">\(\sum_{i=0}^{n}i^k\)</span>， 就可以<span class="math inline">\(k^2\)</span>的搞了。</p></li>
<li><p>翻一下<a href="http://blog.csdn.net/acdreamers/article/details/38929067" target="_blank" rel="external">伯努利数和自然数幂和</a></p></li>
<li><p>摘选重要的公式：</p></li>
<li><p><span class="math display">\[\sum_{k=0}^{n} \binom{n+1}{k} B_k=0\]</span></p></li>
<li><p>利用这个公式可以<span class="math inline">\(O(k^2)\)</span>预处理伯努利数<span class="math inline">\(B\)</span></p></li>
<li><p><span class="math display">\[\sum_{i=1}^{x}i^k=\frac{1}{k+1}\sum_{i=1}^{k+1}\binom{k+1}{i}B_{k+1-i}(x+1)^i\]</span></p></li>
<li><p>上式中，<span class="math inline">\((x+1)^i\)</span>不够优美，因为多项式中需要<span class="math inline">\(x^i\)</span>的形式， 所以把上式重写：</p></li>
<li><p><span class="math display">\[\sum_{i=0}^{x-1}i^k=\frac{1}{k+1}\sum_{i=1}^{k+1}\binom{k+1}{i}B_{k+1-i}x^i \quad (1)\]</span></p></li>
<li><p>对g化式子： <span class="math display">\[
\begin{aligned}
g(x)&amp;=\sum_{i=1}^{x} \sum_{j=1}^{i} j^k \\
&amp;=\sum_{i=1}^{x} (x-i+1)*i^k\\
&amp;=x*\sum_{i=0}^{x-1}i^k-\sum_{i=0}^{x-1}i^{k+1}+\sum_{i=0}^{x-1}i^k+x^k
\end{aligned} \ (2)
\]</span></p></li>
</ul></li>
<li><ul>
<li><p>利用这个式子<span class="math inline">\((1)(2)\)</span>,<span class="math inline">\(O(k)\)</span>预处理<span class="math inline">\(g_t\)</span></p></li>
<li>利用式子<span class="math inline">\((1)\)</span>, <span class="math inline">\(\sum_{i=0}^{n}i^k\)</span>单次<span class="math inline">\(O(k)\)</span>, 所以可以<span class="math inline">\(O(k^2)\)</span>预处理<span class="math inline">\(S(n,k)\)</span>.</li>
<li><p>这样就完结撒花喽~~</p></li>
</ul></li>
</ul>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> p=<span class="number">1234567891</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3015</span>; </div><div class="line"> </div><div class="line">ll f[N],g[N],fc[N],iv[N],pe[N],su[N],k,a,n,d; </div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">fast</span><span class="params">(ll x,<span class="keyword">int</span> k)</span> </span>&#123;ll as=<span class="number">1</span>; <span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%p) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) as=as*x%p;<span class="keyword">return</span> as;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mo</span><span class="params">(ll x, ll y)</span> </span>&#123; x+=y; <span class="keyword">if</span> (x&gt;=p) x-=p; <span class="keyword">if</span> (x&lt;<span class="number">0</span>) x+=p; <span class="keyword">return</span> x;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">P</span><span class="params">(ll x,ll y)</span> </span>&#123; <span class="keyword">if</span> ((x-y)&amp;<span class="number">1</span>) <span class="keyword">return</span> p<span class="number">-1</span>; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lag</span><span class="params">(ll f[],ll n, <span class="keyword">int</span> k)</span> </span>&#123; </div><div class="line">    pe[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,k) pe[i]=pe[i<span class="number">-1</span>]*(n-i+p)%p; </div><div class="line">    su[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,k) su[i]=su[i<span class="number">-1</span>]*(n-k+i<span class="number">-1</span>+p)%p; </div><div class="line">    ll as=<span class="number">0</span>; </div><div class="line">    rep(i,<span class="number">1</span>,k) &#123; </div><div class="line">        ll up=pe[i<span class="number">-1</span>]*su[k-i]%p*f[i]%p; </div><div class="line">        ll dn=iv[i<span class="number">-1</span>]*iv[k-i]%p; </div><div class="line">        as=mo(as, up*dn%p*P(k,i)%p); </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> as; </div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    fc[<span class="number">0</span>]=<span class="number">1</span>; rep(i,<span class="number">1</span>,<span class="number">3010</span>) fc[i]=fc[i<span class="number">-1</span>]*i%p; </div><div class="line">    iv[<span class="number">3010</span>]=fast(fc[<span class="number">3010</span>],p<span class="number">-2</span>); vep(i,<span class="number">3009</span>,<span class="number">0</span>) iv[i]=iv[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%p;</div><div class="line">    <span class="keyword">int</span> test; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;test);</div><div class="line">    <span class="keyword">while</span> (test--) &#123; </div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;k,&amp;a,&amp;n,&amp;d); </div><div class="line">        rep(i,<span class="number">0</span>,k+<span class="number">3</span>) g[i]=fast(i,k); </div><div class="line">        rep(i,<span class="number">1</span>,k+<span class="number">3</span>) g[i]=mo(g[i<span class="number">-1</span>],g[i]); </div><div class="line">        rep(i,<span class="number">1</span>,k+<span class="number">3</span>) g[i]=mo(g[i<span class="number">-1</span>],g[i]); </div><div class="line">        f[<span class="number">0</span>]=lag(g,a,k+<span class="number">3</span>);</div><div class="line">        rep(i,<span class="number">1</span>,k+<span class="number">5</span>) f[i]=mo(f[i<span class="number">-1</span>],lag(g,(a+d*i)%p,k+<span class="number">3</span>)); </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,lag(f,n,k+<span class="number">5</span>)); </div><div class="line">    &#125; </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;从FJWC看到的一个题， 比较容易想到的做法是分析多项式的次数， 并使用LAG插值法进行求解。&lt;/p&gt;
&lt;p&gt;但是有比较优美但是颇为繁琐的STD做法？ 用的是伯努利数那套理论。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数学题" scheme="http://shallwe.ga/categories/%E6%95%B0%E5%AD%A6%E9%A2%98/"/>
    
    
      <category term="拉格朗日插值" scheme="http://shallwe.ga/tags/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC/"/>
    
      <category term="数论" scheme="http://shallwe.ga/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>【bzoj 2063】我爸是李刚</title>
    <link href="http://shallwe.ga/bzoj2063/"/>
    <id>http://shallwe.ga/bzoj2063/</id>
    <published>2017-05-05T13:18:28.000Z</published>
    <updated>2017-05-24T07:07:19.221Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这个题目Yveh送给xyx做胡策题的， 但是我这种只做过二进制数位dp裸题的丝薄选手， 直接懵逼了好不好。。</p>
<p>实际上是数位dp的例题， 好几年前的论文里就有了。</p>
<p>话说这个题目真是非常的魔性。</p>
</blockquote>
<a id="more"></a>
<div class="figure">
<img src="http://oj12ftk88.bkt.clouddn.com/blog/20170505/212205950.png?imageslim">

</div>
<p><a href="http://www.lydsy.com/JudgeOnline/problem.php?id=2063" target="_blank" rel="external">题目链接</a></p>
<h1 id="题目大意">题目大意</h1>
<p>区间<span class="math inline">\([l,r]\)</span>， 每个数的价值是各个数位的数字之和， 如果相邻的<span class="math inline">\(x\)</span>个数价值和大于等于<span class="math inline">\(m\)</span>， 则这<span class="math inline">\(x\)</span>个数可以分为一组， 求<span class="math inline">\([l,r]\)</span>最多分为几组。</p>
<h1 id="解题报告">解题报告</h1>
<p>因为数的价值是各个数位的数字之和， 所以考虑进行数位dp.</p>
<p>具体的，考虑“数位树”， 在十进制下也就是一个十叉树， 那么对于一个<span class="math inline">\([l,r]\)</span>的询问，可以转换成<span class="math inline">\((l&#39;,r&#39;)\)</span>, 在十叉树上， 这个开区间中的数可以看作若干满二叉子树。</p>
<p>因为树高是<span class="math inline">\(\text{log }n\)</span>级别的，所以这些满十叉树的个数是<span class="math inline">\(\text{log }n\)</span> 级别的。</p>
<p>考虑预处理每棵满十叉树对答案可能产生的贡献， 因为一颗满十叉树可能分成若干组后， 贡献一个<span class="math inline">\(\leqslant m\)</span>的一个余数， 不妨设计这样的状态:</p>
<p><span class="math inline">\(f[i][j][k]\)</span> 表示满十叉树根节点的深度是<span class="math inline">\(i\)</span>, 子树根节点到根的路径和为<span class="math inline">\(j\)</span>, 在前方提供<span class="math inline">\(k\)</span>的余数， 可以贡献的分组数。</p>
<p><span class="math inline">\(g[i][j][k]\)</span> 表示满十叉树根节点的深度是<span class="math inline">\(i\)</span>, 子树根节点到根的路径和为<span class="math inline">\(j\)</span>, 在前方提供<span class="math inline">\(k\)</span>的余数， 贡献若干组后剩余的余数。</p>
<p>现在就得到了每棵满十叉树在不同情况下对答案的贡献、对后方子树的影响， 消耗的时间复杂度是<span class="math inline">\(O(\log^2n * 10^2 * m)\)</span> 。</p>
<p>查询的时候，在十叉树上查询<span class="math inline">\((l&#39;,r&#39;)\)</span>两个区间端点的<span class="math inline">\(\text{lca}\)</span>, 分别从左侧向上爬，在从<span class="math inline">\(\text{lca}\)</span>向右端点爬 。</p>
<p>统计答案， 复杂度是<span class="math inline">\(O(\log n * 10)\)</span>的。</p>
<h1 id="代码">代码</h1>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </div><div class="line"> </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=int(a),nn=int(b);i&lt;=nn;++i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> vep(i,a,b) for(int i=int(a),nn=int(b);i&gt;=nn;--i) </span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> xep(i,b) for(int i=0,nn=int(b);i&lt;nn;++i) </span></div><div class="line"> </div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll; </div><div class="line"> </div><div class="line">ll f[<span class="number">20</span>][<span class="number">180</span>][<span class="number">1010</span>],l,r;</div><div class="line"><span class="keyword">int</span> g[<span class="number">20</span>][<span class="number">180</span>][<span class="number">1010</span>],m,a[<span class="number">25</span>],b[<span class="number">25</span>],sa[<span class="number">25</span>],sb[<span class="number">25</span>],la,lb,ln,tst;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</div><div class="line">    la=lb=ln=<span class="number">0</span>;</div><div class="line">    rep(i,<span class="number">0</span>,<span class="number">9</span>*<span class="number">18</span>) rep(j,<span class="number">0</span>,m<span class="number">-1</span>) f[<span class="number">1</span>][i][j]=(i+j&gt;=m),g[<span class="number">1</span>][i][j]=(i+j&gt;=m?<span class="number">0</span>:i+j); </div><div class="line">    rep(i,<span class="number">2</span>,<span class="number">18</span>) rep(j,<span class="number">0</span>,<span class="number">9</span>*(<span class="number">18</span>-i+<span class="number">1</span>)) rep(k,<span class="number">0</span>,m<span class="number">-1</span>) &#123; </div><div class="line">        <span class="keyword">int</span> tmp=k; f[i][j][k]=<span class="number">0</span>; </div><div class="line">        rep(x,<span class="number">0</span>,<span class="number">9</span>) f[i][j][k]+=f[i<span class="number">-1</span>][j+x][tmp],tmp=g[i<span class="number">-1</span>][j+x][tmp]; </div><div class="line">        g[i][j][k]=tmp; </div><div class="line">    &#125; </div><div class="line">    --l, ++r; </div><div class="line">    <span class="keyword">while</span> (l) a[++la]=l%<span class="number">10</span>, l/=<span class="number">10</span>; </div><div class="line">    <span class="keyword">while</span> (r) b[++lb]=r%<span class="number">10</span>, r/=<span class="number">10</span>; </div><div class="line">    sa[lb+<span class="number">1</span>]=<span class="number">0</span>,sb[lb+<span class="number">1</span>]=<span class="number">0</span>; vep(i,lb,<span class="number">1</span>) </div><div class="line">        sa[i]=sa[i+<span class="number">1</span>]+a[i],sb[i]=sb[i+<span class="number">1</span>]+b[i]; </div><div class="line">    ln=lb; <span class="keyword">while</span> (a[ln]==b[ln]) --ln; <span class="keyword">int</span> tmp=<span class="number">0</span>; ll as=<span class="number">0</span>; </div><div class="line">    rep(i,<span class="number">1</span>,ln<span class="number">-1</span>) rep(j,a[i]+<span class="number">1</span>,<span class="number">9</span>) </div><div class="line">        as+=f[i][sa[i+<span class="number">1</span>]+j][tmp],tmp=g[i][sa[i+<span class="number">1</span>]+j][tmp]; </div><div class="line">    rep(i,a[ln]+<span class="number">1</span>,b[ln]<span class="number">-1</span>) as+=f[ln][sa[ln+<span class="number">1</span>]+i][tmp],tmp=g[ln][sa[ln+<span class="number">1</span>]+i][tmp]; </div><div class="line">    vep(i,ln<span class="number">-1</span>,<span class="number">1</span>) rep(j,<span class="number">0</span>,b[i]<span class="number">-1</span>) </div><div class="line">        as+=f[i][sb[i+<span class="number">1</span>]+j][tmp],tmp=g[i][sb[i+<span class="number">1</span>]+j][tmp]; </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,as); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%d"</span>,&amp;l,&amp;r,&amp;m); </div><div class="line">    solve(); </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这个题目Yveh送给xyx做胡策题的， 但是我这种只做过二进制数位dp裸题的丝薄选手， 直接懵逼了好不好。。&lt;/p&gt;
&lt;p&gt;实际上是数位dp的例题， 好几年前的论文里就有了。&lt;/p&gt;
&lt;p&gt;话说这个题目真是非常的魔性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="动态规划" scheme="http://shallwe.ga/categories/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    
      <category term="数位dp" scheme="http://shallwe.ga/tags/%E6%95%B0%E4%BD%8Ddp/"/>
    
      <category term="dp" scheme="http://shallwe.ga/tags/dp/"/>
    
  </entry>
  
</feed>
